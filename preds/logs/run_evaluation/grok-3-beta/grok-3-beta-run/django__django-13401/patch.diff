diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..ed5afa0706 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,16 +516,28 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
+            # Compare creation_counter and model if it exists
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return (self.creation_counter == other.creation_counter and 
+                        self.model == other.model)
             return self.creation_counter == other.creation_counter
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
+            # Order by creation_counter first, then by model if it exists
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                if self.creation_counter != other.creation_counter:
+                    return self.creation_counter < other.creation_counter
+                return id(self.model) < id(other.model)
             return self.creation_counter < other.creation_counter
         return NotImplemented
 
     def __hash__(self):
+        # Include model in hash if it exists
+        if hasattr(self, 'model'):
+            return hash((self.creation_counter, self.model))
         return hash(self.creation_counter)
 
     def __deepcopy__(self, memodict):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..fb8649ac93
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,38 @@
+
+import django
+from django.db import models
+from django.conf import settings
+
+# Configure minimal Django settings for standalone script
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+class A(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'test_app'
+    myfield = models.IntegerField()
+
+class B(A):
+    pass
+
+class C(A):
+    pass
+
+# Check if fields are considered equal
+field_b = B._meta.get_field('myfield')
+field_c = C._meta.get_field('myfield')
+print('Fields are equal:', field_b == field_c)
+print('Length of set:', len({field_b, field_c}))
+print('Script completed successfully, no errors.')
\ No newline at end of file
