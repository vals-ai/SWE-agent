diff --git a/django/db/models/base.py b/django/db/models/base.py
index 2428218696..a2a06a2438 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -933,9 +933,8 @@ class Model(metaclass=ModelBase):
                         "%s() prohibited to prevent data loss due to unsaved "
                         "related object '%s'." % (operation_name, field.name)
                     )
-                elif getattr(self, field.attname) is None:
-                    # Use pk from related object if it has been saved after
-                    # an assignment.
+                # Always update the foreign key ID to the current primary key of the related object if it exists
+                if obj.pk is not None:
                     setattr(self, field.attname, obj.pk)
                 # If the relationship's pk/to_field was changed, clear the
                 # cached relationship.
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 32fee78e9f..283a690075 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1265,7 +1265,8 @@ class QuerySet:
             using = self.db
         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
         query.insert_values(fields, objs, raw=raw)
-        return query.get_compiler(using=using).execute_sql(returning_fields)
+        compiler = query.get_compiler(using=using)
+        return compiler.execute_sql(returning_fields)
     _insert.alters_data = True
     _insert.queryset_only = False
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..5aaa7466c8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,67 @@
+import django
+from django.conf import settings
+
+# Configure Django settings for in-memory database
+django.conf.settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['__main__'],
+    DEBUG=True
+)
+
+django.setup()
+from django.core.management import call_command
+
+# Manually create database tables using raw SQL
+from django.db import connection
+
+# Create Product table
+connection.cursor().execute("""
+    CREATE TABLE IF NOT EXISTS __main___product (
+        sku TEXT PRIMARY KEY
+    )
+""")
+
+# Create Order table
+connection.cursor().execute("""
+    CREATE TABLE IF NOT EXISTS __main___order (
+        id INTEGER PRIMARY KEY AUTOINCREMENT,
+        product_id TEXT,
+        FOREIGN KEY (product_id) REFERENCES __main___product(sku) ON DELETE CASCADE
+    )
+""")
+
+
+
+from django.db import models, transaction
+
+# Define the models as per the issue
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+
+# Test case 1: Setting primary key after assignment
+with transaction.atomic():
+    order = Order()
+    order.product = Product()
+    order.product.sku = "foo"
+    order.product.save()
+    order.save()
+    assert not Order.objects.filter(product_id="").exists(), "Product ID should not be empty"
+    assert Order.objects.filter(product=order.product).exists(), "Should find order with product"
+
+# Test case 2: Setting primary key before assignment
+with transaction.atomic():
+    order = Order()
+    order.product = Product(sku="bar")
+    order.product.save()
+    order.save()
+    assert Order.objects.filter(product=order.product).exists(), "Should find order with product"
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
