diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..fcf6c8d807 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,10 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            try:
+                arrays.append(converter(input_) if converter else input_)
+            except ValueError:
+                return NotImplemented
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..744f1f01ae
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,47 @@
+
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+# Test cases
+try:
+    print('Test 1: DuckArray(1 * u.mm) + (1 * u.m)')
+    result1 = DuckArray(1 * u.mm) + (1 * u.m)
+    print('Result:', result1.ndarray)
+except Exception as e:
+    print('Error:', e)
+
+try:
+    print('Test 2: (1 * u.mm) + DuckArray(1 * u.mm)')
+    result2 = (1 * u.mm) + DuckArray(1 * u.mm)
+    print('Result:', result2.ndarray)
+except Exception as e:
+    print('Error:', e)
+
+try:
+    print('Test 3: (1 * u.m) + DuckArray(1 * u.mm)')
+    result3 = (1 * u.m) + DuckArray(1 * u.mm)
+    print('Result:', result3.ndarray)
+except Exception as e:
+    print('Error:', e)
+
+print('Script completed successfully, no errors.')
\ No newline at end of file
