diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..62cc383035 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1768,6 +1768,12 @@ class IntegerField(Field):
         value = super().get_prep_value(value)
         if value is None:
             return None
+        from django.utils.functional import SimpleLazyObject
+        from django.db import models
+        if isinstance(value, SimpleLazyObject):
+            value = value._wrapped
+            if isinstance(value, models.Model):
+                value = value.pk
         try:
             return int(value)
         except (TypeError, ValueError) as e:
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..99ceb01122
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,61 @@
+
+import django
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+from django.db import connection
+# Create tables for auth app if needed
+import django.apps
+for model in django.apps.apps.get_models():
+    if model._meta.app_label == 'auth':
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(model)
+from django.contrib.auth.models import User
+from django.db.models import OuterRef, Subquery
+from django.utils.functional import SimpleLazyObject
+from django.test import TestCase
+
+# Mock models to simulate the structure in the issue
+from django.db import models
+
+class A(models.Model):
+    class Meta:
+        app_label = 'auth'
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'auth'
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'auth'
+
+class BugTestCase(TestCase):
+    def test_bug(self):
+        owner_user = (
+            B.objects.filter(a=OuterRef("pk"))
+            .annotate(owner_user=Subquery(C.objects.values("owner")))
+            .values("owner_user")
+        )
+        user = SimpleLazyObject(lambda: User.objects.create_user("testuser"))
+        A.objects.annotate(owner_user=Subquery(owner_user)).filter(
+            owner_user=user
+        )
+
+if __name__ == '__main__':
+    test = BugTestCase()
+    test.test_bug()
+    print("Script completed successfully, no errors.")
\ No newline at end of file
