diff --git a/additional_test.py b/additional_test.py
new file mode 100644
index 0000000000..7d9be4c38a
--- /dev/null
+++ b/additional_test.py
@@ -0,0 +1,58 @@
+
+from django.template import Template, Context
+from django.utils.translation import gettext_lazy as _
+from datetime import datetime, time
+import django.conf
+import django
+
+# Configure minimal Django settings
+django.conf.settings.configure(
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'DIRS': [],
+            'APP_DIRS': True,
+        },
+    ],
+    USE_I18N=True
+)
+# Setup Django
+django.setup()
+
+# Test 1: Date format with lazy string
+template1 = Template('{{ date|date:format }}')
+context1 = Context({
+    'date': datetime.now(),
+    'format': _('Y-m-d')
+})
+try:
+    output1 = template1.render(context1)
+    print('Test 1 - Date format with lazy string:', output1)
+except Exception as e:
+    print('Test 1 Error:', str(e))
+
+# Test 2: Time format with lazy string
+template2 = Template('{{ time|time:format }}')
+context2 = Context({
+    'time': time(hour=14, minute=30),
+    'format': _('H:i')
+})
+try:
+    output2 = template2.render(context2)
+    print('Test 2 - Time format with lazy string:', output2)
+except Exception as e:
+    print('Test 2 Error:', str(e))
+
+# Test 3: Custom format string (non-lazy)
+template3 = Template('{{ date|date:format }}')
+context3 = Context({
+    'date': datetime.now(),
+    'format': 'Y-m-d H:i'
+})
+try:
+    output3 = template3.render(context3)
+    print('Test 3 - Custom format string:', output3)
+except Exception as e:
+    print('Test 3 Error:', str(e))
+
+print('All tests completed successfully, no errors.')
\ No newline at end of file
diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..f078494325 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -113,7 +113,9 @@ def get_format(format_type, lang=None, use_l10n=None):
             use_l10n = settings.USE_L10N
     if use_l10n and lang is None:
         lang = get_language()
-    cache_key = (format_type, lang)
+    # Ensure format_type is a string, not a lazy object
+    format_type_str = str(format_type)
+    cache_key = (format_type_str, lang)
     try:
         return _format_cache[cache_key]
     except KeyError:
@@ -125,7 +127,7 @@ def get_format(format_type, lang=None, use_l10n=None):
     val = None
     if use_l10n:
         for module in get_format_modules(lang):
-            val = getattr(module, format_type, None)
+            val = getattr(module, format_type_str, None)
             if val is not None:
                 break
     if val is None:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..dd9c645145
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,34 @@
+
+from django.template import Template, Context
+from django.utils.translation import gettext_lazy as _
+from datetime import datetime
+import django.conf
+import django
+
+# Configure minimal Django settings
+django.conf.settings.configure(
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'DIRS': [],
+            'APP_DIRS': True,
+        },
+    ],
+    USE_I18N=True
+)
+# Setup Django
+django.setup()
+
+template = Template('{{ date|date:format }}')
+context = Context({
+    'date': datetime.now(),
+    'format': _('Y-m-d')
+})
+
+try:
+    output = template.render(context)
+    print('Output:', output)
+except Exception as e:
+    print('Error:', str(e))
+
+print('Script completed successfully, no errors.')
\ No newline at end of file
