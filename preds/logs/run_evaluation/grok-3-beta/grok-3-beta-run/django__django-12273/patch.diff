diff --git a/proposed_fix.py b/proposed_fix.py
new file mode 100644
index 0000000000..db3477258b
--- /dev/null
+++ b/proposed_fix.py
@@ -0,0 +1,26 @@
+
+from django.db import models
+
+class Item(models.Model):
+    uid = models.AutoField(primary_key=True, editable=False)
+    f = models.BooleanField(default=False)
+    
+    def reset(self):
+        self.uid = None
+        self.f = False
+        # Force the instance to be treated as new
+        self._state.adding = True
+
+    def save(self, *args, **kwargs):
+        if self.uid is None:
+            self._state.adding = True
+        super().save(*args, **kwargs)
+
+class Derived(Item):
+    pass
+
+# Note: This is a proposed fix for the issue where resetting the primary key
+# does not result in a new object being created on save(). By setting
+# self._state.adding = True when the primary key is None, we force Django to
+# treat the instance as new and insert a new record rather than updating the
+# existing one.
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..92e4cd7bb9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,49 @@
+
+import django
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['__main__']
+    )
+    django.setup()
+    # Run migrations to create tables
+    from django.core.management import call_command
+    call_command('makemigrations', interactive=False)
+    call_command('migrate', interactive=False)
+from django.db import models
+
+class Item(models.Model):
+    uid = models.AutoField(primary_key=True, editable=False)
+    f = models.BooleanField(default=False)
+    
+    def reset(self):
+        self.uid = None
+        self.f = False
+
+class Derived(Item):
+    pass
+
+# Simulating a test case
+class SaveTestCase:
+    def setUp(self):
+        self.derived = Derived.objects.create(f=True)  # create the first object
+        item = Item.objects.get(pk=self.derived.pk)
+        obj1 = item.derived
+        obj1.reset()
+        obj1.save()  # the first object should be overwritten
+    
+    def test_f_true(self):
+        obj = Item.objects.get(pk=self.derived.pk)
+        assert obj.f == True, 'Expected f to be True'
+        print('Test completed. If no assertion error, f is True as expected (bug replicated).')
+
+# Run the test
+test_case = SaveTestCase()
+test_case.setUp()
+test_case.test_f_true()
\ No newline at end of file
