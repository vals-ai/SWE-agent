diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..7ed8892c0
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,19 @@
+
+import pandas as pd
+from sklearn.compose import make_column_selector, make_column_transformer
+from sklearn.feature_selection import VarianceThreshold
+
+df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+out1 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    remainder=VarianceThreshold(),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print(out1)
+
+out2 = make_column_transformer(
+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+    (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),
+    verbose_feature_names_out=False,
+).set_output(transform="pandas").fit_transform(df)
+print(out2)
\ No newline at end of file
diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..192f44a2e 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -302,6 +302,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         )
         for trans in transformers:
             _safe_set_output(trans, transform=transform)
+        # Also apply to remainder if it's an estimator
+        if hasattr(self, 'remainder') and self.remainder not in {"passthrough", "drop"}:
+            _safe_set_output(self.remainder, transform=transform)
 
         return self
 
