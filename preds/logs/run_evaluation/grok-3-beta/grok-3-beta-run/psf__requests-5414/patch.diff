diff --git a/reproduce_url_error.py b/reproduce_url_error.py
new file mode 100644
index 00000000..b80507e3
--- /dev/null
+++ b/reproduce_url_error.py
@@ -0,0 +1,3 @@
+
+import requests
+requests.get("http://.example.com")
\ No newline at end of file
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..41d5fee5 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -27,7 +27,7 @@ from urllib3.exceptions import ProtocolError
 from urllib3.exceptions import ReadTimeoutError
 from urllib3.exceptions import SSLError as _SSLError
 from urllib3.exceptions import ResponseError
-from urllib3.exceptions import LocationValueError
+from urllib3.exceptions import LocationValueError, LocationParseError
 
 from .models import Response
 from .compat import urlparse, basestring
@@ -411,7 +411,7 @@ class HTTPAdapter(BaseAdapter):
 
         try:
             conn = self.get_connection(request.url, proxies)
-        except LocationValueError as e:
+        except (LocationValueError, LocationParseError) as e:
             raise InvalidURL(e, request=request)
 
         self.cert_verify(conn, request.url, verify, cert)
@@ -436,6 +436,7 @@ class HTTPAdapter(BaseAdapter):
             timeout = TimeoutSauce(connect=timeout, read=timeout)
 
         try:
+            # Catch LocationParseError during urlopen or later stages
             if not chunked:
                 resp = conn.urlopen(
                     method=request.method,
@@ -496,6 +497,8 @@ class HTTPAdapter(BaseAdapter):
                     # Then, reraise so that we can handle the actual exception.
                     low_conn.close()
                     raise
+        except LocationParseError as e:
+            raise InvalidURL(e, request=request)
 
         except (ProtocolError, socket.error) as err:
             raise ConnectionError(err, request=request)
