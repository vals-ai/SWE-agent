diff --git a/reproduce_blueprint_empty_name.py b/reproduce_blueprint_empty_name.py
new file mode 100644
index 00000000..6525113a
--- /dev/null
+++ b/reproduce_blueprint_empty_name.py
@@ -0,0 +1,7 @@
+
+from flask import Blueprint
+
+# Create a Blueprint with an empty name
+bp = Blueprint('', __name__)
+
+print("Blueprint created with empty name successfully, no errors.")
\ No newline at end of file
diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index eb50585d..747822cb 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -192,6 +192,8 @@ class Blueprint(Scaffold):
 
         if "." in name:
             raise ValueError("'name' may not contain a dot '.' character.")
+        if not name:
+            raise ValueError("'name' cannot be empty.")
 
         self.name = name
         self.url_prefix = url_prefix
diff --git a/test_blueprint_names.py b/test_blueprint_names.py
new file mode 100644
index 00000000..c675c00b
--- /dev/null
+++ b/test_blueprint_names.py
@@ -0,0 +1,25 @@
+
+from flask import Blueprint
+
+try:
+    # Test empty name (should raise ValueError)
+    bp_empty = Blueprint('', __name__)
+    print("Failed: Empty name did not raise an error.")
+except ValueError as e:
+    print("Success: Empty name raised ValueError -", str(e))
+
+try:
+    # Test valid name (should work)
+    bp_valid = Blueprint('valid_name', __name__)
+    print("Success: Valid name worked.")
+except ValueError as e:
+    print("Failed: Valid name raised ValueError -", str(e))
+
+try:
+    # Test name with dot (should raise ValueError)
+    bp_dot = Blueprint('invalid.name', __name__)
+    print("Failed: Name with dot did not raise an error.")
+except ValueError as e:
+    print("Success: Name with dot raised ValueError -", str(e))
+
+print("Tests completed.")
\ No newline at end of file
