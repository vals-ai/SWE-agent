diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..8155572ca6 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1156,8 +1156,14 @@ class SelectDateWidget(Widget):
             input_format = get_format("DATE_INPUT_FORMATS")[0]
             input_format = formats.sanitize_strftime_format(input_format)
             try:
-                date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+                # Check for overflow before creating date object
+                year_val = int(y)
+                if year_val > 9999 or year_val < 1:  # Reasonable bounds for year
+                    raise ValueError("Year out of range")
+                month_val = int(m)
+                day_val = int(d)
+                date_value = datetime.date(year_val, month_val, day_val)
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..9d3ef4bbc5
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,46 @@
+
+from django import forms
+from django.forms import SelectDateWidget
+
+import os
+import django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', '')
+
+from django.conf import settings
+settings.configure(
+    USE_I18N=False,
+    LOGGING_CONFIG=None
+)
+django.setup()
+from django.http import HttpResponse
+
+class ReproForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def repro_view(request):
+    form = ReproForm(request.GET)  # for ease of reproducibility
+    if form.is_valid():
+        return HttpResponse("ok")
+    else:
+        return HttpResponse("not ok")
+
+# urls.py
+
+
+# Simulate a request with a large year value
+class MockRequest:
+    def __init__(self, get_data):
+        self.GET = get_data
+
+if __name__ == "__main__":
+    large_year = str(1234567821345678)
+    request_data = {
+        'my_date_day': '1',
+        'my_date_month': '1',
+        'my_date_year': large_year
+    }
+    mock_request = MockRequest(request_data)
+    response = repro_view(mock_request)
+    print(response.content.decode())
+    print("Script completed successfully, no errors.")
+# urlpatterns = [path('repro/', views.repro_view, name='repro')]
\ No newline at end of file
