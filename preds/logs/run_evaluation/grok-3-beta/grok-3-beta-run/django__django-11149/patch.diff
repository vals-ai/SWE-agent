diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..6c9bdada5c 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1947,11 +1947,18 @@ class ModelAdmin(BaseModelAdmin):
             # Bypass validation of each view-only inline form (since the form's
             # data won't be in request.POST), unless the form was deleted.
             if not inline.has_change_permission(request, obj if change else None):
-                for index, form in enumerate(formset.initial_forms):
-                    if user_deleted_form(request, obj, formset, index):
-                        continue
-                    form._errors = {}
-                    form.cleaned_data = form.initial
+                # If no change permission, don't process POST data for changes
+                if request.method == 'POST':
+                    for index, form in enumerate(formset.initial_forms):
+                        if user_deleted_form(request, obj, formset, index):
+                            continue
+                        form._errors = {}
+                        form.cleaned_data = form.initial
+                # For non-POST requests, still set forms to initial to prevent validation errors
+                else:
+                    for index, form in enumerate(formset.initial_forms):
+                        form._errors = {}
+                        form.cleaned_data = form.initial
             formsets.append(formset)
             inline_instances.append(inline)
         return formsets, inline_instances
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..5bade14109
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,23 @@
+
+from django.db import models
+from django.contrib import admin
+
+# Models
+class Photo(models.Model):
+    pass
+
+class Report(models.Model):
+    photos = models.ManyToManyField(Photo)
+
+# Admin configuration
+class ReportPhotoInlineModelAdmin(admin.TabularInline):
+    model = Report.photos.through
+    show_change_link = True
+
+@admin.register(Report)
+class ReportAdmin(admin.ModelAdmin):
+    inlines = [ReportPhotoInlineModelAdmin]
+
+# Note: This script is for illustrative purposes to show the setup.
+# In a real Django environment, you would need to test permissions manually.
+print('Setup completed. In a real environment, test if a user with view-only permission can edit the ManyToManyField in admin.')
\ No newline at end of file
