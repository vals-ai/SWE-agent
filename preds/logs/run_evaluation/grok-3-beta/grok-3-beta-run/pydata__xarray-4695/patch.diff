diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..ce8d9f8f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,9 @@
+
+import numpy as np
+from xarray import DataArray
+empty = np.zeros((2,2))
+D1 = DataArray(empty, dims=['dim1', 'dim2'], coords={'dim1':['x', 'y'], 'dim2':['a', 'b']})
+D2 = DataArray(empty, dims=['dim1', 'method'], coords={'dim1':['x', 'y'], 'method':['a', 'b']})
+
+print(D1.loc[dict(dim1='x', dim2='a')])    # works
+print(D2.loc[dict(dim1='x', method='a')])  # does not work!!
\ No newline at end of file
diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index 843feb04..89b52fbc 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -240,13 +240,13 @@ def get_dim_indexers(data_obj, indexers):
     return dim_indexers
 
 
-def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):
+def remap_label_indexers(data_obj, indexers, fill_method=None, tolerance=None):
     """Given an xarray data object and label based indexers, return a mapping
     of equivalent location based indexers. Also return a mapping of updated
     pandas index objects (in case of multi-index level drop).
     """
-    if method is not None and not isinstance(method, str):
-        raise TypeError("``method`` must be a string")
+    if fill_method is not None and not isinstance(fill_method, str):
+        raise TypeError("``fill_method`` must be a string")
 
     pos_indexers = {}
     new_indexes = {}
@@ -257,9 +257,9 @@ def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):
             index = data_obj.indexes[dim]
         except KeyError:
             # no index for this dimension: reuse the provided labels
-            if method is not None or tolerance is not None:
+            if fill_method is not None or tolerance is not None:
                 raise ValueError(
-                    "cannot supply ``method`` or ``tolerance`` "
+                    "cannot supply ``fill_method`` or ``tolerance`` "
                     "when the indexed dimension does not have "
                     "an associated coordinate."
                 )
@@ -267,7 +267,7 @@ def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):
         else:
             coords_dtype = data_obj.coords[dim].dtype
             label = maybe_cast_to_coords_dtype(label, coords_dtype)
-            idxr, new_idx = convert_label_indexer(index, label, dim, method, tolerance)
+            idxr, new_idx = convert_label_indexer(index, label, dim, fill_method, tolerance)
             pos_indexers[dim] = idxr
             if new_idx is not None:
                 new_indexes[dim] = new_idx
