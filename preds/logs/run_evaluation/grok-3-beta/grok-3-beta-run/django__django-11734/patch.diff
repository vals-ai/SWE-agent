diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2b59dd301a..fe4ac51c2a 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1079,6 +1079,8 @@ class Exists(Subquery):
         # As a performance optimization, remove ordering since EXISTS doesn't
         # care about it, just whether or not a row matches.
         queryset = queryset.order_by()
+        # Ensure the queryset is treated as a subquery
+        queryset.query.subquery = True
         self.negated = negated
         super().__init__(queryset, **kwargs)
 
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..41e3f3f141
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,36 @@
+
+from django.db.models import Exists, OuterRef, Q
+from django.apps import apps
+
+# Assuming Number and Item are models in your app
+Number = apps.get_model('your_app_name', 'Number')
+Item = apps.get_model('your_app_name', 'Item')
+
+def test_exists_exclude():
+    # filter()
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(qs)  # works
+
+    # exclude()
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.exclude(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(qs)  # crashes
+
+    # filter(~Q())
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+        )
+    ).filter(foo=True)
+    print(qs)  # crashes
+
+if __name__ == '__main__':
+    test_exists_exclude()
+    print('Script completed successfully, no errors.')
\ No newline at end of file
