diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a44adfc760..347baf3d64 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -425,7 +425,7 @@ class SQLCompiler:
                 # If the columns list is limited, then all combined queries
                 # must have the same columns list. Set the selects defined on
                 # the query on all combined queries, if not already set.
-                if not compiler.query.values_select and self.query.values_select:
+                if self.query.values_select:
                     compiler.query.set_values((
                         *self.query.extra_select,
                         *self.query.values_select,
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e3f2dba59a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+
+import django
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+from django.contrib.auth.models import User
+from django.core import management
+
+# Run migrations to create necessary tables
+management.call_command('migrate', interactive=False)
+
+# Assuming ReservedName is not a standard model, we'll use User for demonstration
+# Create a test user
+User.objects.create(username='testuser', email='test@example.com')
+
+qs1 = User.objects.all()
+print(qs1.union(qs1).values_list('username', 'email').get())
+print(qs1.union(qs1).values_list('username').get())
+print('Script completed successfully, no errors.')
\ No newline at end of file
