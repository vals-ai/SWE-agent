diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..7a6f2ff1bf 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -727,7 +727,7 @@ class SQLCompiler:
         # If we get to this point and the field is a relation to another model,
         # append the default ordering for that model unless it is the pk
         # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk' and not name.split('__')[-1].endswith('_id'):
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..2db7a5bdcb
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,71 @@
+
+import django
+from django.db import models
+from django.conf import settings
+
+# Configure minimal Django settings for standalone script
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['__main__'],
+    )
+    django.setup()
+
+# Define models with various relationships
+class ParentModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+    id = models.BigAutoField(primary_key=True)
+    name = models.CharField(max_length=100, null=True)
+
+class ChildModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+    id = models.BigAutoField(primary_key=True)
+    parent = models.ForeignKey(ParentModel, on_delete=models.CASCADE, null=True)
+    child_val = models.BigIntegerField(null=True)
+
+class GrandChildModel(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    child = models.ForeignKey(ChildModel, on_delete=models.CASCADE)
+    grand_val = models.BigIntegerField(null=True)
+
+class SelfRefModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+    id = models.BigAutoField(primary_key=True)
+    self_ref = models.ForeignKey("SelfRefModel", on_delete=models.CASCADE, null=True, related_name='children')
+    value = models.BigIntegerField(null=True)
+
+# Test querysets for edge cases
+# 1. Multiple field ordering including foreign key _id
+qs1 = GrandChildModel.objects.filter(child__child_val__in=[1, 2, 3])
+qs1 = qs1.order_by("child__parent_id", "grand_val")
+print("Edge Case 1 SQL (multiple fields with _id):", qs1.query)
+
+# 2. Deep relation with _id
+qs2 = GrandChildModel.objects.filter(child__child_val__in=[1, 2, 3])
+qs2 = qs2.order_by("child__parent_id")
+print("Edge Case 2 SQL (deep relation with _id):", qs2.query)
+
+# 3. Self-referencing with multiple levels
+qs3 = SelfRefModel.objects.filter(value__in=[1, 2, 3])
+qs3 = qs3.order_by("self_ref_id")
+print("Edge Case 3 SQL (self-ref with _id):", qs3.query)
+
+# 4. Self-referencing without specific field
+qs4 = SelfRefModel.objects.filter(value__in=[1, 2, 3])
+qs4 = qs4.order_by("self_ref")
+print("Edge Case 4 SQL (self-ref without field):", qs4.query)
+
+# 5. Negative ordering with _id
+qs5 = GrandChildModel.objects.filter(child__child_val__in=[1, 2, 3])
+qs5 = qs5.order_by("-child__parent_id")
+print("Edge Case 5 SQL (negative ordering with _id):", qs5.query)
+
+print("Edge case tests completed successfully, no errors.")
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b722e28e01
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,54 @@
+
+import django
+from django.db import models
+from django.conf import settings
+
+# Configure minimal Django settings for standalone script
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['__main__'],
+    )
+    django.setup()
+
+# Define the models as per the issue
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey("OneModel", on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+# Test querysets to replicate the issue
+qs1 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])
+qs1 = qs1.order_by("record__root_id")
+print("Query 1 SQL:", qs1.query)
+
+qs2 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])
+qs2 = qs2.order_by("record__root")
+print("Query 2 SQL:", qs2.query)
+
+qs3 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])
+qs3 = qs3.order_by("record__root__id")
+print("Query 3 SQL:", qs3.query)
+
+qs4 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])
+qs4 = qs4.annotate(root_id=models.F("record__root_id"))
+qs4 = qs4.order_by("root_id")
+print("Query 4 SQL:", qs4.query)
+
+qs5 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])
+qs5 = qs5.order_by("-record__root_id")
+print("Query 5 SQL:", qs5.query)
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
