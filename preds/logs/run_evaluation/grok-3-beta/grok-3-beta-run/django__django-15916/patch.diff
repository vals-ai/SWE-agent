diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..1394b3f80b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -632,11 +632,21 @@ def modelform_factory(
     Meta = type("Meta", bases, attrs)
     if formfield_callback:
         Meta.formfield_callback = staticmethod(formfield_callback)
+    elif hasattr(form, 'Meta') and hasattr(form.Meta, 'formfield_callback'):
+        Meta.formfield_callback = staticmethod(form.Meta.formfield_callback)
+    elif hasattr(form, 'formfield_callback'):
+        Meta.formfield_callback = staticmethod(form.formfield_callback)
     # Give this new form class a reasonable name.
     class_name = model.__name__ + "Form"
 
     # Class attributes for the new form class.
-    form_class_attrs = {"Meta": Meta, "formfield_callback": formfield_callback}
+    form_class_attrs = {"Meta": Meta}
+    if formfield_callback:
+        form_class_attrs["formfield_callback"] = formfield_callback
+    elif hasattr(form, 'Meta') and hasattr(form.Meta, 'formfield_callback'):
+        form_class_attrs["formfield_callback"] = form.Meta.formfield_callback
+    elif hasattr(form, 'formfield_callback'):
+        form_class_attrs["formfield_callback"] = form.formfield_callback
 
     if getattr(Meta, "fields", None) is None and getattr(Meta, "exclude", None) is None:
         raise ImproperlyConfigured(
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..f35bec7720
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,57 @@
+
+from django import forms
+from django.db import models
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            '__main__.MyAppConfig',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    import django
+from django.apps import AppConfig
+
+class MyAppConfig(AppConfig):
+    name = '__main__'
+    label = 'myapp'
+
+django.setup()
+
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+class MyForm(forms.ModelForm):
+    formfield_callback = all_required
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)
+
+# Check if fields in FactoryForm are required
+factory_form = FactoryForm()
+for field_name, field in factory_form.fields.items():
+    print(f"Field {field_name} required: {field.required}")
+
+# Check if fields in MyForm are required
+my_form = MyForm()
+for field_name, field in my_form.fields.items():
+    print(f"Field {field_name} required: {field.required}")
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
