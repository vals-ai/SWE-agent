diff --git a/reproduce_polyval_bug.py b/reproduce_polyval_bug.py
new file mode 100644
index 00000000..610ef3b3
--- /dev/null
+++ b/reproduce_polyval_bug.py
@@ -0,0 +1,55 @@
+
+import xarray as xr
+import numpy as np
+
+values = np.array(
+    [
+        "2021-04-01T05:25:19.000000000",
+        "2021-04-01T05:25:29.000000000",
+        "2021-04-01T05:25:39.000000000",
+        "2021-04-01T05:25:49.000000000",
+        "2021-04-01T05:25:59.000000000",
+        "2021-04-01T05:26:09.000000000",
+    ],
+    dtype="datetime64[ns]",
+)
+azimuth_time = xr.DataArray(
+    values, name="azimuth_time", coords={"azimuth_time": values - values[0]}
+)
+
+polyfit_coefficients = xr.DataArray(
+    [
+        [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],
+        [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],
+        [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],
+        [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],
+        [4.44739216e06, 1.45053974e06, 5.29960857e06],
+    ],
+    dims=("degree", "axis"),
+    coords={"axis": [0, 1, 2], "degree": [4, 3, 2, 1, 0]},
+)
+# Print the coordinate values to debug conversion
+print("Coordinate values:", azimuth_time.coords['azimuth_time'].values)
+# Custom polyval function to handle timedelta64 correctly
+def custom_polyval(coord, poly):
+    # Convert coord to numeric in seconds if it's timedelta64
+    if coord.dtype.kind == 'm':
+        numeric_coord = coord.values.astype('float64') / 1e9  # Convert ns to s
+    else:
+        numeric_coord = coord.values
+    # Create a DataArray for coordinates with the correct dimension
+    coord_da = xr.DataArray(numeric_coord, dims=coord.name, coords={coord.name: coord.values})
+    # Perform polynomial evaluation
+    terms = []
+    for deg in poly['degree']:
+        term = poly.sel(degree=deg) * (coord_da ** deg)
+        terms.append(term)
+        print(f"Term for degree {deg}:\n", term)
+    result = sum(terms)
+    return result
+
+# Use custom polyval
+result = custom_polyval(azimuth_time.coords['azimuth_time'], polyfit_coefficients)
+print("Custom polyval result:", result)
+
+print(xr.polyval(azimuth_time, polyfit_coefficients))
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 823cbe02..d27066ce 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1933,7 +1933,7 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
     from .dataset import Dataset
 
     def to_floatable(x: DataArray) -> DataArray:
-        if x.dtype.kind in "mM":
+        if x.dtype.kind == "M":
             return x.copy(
                 data=datetime_to_numeric(
                     x.data,
@@ -1941,6 +1941,13 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
                     datetime_unit="ns",
                 ),
             )
+        elif x.dtype.kind == "m":
+            return x.copy(
+                data=datetime_to_numeric(
+                    x.data,
+                    datetime_unit="ns",
+                ) / 1e9,
+            )
         return x
 
     if isinstance(data, Dataset):
