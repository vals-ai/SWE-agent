diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py
index 3ddafd599..902350b43 100644
--- a/pylint/checkers/variables.py
+++ b/pylint/checkers/variables.py
@@ -1678,6 +1678,8 @@ class VariablesChecker(BaseChecker):
 
             if _has_locals_call_after_node(stmt, node.scope()):
                 message_name = "possibly-unused-variable"
+            elif self._is_used_in_type_comment(name, node):
+                return
             else:
                 if isinstance(stmt, astroid.Import):
                     if asname is not None:
@@ -2147,6 +2149,45 @@ class VariablesChecker(BaseChecker):
         return consumed
 
 
+
+    def _is_used_in_type_comment(self, name, node):
+        """Check if the name is used in type comments or annotations."""
+        from pylint.checkers.utils import is_node_in_type_annotation_context
+        scope = node.scope()
+        # Check AnnAssign nodes for type annotations
+        for n in scope.nodes_of_class(astroid.AnnAssign):
+            if n.annotation and name in n.annotation.as_string():
+                return True
+        # Check Assign nodes for type comments
+        for n in scope.nodes_of_class(astroid.Assign):
+            if hasattr(n, 'type_comment') and n.type_comment:
+                if isinstance(n.type_comment, str) and name in n.type_comment:
+                    return True
+                elif hasattr(n.type_comment, 'as_string') and name in n.type_comment.as_string():
+                    return True
+            # Check if any child node or the node itself is in a type annotation context and contains the name
+            if is_node_in_type_annotation_context(n) and name in n.as_string():
+                return True
+            for child in n.get_children():
+                if is_node_in_type_annotation_context(child) and name in child.as_string():
+                    return True
+            # As a broader check, look for the name in any string or comment in the scope
+            for child in n.get_children():
+                if isinstance(child, astroid.Const) and isinstance(child.value, str) and name in child.value:
+                    return True
+        # Check FunctionDef nodes for return type comments and argument type comments
+        for n in scope.nodes_of_class(astroid.FunctionDef):
+            if n.type_comment_returns and name in n.type_comment_returns.as_string():
+                return True
+            if n.type_comment_args:
+                for arg in n.type_comment_args:
+                    if name in arg.as_string():
+                        return True
+        # Check all nodes in scope for any string containing the name (broad check for comments)
+        for n in scope.get_children():
+            if isinstance(n, astroid.Const) and isinstance(n.value, str) and name in n.value:
+                return True
+        return False
 def register(linter):
     """required method to auto register this checker"""
     linter.register_checker(VariablesChecker(linter))
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..c7717c787
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,8 @@
+
+"""Docstring."""
+
+import abc
+from abc import ABC
+
+X = ...  # type: abc.ABC
+Y = ...  # type: ABC
\ No newline at end of file
