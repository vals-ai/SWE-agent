diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..f12c0bd10a 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):
             return
 
         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
         qs = qs.complex_filter(self.get_limit_choices_to())
@@ -984,7 +984,7 @@ class ForeignKey(ForeignObject):
                              (self.name, self.remote_field.model))
         return super().formfield(**{
             'form_class': forms.ModelChoiceField,
-            'queryset': self.remote_field.model._default_manager.using(using),
+            'queryset': self.remote_field.model._base_manager.using(using),
             'to_field_name': self.remote_field.field_name,
             **kwargs,
             'blank': self.blank,
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..58ff7f15bf
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,50 @@
+import os
+import django
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+django.setup()
+
+from django.db import models
+from django import forms
+
+from test_app.models import Article, FavoriteArticle
+
+# Form
+class FavoriteArticleForm(forms.ModelForm):
+    class Meta:
+        model = FavoriteArticle
+        fields = '__all__'
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.fields['article'].queryset = Article._base_manager.all()
+
+# Test the issue
+def test_validation():
+    # Create articles with different archived statuses
+    archived_article = Article.objects.create(title='Archived Article', archived=True)
+    active_article = Article.objects.create(title='Active Article', archived=False)
+    
+    # Test validation with archived article
+    form_data_archived = {'article': archived_article.id}
+    form_archived = FavoriteArticleForm(data=form_data_archived)
+    if form_archived.is_valid():
+        print('Form validation passed for archived article as expected.')
+    else:
+        print('Form validation failed for archived article unexpectedly. Error:', form_archived.errors)
+    
+    # Test validation with active article
+    form_data_active = {'article': active_article.id}
+    form_active = FavoriteArticleForm(data=form_data_active)
+    if form_active.is_valid():
+        print('Form validation passed for active article as expected.')
+    else:
+        print('Form validation failed for active article unexpectedly. Error:', form_active.errors)
+
+if __name__ == '__main__':
+    # Run migrations to create tables
+    from django.core.management import call_command
+    call_command('makemigrations', 'test_app')
+    call_command('migrate')
+    test_validation()
+    print('Script completed successfully, no errors.')
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..29a4bda77e
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,19 @@
+
+# Minimal Django settings for testing
+
+SECRET_KEY = 'test-secret-key'
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..736a651952
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,30 @@
+# Generated by Django 3.2 on 2025-04-27 20:50
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+                ('archived', models.BooleanField(default=False)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FavoriteArticle',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.article')),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..3d9bd40b19
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,23 @@
+
+from django.db import models
+
+# Custom manager to filter out archived articles
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(archived=False)
+
+# Models
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    archived = models.BooleanField(default=False)
+    objects = ArticleManager()
+    
+    class Meta:
+        app_label = 'test_app'
+
+class FavoriteArticle(models.Model):
+    article = models.ForeignKey(Article, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test_app'
\ No newline at end of file
