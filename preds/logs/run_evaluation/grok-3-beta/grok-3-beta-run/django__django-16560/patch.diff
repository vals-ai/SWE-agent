diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..942783cffa 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -22,7 +22,7 @@ class BaseConstraint:
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
     # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +34,7 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        self.violation_error_code = violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -42,7 +43,7 @@ class BaseConstraint:
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(args, ["name", "violation_error_message"]):
+            for arg, attr in zip(args, ["name", "violation_error_message", "violation_error_code"]):
                 if arg:
                     setattr(self, attr, arg)
 
@@ -74,6 +75,8 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if self.violation_error_code is not None:
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
     def clone(self):
@@ -112,7 +115,7 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
         except FieldError:
             pass
 
@@ -164,6 +167,7 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if not name:
             raise ValueError("A unique constraint must be named.")
@@ -213,7 +217,7 @@ class UniqueConstraint(BaseConstraint):
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     @property
     def contains_expressions(self):
@@ -308,6 +312,11 @@ class UniqueConstraint(BaseConstraint):
                 or self.violation_error_message == self.default_violation_error_message
                 else " violation_error_message=%r" % self.violation_error_message
             ),
+            (
+                ""
+                if self.violation_error_code is None
+                else " violation_error_code=%r" % self.violation_error_code
+            ),
         )
 
     def __eq__(self, other):
@@ -321,6 +330,7 @@ class UniqueConstraint(BaseConstraint):
                 and self.opclasses == other.opclasses
                 and self.expressions == other.expressions
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -385,7 +395,7 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
                 for model, constraints in instance.get_constraints():
@@ -400,6 +410,6 @@ class UniqueConstraint(BaseConstraint):
                 if (self.condition & Exists(queryset.filter(self.condition))).check(
                     against, using=using
                 ):
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
             except FieldError:
                 pass
diff --git a/test_constraint_error_code.py b/test_constraint_error_code.py
new file mode 100644
index 0000000000..f383c94d2a
--- /dev/null
+++ b/test_constraint_error_code.py
@@ -0,0 +1,38 @@
+
+from django.db import models
+from django.core.exceptions import ValidationError
+
+# Define a simple model with a unique constraint
+class UniqueItem(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(
+                fields=['name'],
+                name='unique_name',
+                violation_error_message='This name is already taken.',
+                violation_error_code='custom_unique_error'
+            )
+        ]
+
+def test_custom_error_code():
+    # Create an instance
+    item1 = UniqueItem(name='TestItem')
+    item1.save()
+    
+    # Try to create another instance with the same name
+    item2 = UniqueItem(name='TestItem')
+    try:
+        item2.full_clean()
+    except ValidationError as e:
+        # Check if the error code matches the custom code
+        if 'custom_unique_error' in e.error_dict:
+            print("Success: Custom error code 'custom_unique_error' was used.")
+        else:
+            print("Failure: Custom error code was not used.")
+    else:
+        print("Failure: No ValidationError was raised.")
+
+if __name__ == '__main__':
+    test_custom_error_code()
\ No newline at end of file
