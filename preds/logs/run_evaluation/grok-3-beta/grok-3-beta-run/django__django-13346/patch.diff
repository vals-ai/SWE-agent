diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..c462e6ce8f 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -493,6 +493,45 @@ KeyTransform.register_lookup(KeyTransformIRegex)
 KeyTransform.register_lookup(KeyTransformLt)
 KeyTransform.register_lookup(KeyTransformLte)
 KeyTransform.register_lookup(KeyTransformGt)
+
+
+class KeyTransformIn(lookups.In):
+    lookup_name = 'in'
+
+    def as_sql(self, compiler, connection):
+        lhs, lhs_params = self.process_lhs(compiler, connection)
+        rhs, rhs_params = self.process_rhs(compiler, connection)
+        params = lhs_params + rhs_params
+        if connection.vendor == 'mysql':
+            # MySQL doesn't directly support IN with JSON_EXTRACT, so we use a series of comparisons
+            conditions = ['JSON_EXTRACT(%s, %%s) = %s' % (lhs, rhs) for _ in rhs_params]
+            return '(%s)' % ' OR '.join(conditions), params * len(rhs_params)
+        elif connection.vendor == 'oracle':
+            # Oracle also doesn't support IN directly, so use multiple comparisons
+            conditions = ['JSON_VALUE(%s, %%s) = %s' % (lhs, rhs) for _ in rhs_params]
+            return '(%s)' % ' OR '.join(conditions), params * len(rhs_params)
+        elif connection.vendor == 'sqlite':
+            # SQLite can use IN with JSON_EXTRACT
+            return 'JSON_EXTRACT(%s, %%s) IN (%s)' % (lhs, ', '.join(['%s'] * len(rhs_params))), params
+        else:
+            return super().as_sql(compiler, connection)
+
+    def process_lhs(self, compiler, connection):
+        if isinstance(self.lhs, KeyTransform):
+            lhs, lhs_params, key_transforms = self.lhs.preprocess_lhs(compiler, connection)
+            json_path = compile_json_path(key_transforms)
+            if connection.vendor in ('mysql', 'oracle', 'sqlite'):
+                return 'JSON_EXTRACT(%s, %%s)' % lhs, lhs_params + (json_path,)
+        return super().process_lhs(compiler, connection)
+
+    def process_rhs(self, compiler, connection):
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+        if connection.vendor in ('mysql', 'oracle', 'sqlite'):
+            return rhs, rhs_params
+        return rhs, rhs_params
+
+# Register the new lookup for KeyTransform
+KeyTransform.register_lookup(KeyTransformIn)
 KeyTransform.register_lookup(KeyTransformGte)
 
 
diff --git a/reproduce_jsonfield_in_lookup.py b/reproduce_jsonfield_in_lookup.py
new file mode 100644
index 0000000000..0b2e6a4d17
--- /dev/null
+++ b/reproduce_jsonfield_in_lookup.py
@@ -0,0 +1,18 @@
+
+from django.contrib.postgres.fields import JSONField
+from django.db import models
+
+# Assuming a model with JSONField
+class OurModel(models.Model):
+    our_field = JSONField(default=dict)
+
+# Filters to test __in lookup on key transform
+first_filter = {'our_field__key__in': [0]}
+first_items = OurModel.objects.filter(**first_filter)
+print(f'Number of items with first filter (__in): {len(first_items)}')
+
+second_filter = {'our_field__key': 0}
+second_items = OurModel.objects.filter(**second_filter)
+print(f'Number of items with second filter (exact): {len(second_items)}')
+
+print('Script completed successfully, no errors.')
\ No newline at end of file
