diff --git a/django/forms/fields.py b/django/forms/fields.py
index 36dad72704..4e06c9b296 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -341,6 +341,8 @@ class DecimalField(IntegerField):
         """
         if value in self.empty_values:
             return None
+        if isinstance(value, dict):
+            raise ValidationError(self.error_messages['invalid'], code='invalid')
         if self.localize:
             value = formats.sanitize_separators(value)
         value = str(value).strip()
diff --git a/reproduce_decimalfield_error.py b/reproduce_decimalfield_error.py
new file mode 100644
index 0000000000..a54bf99e69
--- /dev/null
+++ b/reproduce_decimalfield_error.py
@@ -0,0 +1,22 @@
+
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+settings.configure(USE_I18N=False)
+
+from django.forms import DecimalField
+
+# Create a DecimalField instance
+decimal_field = DecimalField(max_digits=5, decimal_places=2)
+
+# Test with a dictionary value which should raise TypeError
+try:
+    decimal_field.to_python({'key': 'value'})
+    print('No error occurred, which is unexpected.')
+except TypeError as e:
+    print('TypeError occurred as expected:', str(e))
+except Exception as e:
+    print('Unexpected error occurred:', type(e).__name__, str(e))
+
+print('Script completed.')
\ No newline at end of file
diff --git a/test_decimalfield_edge_cases.py b/test_decimalfield_edge_cases.py
new file mode 100644
index 0000000000..4ca921fa63
--- /dev/null
+++ b/test_decimalfield_edge_cases.py
@@ -0,0 +1,30 @@
+
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+settings.configure(USE_I18N=False)
+
+from django.forms import DecimalField
+
+# Create a DecimalField instance
+decimal_field = DecimalField(max_digits=5, decimal_places=2)
+
+# Test various invalid input types
+invalid_inputs = [
+    {'key': 'value'},  # Dictionary
+    [1, 2, 3],        # List
+    (1, 2),            # Tuple
+    None,              # None value (should return None as per empty_values)
+    '',                # Empty string (should return None as per empty_values)
+    'abc',             # Non-numeric string
+]
+
+for input_value in invalid_inputs:
+    try:
+        result = decimal_field.to_python(input_value)
+        print(f'Input {input_value}: No error occurred, result = {result}')
+    except Exception as e:
+        print(f'Input {input_value}: {type(e).__name__} occurred: {str(e)}')
+
+print('Edge case testing completed.')
\ No newline at end of file
