diff --git a/reproduce_rolling_center.py b/reproduce_rolling_center.py
new file mode 100644
index 00000000..c49b1245
--- /dev/null
+++ b/reproduce_rolling_center.py
@@ -0,0 +1,16 @@
+
+import xarray as xr
+import numpy as np
+
+my_data = xr.DataArray(np.arange(1,10), dims="x")
+
+# Option 1: take a center-justified rolling average
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("Result 1 (automatic rolling mean with center=True):")
+print(result1)
+
+# Option 2: try to manually iterate, but the result is not centered
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = [window.mean().values.item() for label, window in my_data_rolling]
+print("Result 2 (manual iteration with center=True):")
+print(result2)
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..4a495dc8 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -271,9 +271,17 @@ class DataArrayRolling(Rolling["DataArray"]):
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
         stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
-        for (label, start, stop) in zip(self.window_labels, starts, stops):
+        if self.center[0]:
+            half_window = int(self.window[0]) // 2
+            starts = stops - half_window - int(self.window[0]) % 2
+            ends = stops + half_window
+            starts = np.maximum(starts, 0)
+            ends = np.minimum(ends, len(self.window_labels))
+        else:
+            starts = stops - int(self.window[0])
+            starts[: int(self.window[0])] = 0
+            ends = stops
+        for (label, start, stop) in zip(self.window_labels, starts, ends if self.center[0] else stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
 
             counts = window.count(dim=self.dim[0])
