diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index a249f4cdbf..5d13929945 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):
     def get_prep_value(self, value):
         if value is None:
             return value
-        return json.dumps(value, cls=self.encoder)
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def get_transform(self, name):
         transform = super().get_transform(name)
@@ -92,7 +92,7 @@ class JSONField(CheckFieldDefaultMixin, Field):
     def validate(self, value, model_instance):
         super().validate(value, model_instance)
         try:
-            json.dumps(value, cls=self.encoder)
+            json.dumps(value, cls=self.encoder, ensure_ascii=False)
         except TypeError:
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
@@ -119,7 +119,7 @@ def compile_json_path(key_transforms, include_root=True):
             num = int(key_transform)
         except ValueError:  # non-integer
             path.append('.')
-            path.append(json.dumps(key_transform))
+            path.append(json.dumps(key_transform, ensure_ascii=False))
         else:
             path.append('[%s]' % num)
     return ''.join(path)
@@ -380,7 +380,7 @@ class KeyTransformIn(lookups.In):
                     function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'
                     func.append("%s('%s', '$.value')" % (
                         function,
-                        json.dumps({'value': value}),
+                        json.dumps({'value': value}, ensure_ascii=False),
                     ))
                 func = tuple(func)
                 rhs_params = ()
@@ -413,7 +413,7 @@ class KeyTransformExact(JSONExact):
                 function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'
                 func.append("%s('%s', '$.value')" % (
                     function,
-                    json.dumps({'value': value}),
+                    json.dumps({'value': value}, ensure_ascii=False),
                 ))
             rhs = rhs % tuple(func)
             rhs_params = []
