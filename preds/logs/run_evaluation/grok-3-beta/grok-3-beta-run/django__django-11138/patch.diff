diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..4a4dc3fa95 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -70,7 +70,7 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def _convert_field_to_tz(self, field_name, tzname):
         if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+            field_name = "CONVERT_TZ(%s, @@session.time_zone, '%s')" % (field_name, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/reproduce_timezone_issue.py b/reproduce_timezone_issue.py
new file mode 100644
index 0000000000..e070196cdf
--- /dev/null
+++ b/reproduce_timezone_issue.py
@@ -0,0 +1,29 @@
+
+import os
+import django
+from datetime import datetime
+from django.utils import timezone
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')
+django.setup()
+
+# Assuming a model named MyModel with a datetime field named my_datetime_field
+try:
+    from your_app.models import MyModel
+except ImportError:
+    print("Model 'MyModel' not found. Please ensure the app and model are correctly set up.")
+    exit(1)
+
+# Create a timezone-aware datetime
+dt = timezone.make_aware(datetime(2017, 7, 6, 20, 50))
+print(f"Querying with datetime: {dt}")
+
+# Check if an object exists with the exact datetime
+exists_exact = MyModel.objects.filter(my_datetime_field=dt).exists()
+print(f"Exact datetime match exists: {exists_exact}")
+
+# Check if an object exists with the date part of the datetime
+exists_date = MyModel.objects.filter(my_datetime_field__date=dt.date()).exists()
+print(f"Date match exists: {exists_date}")
+
+print("Script completed successfully.")
\ No newline at end of file
