diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index fad5560486..91a037eeef 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1180,7 +1180,10 @@ class ForeignKey(ForeignObject):
         return self.target_field.rel_db_type(connection=connection)
 
     def db_parameters(self, connection):
-        return {"type": self.db_type(connection), "check": self.db_check(connection)}
+        params = {"type": self.db_type(connection), "check": self.db_check(connection)}
+        if hasattr(self.target_field, 'db_collation') and self.target_field.db_collation:
+            params['collation'] = self.target_field.db_collation
+        return params
 
     def convert_empty_strings(self, value, expression, connection):
         if (not value) and isinstance(value, str):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..190d45f91a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,19 @@
+
+from django.db import models
+from shortuuid.django_fields import ShortUUIDField
+
+class Account(models.Model):
+    id = ShortUUIDField(primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22)
+    # other fields...
+
+class Address(models.Model):
+    id = ShortUUIDField(primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22)
+    account = models.OneToOneField(Account, on_delete=models.CASCADE)
+    # other fields...
+
+class Profile(models.Model):
+    id = ShortUUIDField(primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22)
+    account = models.ForeignKey('Account', verbose_name='account', null=True, blank=True, on_delete=models.CASCADE)
+    # other fields...
+
+print('Models defined. This script is for structure reference only.')
\ No newline at end of file
