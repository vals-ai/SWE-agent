diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..078bee7d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,12 @@
+
+import xarray as xr
+import numpy as np
+
+arr = xr.DataArray(
+    np.arange(3),
+    coords=[("x", [0, 1, 2])],
+)
+data = xr.Dataset({"a": arr, "b": arr})
+stacked = data.to_stacked_array('y', sample_dims=['x'])
+unstacked = stacked.to_unstacked_dataset('y')
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..d1916209
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,39 @@
+
+import xarray as xr
+import numpy as np
+
+# Test 1: Single-dimension variable
+arr1 = xr.DataArray(
+    np.arange(3),
+    coords=[("x", [0, 1, 2])],
+)
+data1 = xr.Dataset({"a": arr1, "b": arr1})
+stacked1 = data1.to_stacked_array('y', sample_dims=['x'])
+unstacked1 = stacked1.to_unstacked_dataset('y')
+print("Test 1 passed: Single-dimension variable")
+
+# Test 2: Multi-dimension variable
+arr2 = xr.DataArray(
+    np.arange(6).reshape(2, 3),
+    coords=[("x", ["a", "b"]), ("y", [0, 1, 2])],
+)
+data2 = xr.Dataset({"a": arr2, "b": arr2})
+stacked2 = data2.to_stacked_array('z', sample_dims=['x', 'y'])
+unstacked2 = stacked2.to_unstacked_dataset('z')
+print("Test 2 passed: Multi-dimension variable")
+
+# Test 3: Mixed dimensions
+arr3a = xr.DataArray(
+    np.arange(3),
+    coords=[("x", [0, 1, 2])],
+)
+arr3b = xr.DataArray(
+    np.arange(6).reshape(2, 3),
+    coords=[("x", ["a", "b"]), ("y", [0, 1, 2])],
+)
+data3 = xr.Dataset({"a": arr3a, "b": arr3b})
+stacked3 = data3.to_stacked_array('w', sample_dims=['x'])
+unstacked3 = stacked3.to_unstacked_dataset('w')
+print("Test 3 passed: Mixed dimensions")
+
+print("All tests completed successfully, no errors.")
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..b7fe492d 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1961,7 +1961,11 @@ class DataArray(AbstractArray, DataWithCoords):
         # pull variables out of datarray
         data_dict = {}
         for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
+            selection = {variable_dim: k}
+            if variable_dim in self.dims:
+                data_dict[k] = self.sel(selection).squeeze(drop=True)
+            else:
+                data_dict[k] = self.squeeze(drop=True)
 
         # unstacked dataset
         return Dataset(data_dict)
