diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..dce08702e0 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -206,7 +206,7 @@ class RendererAgg(RendererBase):
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=mtext.get_antialiased() if mtext is not None else mpl.rcParams['text.antialiased'])
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..bb6983937d 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -205,7 +205,7 @@ class RendererCairo(RendererBase):
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if (mtext.get_antialiased() if mtext is not None else mpl.rcParams['text.antialiased'])
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..96fdf722e5 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -182,6 +182,7 @@ class Text(Artist):
         self.set_rotation(rotation)
         self._transform_rotates_text = transform_rotates_text
         self._bbox_patch = None  # a FancyBboxPatch instance
+        self._antialiased = None  # Default to global setting
         self._renderer = None
         if linespacing is None:
             linespacing = 1.2  # Maybe use rcParam later.
@@ -1210,6 +1211,29 @@ class Text(Artist):
         """
         self._transform_rotates_text = t
         self.stale = True
+    def set_antialiased(self, b):
+        """
+        Set whether to use antialiased rendering for the text.
+
+        Parameters
+        ----------
+        b : bool
+            Whether to enable antialiasing.
+        """
+        self._antialiased = bool(b)
+        self.stale = True
+
+    def get_antialiased(self):
+        """
+        Return whether antialiased rendering is used for the text.
+        If not set explicitly, the value of rcParams['text.antialiased'] is used.
+
+        Returns
+        -------
+        bool
+            Whether antialiasing is enabled.
+        """
+        return self._antialiased if self._antialiased is not None else mpl.rcParams['text.antialiased']
 
     def set_verticalalignment(self, align):
         """
diff --git a/test_text_antialiasing.py b/test_text_antialiasing.py
new file mode 100644
index 0000000000..96d7b6c1b1
--- /dev/null
+++ b/test_text_antialiasing.py
@@ -0,0 +1,21 @@
+
+import matplotlib.pyplot as plt
+
+# Create a figure and axis
+fig, ax = plt.subplots()
+
+# Add two text objects with different antialiasing settings
+text1 = ax.text(0.5, 0.6, 'Antialiased Text', fontsize=20)
+text1.set_antialiased(True)
+
+text2 = ax.text(0.5, 0.4, 'Non-Antialiased Text', fontsize=20)
+text2.set_antialiased(False)
+
+# Print the antialiasing settings to verify
+print(f'Text 1 antialiasing: {text1.get_antialiased()}')
+print(f'Text 2 antialiasing: {text2.get_antialiased()}')
+
+# Show the plot (commented out for non-interactive environments)
+# plt.show()
+
+print('Script completed successfully, no errors.')
\ No newline at end of file
