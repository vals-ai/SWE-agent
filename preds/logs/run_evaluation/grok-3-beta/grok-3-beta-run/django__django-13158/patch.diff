diff --git a/django/forms/models.py b/django/forms/models.py
index ab611afca7..7562fe37ac 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1323,7 +1323,8 @@ class ModelMultipleChoiceField(ModelChoiceField):
         if self.required and not value:
             raise ValidationError(self.error_messages['required'], code='required')
         elif not self.required and not value:
-            return self.queryset.none()
+            # Return an empty queryset for the model to handle combined querysets like union()
+            return self.queryset.model.objects.none()
         if not isinstance(value, (list, tuple)):
             raise ValidationError(
                 self.error_messages['invalid_list'],
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..11b24445ed
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,68 @@
+
+import django
+from django.db import models
+from django import forms
+from django.contrib import admin
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    label = 'test_app'
+from django.conf import settings
+
+# Configure minimal Django settings for standalone script
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+    # Note: We're not creating database tables since this is a simulation
+    print("Django setup complete. Skipping database table creation for simulation.")
+
+class Publication(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+class Article(models.Model):
+    publications = models.ManyToManyField(to=Publication, blank=True, null=True)
+    class Meta:
+        app_label = 'test_app'
+
+class ArticleForm(forms.ModelForm):
+    publications = forms.ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2).union(
+            Publication.objects.filter(id__gt=5)
+        ),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+class ArticleAdmin(admin.ModelAdmin):
+    form = ArticleForm
+
+from django.test import RequestFactory
+
+# Simulate form submission without database operations
+from django.test import RequestFactory
+factory = RequestFactory()
+request = factory.post('/admin/article/add/', data={'publications': []})
+form = ArticleForm(data=request.POST)
+if form.is_valid():
+    print("Form is valid. In a real environment, submitting an empty form with union() would add all matching objects.")
+else:
+    print("Form is not valid", form.errors)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..f12b5e17ea
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,79 @@
+
+import django
+from django.db import models
+from django import forms
+from django.conf import settings
+
+# Configure minimal Django settings for standalone script
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+    )
+    django.setup()
+    print("Django setup complete. Skipping database table creation for simulation.")
+
+class Publication(models.Model):
+    class Meta:
+        app_label = 'test_app'
+
+class Article(models.Model):
+    publications = models.ManyToManyField(to=Publication, blank=True, null=True)
+    class Meta:
+        app_label = 'test_app'
+
+# Form with union() queryset
+class ArticleFormUnion(forms.ModelForm):
+    publications = forms.ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2).union(
+            Publication.objects.filter(id__gt=5)
+        ),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+# Form with OR operator queryset
+class ArticleFormOR(forms.ModelForm):
+    publications = forms.ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+# Simulate form submission without database operations
+from django.test import RequestFactory
+factory = RequestFactory()
+
+# Test with union() queryset
+request_union = factory.post('/admin/article/add/', data={'publications': []})
+form_union = ArticleFormUnion(data=request_union.POST)
+if form_union.is_valid():
+    cleaned_data_union = form_union.cleaned_data['publications']
+    print(f"Union QuerySet Form - Cleaned Data: {cleaned_data_union}")
+else:
+    print("Union Form is not valid", form_union.errors)
+
+# Test with OR operator queryset
+request_or = factory.post('/admin/article/add/', data={'publications': []})
+form_or = ArticleFormOR(data=request_or.POST)
+if form_or.is_valid():
+    cleaned_data_or = form_or.cleaned_data['publications']
+    print(f"OR QuerySet Form - Cleaned Data: {cleaned_data_or}")
+else:
+    print("OR Form is not valid", form_or.errors)
\ No newline at end of file
