diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9735ce10c8..2969266639 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -550,6 +550,8 @@ class Query(BaseExpression):
         Perform a COUNT() query using the current filter constraints.
         """
         obj = self.clone()
+        # Strip unused annotations for count queries
+        obj.clear_unused_annotations()
         obj.add_annotation(Count("*"), alias="__count", is_summary=True)
         return obj.get_aggregation(using, ["__count"])["__count"]
 
@@ -1110,6 +1112,30 @@ class Query(BaseExpression):
             self.set_annotation_mask(set(self.annotation_select).difference({alias}))
         self.annotations[alias] = annotation
 
+    def clear_unused_annotations(self):
+        """
+        Remove annotations that are not referenced by filters, ordering, or other query components.
+        This is used to optimize count queries by stripping unused annotations.
+        """
+        if not self.annotations:
+            return
+        used_aliases = set()
+        # Check annotations used in filters
+        if self.where:
+            for child in self.where.children:
+                if hasattr(child, 'alias') and child.alias in self.annotations:
+                    used_aliases.add(child.alias)
+        # Check annotations used in ordering
+        for order in self.order_by:
+            if hasattr(order, 'alias') and order.alias in self.annotations:
+                used_aliases.add(order.alias)
+        # Keep only used annotations
+        self.annotations = {alias: expr for alias, expr in self.annotations.items() if alias in used_aliases or alias.startswith('__')}
+        # Update annotation mask accordingly
+        current_mask = set(self.annotation_select)
+        new_mask = current_mask.intersection(set(self.annotations.keys()))
+        self.set_annotation_mask(new_mask)
+
     def resolve_expression(self, query, *args, **kwargs):
         clone = self.clone()
         # Subqueries need to use a different set of aliases than the outer query.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0bc01b3e30
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,16 @@
+
+from django.db.models import Count
+try:
+    from books.models import Book
+    # Query with annotation and count
+    annotated_query = Book.objects.annotate(Count('chapters'))
+    annotated_count = annotated_query.count()
+    print('SQL for annotated count:', annotated_query.query)
+    print('Annotated Count:', annotated_count)
+    
+    # Simple count without annotation
+    simple_count = Book.objects.count()
+    print('SQL for simple count:', Book.objects.all().query)
+    print('Simple Count:', simple_count)
+except Exception as e:
+    print('Error:', str(e))
\ No newline at end of file
