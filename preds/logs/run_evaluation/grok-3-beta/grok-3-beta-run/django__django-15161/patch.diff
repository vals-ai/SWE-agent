diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..f2710e0364 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -651,6 +651,7 @@ class OuterRef(F):
         return self
 
 
+@deconstructible(path='django.db.models.Func')
 class Func(SQLiteNumericMixin, Expression):
     """An SQL function call."""
     function = None
@@ -731,6 +732,7 @@ class Func(SQLiteNumericMixin, Expression):
         return copy
 
 
+@deconstructible(path='django.db.models.Value')
 class Value(SQLiteNumericMixin, Expression):
     """Represent a wrapped value as a node within an expression."""
     # Provide a default value for `for_save` in order to allow unresolved
@@ -985,6 +987,7 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
         return "{}({})".format(self.__class__.__name__, self.expression)
 
 
+@deconstructible(path='django.db.models.When')
 class When(Expression):
     template = 'WHEN %(condition)s THEN %(result)s'
     # This isn't a complete conditional expression, must be used in Case().
@@ -1052,6 +1055,7 @@ class When(Expression):
         return cols
 
 
+@deconstructible(path='django.db.models.Case')
 class Case(SQLiteNumericMixin, Expression):
     """
     An SQL searched CASE expression:
@@ -1133,6 +1137,7 @@ class Case(SQLiteNumericMixin, Expression):
         return super().get_group_by_cols(alias)
 
 
+@deconstructible(path='django.db.models.Subquery')
 class Subquery(BaseExpression, Combinable):
     """
     An explicit subquery. It may contain OuterRef() references to the outer
@@ -1190,6 +1195,7 @@ class Subquery(BaseExpression, Combinable):
         return self.query.get_group_by_cols()
 
 
+@deconstructible(path='django.db.models.Exists')
 class Exists(Subquery):
     template = 'EXISTS(%(subquery)s)'
     output_field = fields.BooleanField()
@@ -1307,6 +1313,7 @@ class OrderBy(Expression):
         self.descending = True
 
 
+@deconstructible(path='django.db.models.Window')
 class Window(SQLiteNumericMixin, Expression):
     template = '%(expression)s OVER (%(window)s)'
     # Although the main expression may either be an aggregate or an
