diff --git a/reproduce_stratified_kfold.py b/reproduce_stratified_kfold.py
new file mode 100644
index 000000000..284222423
--- /dev/null
+++ b/reproduce_stratified_kfold.py
@@ -0,0 +1,33 @@
+
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+RANDOM_SEED = 1
+
+samples_per_class = 10
+X = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)
+y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)
+
+print(X, '\n', y, '\n')
+
+print('\nshuffle = False\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(train_idx, '\n', test_idx)
+
+print('\nshuffle = True, Random seed =', RANDOM_SEED, '\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(train_idx, '\n', test_idx)
+
+RANDOM_SEED += 1
+print('\nshuffle = True, Random seed =', RANDOM_SEED, '\n')
+  
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(train_idx, '\n', test_idx)
\ No newline at end of file
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..0ec8cb642 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -653,7 +653,7 @@ class StratifiedKFold(_BaseKFold):
         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
         per_cls_cvs = [
             KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
+                  random_state=check_random_state(rng.randint(0, 10000) if self.shuffle else rng)).split(np.zeros(max(count, self.n_splits)))
             for count in y_counts]
 
         test_folds = np.zeros(n_samples, dtype=np.int)
