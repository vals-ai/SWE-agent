diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..c90304958
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,16 @@
+
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]}
+)
+rs.fit(X, y)
+print(rs.cv_results_['mean_fit_time'])
+print('Refit time:', getattr(rs, 'refit_time_', 'Not available'))
+print(rs.cv_results_['mean_score_time'])
+print('Script completed successfully, no errors.')
\ No newline at end of file
diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py
index 99d6096af..0305b404c 100644
--- a/sklearn/model_selection/_search.py
+++ b/sklearn/model_selection/_search.py
@@ -766,10 +766,13 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,
         if self.refit:
             self.best_estimator_ = clone(base_estimator).set_params(
                 **self.best_params_)
+            import time
+            start_time = time.time()
             if y is not None:
                 self.best_estimator_.fit(X, y, **fit_params)
             else:
                 self.best_estimator_.fit(X, **fit_params)
+            self.refit_time_ = time.time() - start_time
 
         # Store the only scorer not as a dict for single metric evaluation
         self.scorer_ = scorers if self.multimetric_ else scorers['score']
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..107105a4f
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,26 @@
+
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+# Test with refit=False
+rs_no_refit = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3]},
+    refit=False
+)
+rs_no_refit.fit(X, y)
+print('Refit time when refit=False:', getattr(rs_no_refit, 'refit_time_', 'Not available'))
+
+# Test with n_jobs=2
+rs_parallel = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3]},
+    n_jobs=2
+)
+rs_parallel.fit(X, y)
+print('Refit time with n_jobs=2:', getattr(rs_parallel, 'refit_time_', 'Not available'))
+
+print('Edge case tests completed successfully, no errors.')
\ No newline at end of file
