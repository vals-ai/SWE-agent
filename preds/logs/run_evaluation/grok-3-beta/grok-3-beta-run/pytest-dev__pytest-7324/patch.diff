diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..aabe67e47
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,7 @@
+
+import ast
+
+# Reproduce the crash with the provided expression
+compile(ast.parse('False', mode='eval'), filename='<unknown>', mode='eval')
+
+print('Script completed successfully, no errors.')
\ No newline at end of file
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index cec0c5501..1da2852ac 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -935,11 +935,17 @@ class AssertionRewriter(ast.NodeVisitor):
     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:
         # Display the repr of the name if it's a local variable or
         # _should_repr_global_name() thinks it's acceptable.
+        # Also, rename reserved literals to avoid compiler crash on debug builds.
+        new_id = name.id
+        reserved_literals = {'False', 'True', 'None'}
+        if name.id in reserved_literals:
+            new_id = f"_pytest_renamed_{name.id}"
+            name = ast.Name(id=new_id, ctx=name.ctx)
         locs = ast.Call(self.builtin("locals"), [], [])
-        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])
+        inlocs = ast.Compare(ast.Str(new_id), [ast.In()], [locs])
         dorepr = self.helper("_should_repr_global_name", name)
         test = ast.BoolOp(ast.Or(), [inlocs, dorepr])
-        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))
+        expr = ast.IfExp(test, self.display(name), ast.Str(new_id))
         return name, self.explanation_param(expr)
 
     def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:
diff --git a/test_reserved_literals.py b/test_reserved_literals.py
new file mode 100644
index 000000000..642e21cc4
--- /dev/null
+++ b/test_reserved_literals.py
@@ -0,0 +1,9 @@
+
+def test_literals_in_assertions():
+    value_false = False
+    value_true = True
+    value_none = None
+    assert value_false is False, "False literal should be handled correctly"
+    assert value_true is True, "True literal should be handled correctly"
+    assert value_none is None, "None literal should be handled correctly"
+    print("Test completed successfully, no errors.")
\ No newline at end of file
