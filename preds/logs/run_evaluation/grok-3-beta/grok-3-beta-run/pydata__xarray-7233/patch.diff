diff --git a/reproduce_coarsen_issue.py b/reproduce_coarsen_issue.py
new file mode 100644
index 00000000..1a47a1eb
--- /dev/null
+++ b/reproduce_coarsen_issue.py
@@ -0,0 +1,14 @@
+
+import xarray as xr
+import numpy as np
+
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+ds = da.to_dataset(name="T")
+
+print("Original Dataset:")
+print(ds)
+
+coarsened_ds = ds.coarsen(time=12).construct(time=("year", "month"))
+print("\nCoarsened Dataset:")
+print(coarsened_ds)
\ No newline at end of file
diff --git a/test_coarsen_edge_cases.py b/test_coarsen_edge_cases.py
new file mode 100644
index 00000000..020685d2
--- /dev/null
+++ b/test_coarsen_edge_cases.py
@@ -0,0 +1,27 @@
+
+import xarray as xr
+import numpy as np
+
+# Test 1: Multiple coordinates
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da, hour=da * 24)
+ds = da.to_dataset(name="T")
+coarsened_ds = ds.coarsen(time=12).construct(time=("year", "month"))
+print("Test 1 - Multiple Coordinates:")
+print(coarsened_ds)
+
+# Test 2: Different coarsening window
+da2 = xr.DataArray(np.arange(30), dims=["time"])
+da2 = da2.assign_coords(day=365 * da2)
+ds2 = da2.to_dataset(name="T")
+coarsened_ds2 = ds2.coarsen(time=5).construct(time=("segment", "subtime"))
+print("\nTest 2 - Different Coarsening Window:")
+print(coarsened_ds2)
+
+# Test 3: Coordinate with no relation to coarsened dimension
+da3 = xr.DataArray(np.arange(24), dims=["time"])
+da3 = da3.assign_coords(constant_coord=xr.DataArray(42, dims=[]))
+ds3 = da3.to_dataset(name="T")
+coarsened_ds3 = ds3.coarsen(time=12).construct(time=("year", "month"))
+print("\nTest 3 - Constant Coordinate:")
+print(coarsened_ds3)
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index c194ec08..a67cd02c 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -960,6 +960,9 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             obj = self.obj
 
         reshaped.attrs = obj.attrs if keep_attrs else {}
+        # Preserve original coordinates that are not being coarsened
+        coords_to_preserve = {k: v for k, v in obj.coords.items() if k not in window_dim}
+        reshaped = reshaped.assign_coords(coords_to_preserve)
 
         for key, var in obj.variables.items():
             reshaped_dims = tuple(
@@ -973,7 +976,7 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             else:
                 reshaped[key] = var
 
-        should_be_coords = set(window_dim) & set(self.obj.coords)
+        should_be_coords = set(self.obj.coords)
         result = reshaped.set_coords(should_be_coords)
         if isinstance(self.obj, DataArray):
             return self.obj._from_temp_dataset(result)
