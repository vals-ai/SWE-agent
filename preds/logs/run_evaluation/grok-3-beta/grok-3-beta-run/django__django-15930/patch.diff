diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..3ff660f697 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1299,6 +1299,9 @@ class When(Expression):
         template_params = extra_context
         sql_params = []
         condition_sql, condition_params = compiler.compile(self.condition)
+        # Handle empty condition SQL which can occur with negated empty Q objects
+        if not condition_sql.strip():
+            condition_sql = '1=1'  # Tautology to represent always true condition
         template_params["condition"] = condition_sql
         sql_params.extend(condition_params)
         result_sql, result_params = compiler.compile(self.result)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e9cb9d1887
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,34 @@
+
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ]
+    )
+    django.setup()
+
+from django.db.models import Case, When, Value, BooleanField, Q
+from django.contrib.auth.models import User
+
+try:
+    result = User.objects.annotate(
+        _a=Case(
+            When(~Q(pk__in=[]), then=Value(True)),
+            default=Value(False),
+            output_field=BooleanField(),
+        )
+    ).order_by('-_a').values('pk')
+    print('Query executed successfully:', result)
+except Exception as e:
+    print('Error occurred:', str(e))
\ No newline at end of file
