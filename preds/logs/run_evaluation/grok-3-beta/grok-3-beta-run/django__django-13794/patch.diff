diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..76477f32ac 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -678,7 +678,8 @@ def add(value, arg):
         return int(value) + int(arg)
     except (ValueError, TypeError):
         try:
-            return value + arg
+            # Handle lazy strings or other objects by converting to str
+            return str(value) + str(arg)
         except Exception:
             return ''
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..2d05a2c6f1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,61 @@
+
+import django
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [],
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [],
+                },
+            },
+        ]
+    )
+    django.setup()
+# Simulate a lazy string with a proxy class
+class LazyString:
+    def __init__(self, value):
+        self.value = value
+    def __str__(self):
+        return self.value
+
+# Define a lazy string
+lazy_str = LazyString('Hello')
+normal_str = ' World'
+
+# Try to concatenate using the add filter in a template
+template = Template('{{ lazy_str|add:normal_str }}')
+context = Context({'lazy_str': lazy_str, 'normal_str': normal_str})
+try:
+    result = template.render(context)
+    print(f'Result: {result}')
+except Exception as e:
+    print(f'Error: {str(e)}')
+
+
+# Additional test cases for edge cases
+# Test with empty lazy string
+lazy_str_empty = LazyString('')
+normal_str_empty = ''
+template_empty = Template('{{ lazy_str_empty|add:normal_str_empty }}')
+context_empty = Context({'lazy_str_empty': lazy_str_empty, 'normal_str_empty': normal_str_empty})
+result_empty = template_empty.render(context_empty)
+print(f'Result with empty strings: {result_empty}')
+
+# Test with non-string input
+lazy_str_num = LazyString('123')
+normal_num = 456
+template_num = Template('{{ lazy_str_num|add:normal_num }}')
+context_num = Context({'lazy_str_num': lazy_str_num, 'normal_num': normal_num})
+try:
+    result_num = template_num.render(context_num)
+    print(f'Result with numbers: {result_num}')
+except Exception as e:
+    print(f'Error with numbers: {str(e)}')
+print('Script completed successfully, no errors.')
\ No newline at end of file
