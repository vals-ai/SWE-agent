diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..192b3f2b2f 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,8 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
-                for sub_value in value
-            )
+            resolved_values = [self.resolve_lookup_value(sub_value, can_reuse, allow_joins) for sub_value in value]
+            return type(value)(*resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_namedtuple_issue.py b/reproduce_namedtuple_issue.py
new file mode 100644
index 0000000000..051d8cd41a
--- /dev/null
+++ b/reproduce_namedtuple_issue.py
@@ -0,0 +1,19 @@
+
+from collections import namedtuple
+
+from django.db import models
+
+# Define a named tuple
+Range = namedtuple('Range', ['near', 'far'])
+
+# Dummy model for demonstration
+class MyModel(models.Model):
+    value = models.IntegerField()
+
+# Test code
+try:
+    range_val = Range(near=1, far=10)
+    queryset = MyModel.objects.filter(value__range=range_val)
+    print('Script completed successfully, no errors.')
+except TypeError as e:
+    print(f'Error: {e}')
\ No newline at end of file
