diff --git a/django/utils/http.py b/django/utils/http.py
index 572cfb4347..c1414299a2 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -176,10 +176,13 @@ def parse_http_date(date):
     try:
         year = int(m.group('year'))
         if year < 100:
-            if year < 70:
-                year += 2000
+            current_year = datetime.datetime.now().year
+            current_century = (current_year // 100) * 100
+            possible_year = current_century + year
+            if possible_year >= current_year + 50:
+                year = possible_year - 100
             else:
-                year += 1900
+                year = possible_year
         month = MONTHS.index(m.group('mon').lower()) + 1
         day = int(m.group('day'))
         hour = int(m.group('hour'))
diff --git a/test_http_date.py b/test_http_date.py
new file mode 100644
index 0000000000..75b13b6ddc
--- /dev/null
+++ b/test_http_date.py
@@ -0,0 +1,26 @@
+
+import datetime
+import calendar
+from django.utils.http import parse_http_date
+
+# Test RFC850 date format with two-digit years
+current_year = datetime.datetime.now().year
+last_two_digits = current_year % 100
+
+# Test a year just before the 50-year threshold
+year_below = (last_two_digits + 49) % 100
+test_date_below = f'Monday, 01-Jan-{year_below:02d} 12:00:00 GMT'
+parsed_below = parse_http_date(test_date_below)
+parsed_year_below = datetime.datetime.utcfromtimestamp(parsed_below).year
+expected_year_below = (current_year // 100) * 100 + year_below
+print(f'Test year {year_below:02d} (below threshold): Expected {expected_year_below}, Got {parsed_year_below}')
+
+# Test a year just at or beyond the 50-year threshold
+year_above = (last_two_digits + 50) % 100
+test_date_above = f'Monday, 01-Jan-{year_above:02d} 12:00:00 GMT'
+parsed_above = parse_http_date(test_date_above)
+parsed_year_above = datetime.datetime.utcfromtimestamp(parsed_above).year
+expected_year_above = ((current_year // 100) - 1) * 100 + year_above
+print(f'Test year {year_above:02d} (at/above threshold): Expected {expected_year_above}, Got {parsed_year_above}')
+
+print('Tests completed.')
\ No newline at end of file
