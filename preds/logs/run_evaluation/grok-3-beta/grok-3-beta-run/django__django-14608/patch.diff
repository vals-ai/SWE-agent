diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt
index 1f2c7c3fad..80f51ba31d 100644
--- a/docs/topics/forms/formsets.txt
+++ b/docs/topics/forms/formsets.txt
@@ -363,6 +363,10 @@ is where you define your own validation that works at the formset level::
 
 The formset ``clean`` method is called after all the ``Form.clean`` methods
 have been called. The errors will be found using the ``non_form_errors()``
+
+.. note::
+
+    Non-form errors accessed via ``non_form_errors()`` are rendered with the CSS class ``nonform`` in addition to the default ``errorlist`` class. This allows you to style or handle non-form errors in FormSets distinctly from other error types, similar to how ``nonfield`` is used for non-field errors in individual forms.
 method on the formset.
 
 Validating the number of forms in a formset
