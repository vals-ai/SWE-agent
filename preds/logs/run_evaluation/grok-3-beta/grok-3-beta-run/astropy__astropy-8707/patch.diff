diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..facb5a263b 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,11 +547,14 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes object. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
         """
+        # Convert bytes to string if necessary
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
 
         card = cls()
         card._image = _pad(image)
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..2cbe3d576b 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,13 +329,13 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a string or bytes object containing the entire header
         data.
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -347,6 +347,9 @@ class Header:
         header
             A new `Header` instance.
         """
+        # Convert bytes to string if necessary
+        if isinstance(data, bytes):
+            data = data.decode('ascii')
 
         cards = []
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..edfbb78915
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,17 @@
+
+from astropy.io.fits import Header
+
+# Test with Unicode string
+header_str = 'SIMPLE  =                    T / file does conform to FITS standard'
+header1 = Header.fromstring(header_str)
+print('Unicode string test passed')
+
+# Test with bytes
+header_bytes = b'SIMPLE  =                    T / file does conform to FITS standard'
+try:
+    header2 = Header.fromstring(header_bytes)
+    print('Bytes test passed')
+except Exception as e:
+    print('Bytes test failed:', str(e))
+
+print('Script completed successfully, no errors.')
\ No newline at end of file
