diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..f02e0a1d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,18 @@
+
+import xarray as xr
+
+da = xr.DataArray(1)
+da.attrs['foo'] = 'bar'
+cond = da==0
+x = da
+y = -1
+result = xr.where(cond, x, y)
+print('Condition attrs:', cond.attrs)
+print('X attrs:', x.attrs)
+print('Y:', y)
+print('Result attrs before any manual setting:', result.attrs)
+# Check if result is a DataArray and try setting attrs manually
+print('Is result a DataArray?', isinstance(result, xr.DataArray))
+if isinstance(result, xr.DataArray):
+    result.attrs = x.attrs
+    print('Result attrs after manual setting:', result.attrs)
\ No newline at end of file
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 9fe93c88..601c5484 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1809,7 +1809,8 @@ def where(cond, x, y):
         equivalent methods
     """
     # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    from .dataarray import DataArray
+    result = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
@@ -1817,7 +1818,14 @@ def where(cond, x, y):
         join="exact",
         dataset_join="exact",
         dask="allowed",
+        keep_attrs=True,
     )
+    # Explicitly preserve attributes from x if it is a DataArray, otherwise from cond
+    if isinstance(x, DataArray):
+        result.attrs = x.attrs
+    elif isinstance(cond, DataArray):
+        result.attrs = cond.attrs
+    return result
 
 
 def polyval(coord, coeffs, degree_dim="degree"):
