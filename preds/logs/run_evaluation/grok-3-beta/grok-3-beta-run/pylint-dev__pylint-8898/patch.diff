diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py
index fa7f7b92f..8cab9f5f9 100644
--- a/pylint/utils/utils.py
+++ b/pylint/utils/utils.py
@@ -212,6 +212,7 @@ def register_plugins(linter: PyLinter, directory: str) -> None:
 def _splitstrip(string: str, sep: str = ",") -> list[str]:
     """Return a list of stripped string by splitting the string given as
     argument on `sep` (',' by default), empty strings are discarded.
+    Commas can be escaped by preceding them with a backslash (\,) to prevent splitting.
 
     >>> _splitstrip('a, b, c   ,  4,,')
     ['a', 'b', 'c', '4']
@@ -219,6 +220,8 @@ def _splitstrip(string: str, sep: str = ",") -> list[str]:
     ['a']
     >>> _splitstrip('a,\nb,\nc,')
     ['a', 'b', 'c']
+    >>> _splitstrip('a\\,b, c')
+    ['a,b', 'c']
 
     :type string: str or unicode
     :param string: a csv line
@@ -226,10 +229,14 @@ def _splitstrip(string: str, sep: str = ",") -> list[str]:
     :type sep: str or unicode
     :param sep: field separator, default to the comma (',')
 
-    :rtype: str or unicode
-    :return: the unquoted string (or the input string if it wasn't quoted)
+    :rtype: list[str]
+    :return: list of stripped strings after splitting
     """
-    return [word.strip() for word in string.split(sep) if word.strip()]
+    # Replace escaped commas with a placeholder
+    placeholder = "__PYLINT_ESCAPED_COMMA__"
+    string = string.replace("\\,", placeholder)
+    # Split on separator and restore escaped commas
+    return [word.strip().replace(placeholder, ",") for word in string.split(sep) if word.strip()]
 
 
 def _unquote(string: str) -> str:
diff --git a/test_config.ini b/test_config.ini
new file mode 100644
index 000000000..6170bac7f
--- /dev/null
+++ b/test_config.ini
@@ -0,0 +1,4 @@
+
+[tool.pylint.basic]
+# Test regular expression with escaped comma
+bad-names-rgxs = "(foo{1\,3})"
\ No newline at end of file
diff --git a/test_file.py b/test_file.py
new file mode 100644
index 000000000..3749c3897
--- /dev/null
+++ b/test_file.py
@@ -0,0 +1,4 @@
+
+# Simple test file for pylint
+def foo123():
+    pass
\ No newline at end of file
