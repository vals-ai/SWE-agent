diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..db7df891e3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')
 
-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        if 'widget' not in kwargs:
+            autocomplete_fields = self.get_autocomplete_fields(request)
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
 
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/tests/admin_ordering/tests.py b/tests/admin_ordering/tests.py
index f68b64ae70..6a47c7eae9 100644
--- a/tests/admin_ordering/tests.py
+++ b/tests/admin_ordering/tests.py
@@ -2,6 +2,8 @@ from django.contrib import admin
 from django.contrib.admin.options import ModelAdmin
 from django.contrib.auth.models import User
 from django.db.models import F
+from django.contrib.admin import widgets
+
 from django.test import RequestFactory, TestCase
 
 from .models import (
@@ -186,4 +188,28 @@ class TestRelatedFieldsAdminOrdering(TestCase):
         site.register(Song, SongAdmin)
         site.register(Band, StaticOrderingBandAdmin)
 
+
+
+class TestManyToManyWidgetOverride(TestCase):
+    """
+    Test that widget overriding works for formfield_for_manytomany.
+    """
+    @classmethod
+    def setUpTestData(cls):
+        cls.band1 = Band.objects.create(name='Band 1', bio='', rank=1)
+        cls.band2 = Band.objects.create(name='Band 2', bio='', rank=2)
+        cls.song = Song.objects.create(name='Song 1', band=cls.band1)
+        cls.song.other_interpreters.add(cls.band2)
+
+    def test_widget_override(self):
+        class CustomSongAdmin(admin.ModelAdmin):
+            def formfield_for_manytomany(self, db_field, request, **kwargs):
+                if db_field.name == 'other_interpreters':
+                    kwargs['widget'] = widgets.CheckboxSelectMultiple
+                return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+        site.register(Song, CustomSongAdmin)
+        field = site._registry[Song].formfield_for_manytomany(Song.other_interpreters.field, request=None)
+        self.assertIsInstance(field.widget, widgets.CheckboxSelectMultiple)
+        site.unregister(Song)
         self.check_ordering_of_field_choices([self.b2])
