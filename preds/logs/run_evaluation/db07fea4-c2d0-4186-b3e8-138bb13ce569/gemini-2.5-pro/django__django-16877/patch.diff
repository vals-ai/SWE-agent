diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5289ef34a0..eae83ea322 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -495,7 +495,14 @@ def safeseq(value):
     individually, as safe, after converting them to strings. Return a list
     with the results.
     """
-    return [mark_safe(obj) for obj in value]
+
+
+@register.filter(is_safe=True)
+def escapeseq(value):
+    """
+    Apply HTML escaping to each element in a sequence. For use with autoescape off.
+    """
+    return [conditional_escape(obj) for obj in value]
 
 
 @register.filter(is_safe=True)
diff --git a/tests/template_tests/filter_tests/test_escapeseq.py b/tests/template_tests/filter_tests/test_escapeseq.py
new file mode 100644
index 0000000000..fb57d358c3
--- /dev/null
+++ b/tests/template_tests/filter_tests/test_escapeseq.py
@@ -0,0 +1,69 @@
+
+from django.template import Context, Template
+from django.test import SimpleTestCase
+from django.utils.safestring import mark_safe
+
+
+class EscapeseqTests(SimpleTestCase):
+    def test_escapeseq01(self):
+        """
+        Each element of the list is escaped. List elements are converted to
+        strings during the process. Test with autoescape off.
+        """
+        t = Template("{% autoescape off %}{{ a|escapeseq|join:\", \" }}{% endautoescape %}")
+        self.assertEqual(
+            t.render(Context({"a": ["<a>", "&", 1 > 0, 1, None]})),
+            "&lt;a&gt;, &amp;, True, 1, None",
+        )
+
+    def test_escapeseq02(self):
+        """
+        Applying escapeseq to a list which contains some safe elements.
+        Test with autoescape off. Safe elements should not be escaped.
+        """
+        t = Template("{% autoescape off %}{{ a|escapeseq|join:\", \" }}{% endautoescape %}")
+        self.assertEqual(
+            t.render(Context({"a": [mark_safe("<a>"), "&", 1 > 0, 1]})),
+            "<a>, &amp;, True, 1",
+        )
+
+    def test_escapeseq03(self):
+        """
+        Escapeseq works in autoescape mode (no difference expected as escapeseq
+        itself marks output as safe after escaping).
+        """
+        t = Template("{{ a|escapeseq|join:\", \" }}")
+        self.assertEqual(
+            t.render(Context({"a": ["<a>", "&", 1 > 0, 1, None]})),
+            "&lt;a&gt;, &amp;, True, 1, None",
+        )
+
+    def test_escapeseq04(self):
+        """
+        Escapeseq works with safe elements in autoescape mode (no double
+        escaping).
+        """
+        t = Template("{{ a|escapeseq|join:\", \" }}")
+        self.assertEqual(
+            t.render(Context({"a": [mark_safe("<a>"), "&", 1 > 0, 1]})),
+            "<a>, &amp;, True, 1",
+        )
+
+    def test_escapeseq_empty_list(self):
+        """
+        Test with an empty list.
+        """
+        t = Template("{% autoescape off %}{{ a|escapeseq|join:\", \" }}{% endautoescape %}")
+        self.assertEqual(t.render(Context({"a": []})), "")
+        t = Template("{{ a|escapeseq|join:\", \" }}")
+        self.assertEqual(t.render(Context({"a": []})), "")
+
+    def test_escapeseq_non_list_input(self):
+        """
+        Test with non-list iterable (tuple).
+        """
+        t = Template("{% autoescape off %}{{ a|escapeseq|join:\", \" }}{% endautoescape %}")
+        self.assertEqual(
+            t.render(Context({"a": ("<a>", "&")})),
+            "&lt;a&gt;, &amp;",
+         )
\ No newline at end of file
