diff --git a/django/db/models/base.py b/django/db/models/base.py
index 6c9e9d3707..05102c7373 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1747,7 +1747,7 @@ class Model(metaclass=ModelBase):
                     else:
                         _cls = None
                 except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
+                    if fld is None or (fld.get_transform(part) is None and part not in fld.get_lookups()):
                         errors.append(
                             checks.Error(
                                 "'ordering' refers to the nonexistent field, "
diff --git a/testproject/db.sqlite3 b/testproject/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..6253a24931
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproject/myapp/__init__.py b/testproject/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/myapp/admin.py b/testproject/myapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/testproject/myapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/testproject/myapp/apps.py b/testproject/myapp/apps.py
new file mode 100644
index 0000000000..74d6d13183
--- /dev/null
+++ b/testproject/myapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class MyappConfig(AppConfig):
+    name = 'myapp'
diff --git a/testproject/myapp/migrations/0001_initial.py b/testproject/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..5de57e2f09
--- /dev/null
+++ b/testproject/myapp/migrations/0001_initial.py
@@ -0,0 +1,40 @@
+# Generated by Django 3.1 on 2025-04-29 01:52
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Product',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.product')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Supply',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.product')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Stock',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('supply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.supply')),
+            ],
+            options={
+                'ordering': ['supply__product__parent__isnull'],
+            },
+        ),
+    ]
diff --git a/testproject/myapp/migrations/__init__.py b/testproject/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/myapp/models.py b/testproject/myapp/models.py
new file mode 100644
index 0000000000..dfd8fd65e0
--- /dev/null
+++ b/testproject/myapp/models.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    parent = models.ForeignKey('self', models.CASCADE, null=True, blank=True)
+
+class Supply(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+
+class Stock(models.Model):
+    supply = models.ForeignKey(Supply, on_delete=models.CASCADE)
+
+    class Meta:
+        ordering = ['supply__product__parent__isnull']
diff --git a/testproject/myapp/tests.py b/testproject/myapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/testproject/myapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/testproject/myapp/views.py b/testproject/myapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testproject/myapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..90debc9315
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..bf266921d3
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,121 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 3.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '=r^@6)@whxww(dl$yk9xnx=6r1#@=&)=2^k3=!iboql3-f0+_p'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'myapp',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..30a3850b5c
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,21 @@
+"""testproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..435e21ceb7
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_wsgi_application()
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 6bfdf2e736..e32adad3c9 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -1,4 +1,5 @@
 import unittest
+from django.core import checks
 
 from django.core.checks import Error, Warning
 from django.core.checks.model_checks import _check_lazy_references
diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py
index a9cc729c45..142a3cca4b 100644
--- a/tests/ordering/tests.py
+++ b/tests/ordering/tests.py
@@ -1,10 +1,13 @@
 from datetime import datetime
 from operator import attrgetter
 
+from django.core import checks
+from django.db import models
 from django.core.exceptions import FieldError
 from django.db.models import (
     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,
 )
+from django.test import SimpleTestCase, isolate_apps
 from django.db.models.functions import Upper
 from django.test import TestCase
 
@@ -480,3 +483,65 @@ class OrderingTests(TestCase):
         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))
         articles = ChildArticle.objects.order_by('article_ptr')
         self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])
+
+
+class OrderingLookupTests(SimpleTestCase):
+    def test_ordering_by_lookup_transform(self):
+        # Transform isn't strictly a lookup, but check it works.
+        class Parent(models.Model):
+            name = models.CharField(max_length=100)
+
+            class Meta:
+                ordering = ['name__upper']
+
+        self.assertEqual(Parent.check(), [])
+
+    def test_ordering_by_lookup(self):
+        class Parent(models.Model):
+            child = models.ForeignKey('Child', models.CASCADE, null=True)
+
+        class Child(models.Model):
+            grandchild = models.ForeignKey('GrandChild', models.CASCADE, null=True)
+
+        class GrandChild(models.Model):
+            name = models.CharField(max_length=100)
+
+            class Meta:
+                ordering = ['child__grandchild__isnull']
+
+        # E015 should not be raised.
+        self.assertEqual(GrandChild.check(), [])
+
+    def test_ordering_by_lookup_on_related_field(self):
+        class Parent(models.Model):
+            pass
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE, related_name='children')
+
+            class Meta:
+                ordering = ['parent__isnull']
+
+        self.assertEqual(Child.check(), [])
+
+    def test_ordering_by_invalid_lookup(self):
+        class Parent(models.Model):
+            child = models.ForeignKey('Child', models.CASCADE, null=True)
+
+        class Child(models.Model):
+            grandchild = models.ForeignKey('GrandChild', models.CASCADE, null=True)
+
+        class GrandChild(models.Model):
+            name = models.CharField(max_length=100)
+
+            class Meta:
+                ordering = ['child__grandchild__invalidlookup']
+
+        self.assertEqual(GrandChild.check(), [
+            checks.Error(
+                "'ordering' refers to the nonexistent field, related field, or "
+                "lookup 'child__grandchild__invalidlookup'.",
+                obj=GrandChild,
+                id='models.E015',
+            )
+        ])
\ No newline at end of file
