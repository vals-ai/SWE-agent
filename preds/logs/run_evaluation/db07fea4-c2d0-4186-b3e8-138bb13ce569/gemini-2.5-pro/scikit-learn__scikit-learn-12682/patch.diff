diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py
index a318c957f..6dfeecec9 100644
--- a/sklearn/decomposition/dict_learning.py
+++ b/sklearn/decomposition/dict_learning.py
@@ -900,7 +900,8 @@ class SparseCodingMixin(TransformerMixin):
             X, self.components_, algorithm=self.transform_algorithm,
             n_nonzero_coefs=self.transform_n_nonzero_coefs,
             alpha=self.transform_alpha, n_jobs=self.n_jobs,
-            positive=self.positive_code)
+            positive=self.positive_code,
+            max_iter=self.transform_max_iter if self.transform_algorithm == 'lasso_cd' else None)
 
         if self.split_sign:
             # feature vector is split into a positive and negative side
@@ -969,6 +970,9 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):
         ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
         for more details.
 
+    transform_max_iter : int, 1000 by default
+        Maximum number of iterations to perform if `transform_algorithm='lasso_cd'`.
+
     positive_code : bool
         Whether to enforce positivity when finding the code.
 
@@ -991,12 +995,14 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):
 
     def __init__(self, dictionary, transform_algorithm='omp',
                  transform_n_nonzero_coefs=None, transform_alpha=None,
-                 split_sign=False, n_jobs=None, positive_code=False):
+                 split_sign=False, n_jobs=None, positive_code=False,
+                 transform_max_iter=1000):
         self._set_sparse_coding_params(dictionary.shape[0],
                                        transform_algorithm,
                                        transform_n_nonzero_coefs,
                                        transform_alpha, split_sign, n_jobs,
                                        positive_code)
+        self.transform_max_iter = transform_max_iter
         self.components_ = dictionary
 
     def fit(self, X, y=None):
