diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..6bd389bb17 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,16 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            # Check if it's a named tuple (has _fields attribute)
+            is_namedtuple = isinstance(value, tuple) and hasattr(value, '_fields')
+            resolved_values = (
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
             )
+            if is_namedtuple:
+                return type(value)(*resolved_values)
+            else:
+                return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py
index 523fa607f0..0ece35a4a7 100644
--- a/tests/queries/test_query.py
+++ b/tests/queries/test_query.py
@@ -1,4 +1,5 @@
 from datetime import datetime
+from collections import namedtuple
 
 from django.core.exceptions import FieldError
 from django.db.models import BooleanField, CharField, F, Q
@@ -149,4 +150,6 @@ class TestQuery(SimpleTestCase):
         query = Query(Item)
         msg = 'Cannot filter against a non-conditional expression.'
         with self.assertRaisesMessage(TypeError, msg):
+            query.build_where(Func('name', output_field=CharField()))
+            query.build_where(Func('name', output_field=CharField()))
             query.build_where(Func(output_field=CharField()))
