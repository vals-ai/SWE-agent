diff --git a/app/__init__.py b/app/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/app/__init__.py
@@ -0,0 +1 @@
+
diff --git a/app/migrations/0001_initial.py b/app/migrations/0001_initial.py
new file mode 100644
index 0000000000..37f741c20e
--- /dev/null
+++ b/app/migrations/0001_initial.py
@@ -0,0 +1,36 @@
+# Generated by Django 3.1 on 2025-04-28 20:29
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='User',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Person',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('friends', models.ManyToManyField(related_name='_person_friends_+', to='app.Person')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Entry',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_entries', to='app.User')),
+                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updated_entries', to='app.User')),
+            ],
+        ),
+    ]
diff --git a/app/migrations/__init__.py b/app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/models.py b/app/models.py
new file mode 100644
index 0000000000..6cb1517993
--- /dev/null
+++ b/app/models.py
@@ -0,0 +1,12 @@
+
+from django.db import models
+
+class Person(models.Model):
+    friends = models.ManyToManyField('self')
+
+class User(models.Model):
+    pass
+
+class Entry(models.Model):
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_entries')
+    updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='updated_entries')
\ No newline at end of file
diff --git a/config/__init__.py b/config/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/config/asgi.py b/config/asgi.py
new file mode 100644
index 0000000000..96e6251f9f
--- /dev/null
+++ b/config/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for config project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
+
+application = get_asgi_application()
diff --git a/config/settings.py b/config/settings.py
new file mode 100644
index 0000000000..cc2a3508e4
--- /dev/null
+++ b/config/settings.py
@@ -0,0 +1,120 @@
+"""
+Django settings for config project.
+
+Generated by 'django-admin startproject' using Django 3.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '#y09b_=kh7yj5-twh(wepa&6gik4nf$)=g(3lyb&m=o0102u-g'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'config.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'config.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/config/urls.py b/config/urls.py
new file mode 100644
index 0000000000..3a8708517f
--- /dev/null
+++ b/config/urls.py
@@ -0,0 +1,21 @@
+"""config URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/config/wsgi.py b/config/wsgi.py
new file mode 100644
index 0000000000..b970bea53e
--- /dev/null
+++ b/config/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for config project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
+
+application = get_wsgi_application()
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..7f0f04b61d
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..87400bb6a6 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -3,6 +3,7 @@ from itertools import chain
 from operator import attrgetter
 
 from django.db import IntegrityError, connections, transaction
+from django.db.models.sql.where import WhereNode
 from django.db.models import signals, sql
 
 
@@ -69,6 +70,7 @@ class Collector:
         self.field_updates = {}  # {model: {(field, value): {instances}}}
         # fast_deletes is a list of queryset-likes that can be deleted without
         # fetching the objects into memory.
+        self.grouped_fast_deletes = {}  # {model: [where_node]}
         self.fast_deletes = []
 
         # Tracks deletion-order dependency for databases without transactions
@@ -225,7 +227,7 @@ class Collector:
                 for batch in batches:
                     sub_objs = self.related_objects(related, batch)
                     if self.can_fast_delete(sub_objs, from_field=field):
-                        self.fast_deletes.append(sub_objs)
+                        self.grouped_fast_deletes.setdefault(sub_objs.model, []).append(sub_objs.query.where)
                     else:
                         related_model = related.related_model
                         # Non-referenced fields can be deferred if no signal
@@ -309,6 +311,18 @@ class Collector:
                         sender=model, instance=obj, using=self.using
                     )
 
+            # Combine fast deletes for the same model
+            for model, where_nodes in self.grouped_fast_deletes.items():
+                if not where_nodes:
+                    continue
+                # Combine all WHERE clauses for this model using OR
+                combined_where = WhereNode(connector='OR')
+                for node in where_nodes:
+                    combined_where.add(node, 'OR')
+                # Create a new queryset with the combined WHERE clause
+                qs = model._base_manager.using(self.using).all()
+                qs.query.where = combined_where
+                self.fast_deletes.append(qs)
             # fast deletes
             for qs in self.fast_deletes:
                 count = qs._raw_delete(using=self.using)
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..58c5f10aca
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..847dcb63cf
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,35 @@
+
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+import django
+django.setup()
+
+from django.db import connection, transaction
+from app.models import Person, User, Entry
+
+# Create migrations
+os.system('python manage.py makemigrations app')
+os.system('python manage.py migrate')
+
+# Create some data
+user = User.objects.create()
+person = Person.objects.create()
+person.friends.add(person) # Add self-friendship to populate m2m table
+entry = Entry.objects.create(created_by=user, updated_by=user)
+
+# Enable query logging
+
+
+# Delete the user and person
+with transaction.atomic():
+    user.delete()
+with transaction.atomic():
+    person.delete()
+
+
+# Print the delete queries
+delete_queries = [q['sql'] for q in connection.queries if q['sql'].startswith('DELETE')]
+for query in delete_queries:
+    print(query)
+
+print("\nScript completed successfully, no errors.")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..3057dec01c
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,16 @@
+
+
+DEBUG = True
+SECRET_KEY = 'dummy'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.delete',
+    'app',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
\ No newline at end of file
diff --git a/tests/delete/models.py b/tests/delete/models.py
index e2ddce0588..013ca239e6 100644
--- a/tests/delete/models.py
+++ b/tests/delete/models.py
@@ -4,6 +4,9 @@ from django.db import models
 class R(models.Model):
     is_default = models.BooleanField(default=False)
 
+
+    class Meta:
+        app_label = 'delete'
     def __str__(self):
         return "%s" % self.pk
 
@@ -15,21 +18,32 @@ def get_default_r():
 class S(models.Model):
     r = models.ForeignKey(R, models.CASCADE)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class T(models.Model):
     s = models.ForeignKey(S, models.CASCADE)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class U(models.Model):
     t = models.ForeignKey(T, models.CASCADE)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class RChild(R):
-    pass
+    class Meta:
+        app_label = 'delete'
 
 
 class RChildChild(RChild):
-    pass
+    class Meta:
+        app_label = 'delete'
 
 
 class A(models.Model):
@@ -56,6 +70,9 @@ class A(models.Model):
     # well.
     o2o_setnull = models.ForeignKey(R, models.SET_NULL, null=True, related_name="o2o_nullable_set")
 
+    class Meta:
+        app_label = 'delete'
+
 
 def create_a(name):
     a = A(name=name)
@@ -75,75 +92,143 @@ class M(models.Model):
     m2m_through = models.ManyToManyField(R, through="MR", related_name="m_through_set")
     m2m_through_null = models.ManyToManyField(R, through="MRNull", related_name="m_through_null_set")
 
+    class Meta:
+        app_label = 'delete'
+
 
 class MR(models.Model):
     m = models.ForeignKey(M, models.CASCADE)
     r = models.ForeignKey(R, models.CASCADE)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class MRNull(models.Model):
     m = models.ForeignKey(M, models.CASCADE)
     r = models.ForeignKey(R, models.SET_NULL, null=True)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class Avatar(models.Model):
     desc = models.TextField(null=True)
 
+    class Meta:
+        app_label = 'delete'
+
 
 # This model is used to test a duplicate query regression (#25685)
 class AvatarProxy(Avatar):
     class Meta:
+        app_label = 'delete'
         proxy = True
 
 
 class User(models.Model):
     avatar = models.ForeignKey(Avatar, models.CASCADE, null=True)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class HiddenUser(models.Model):
     r = models.ForeignKey(R, models.CASCADE, related_name="+")
 
+    class Meta:
+        app_label = 'delete'
+
 
 class HiddenUserProfile(models.Model):
     user = models.ForeignKey(HiddenUser, models.CASCADE)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class M2MTo(models.Model):
     pass
 
+    class Meta:
+        app_label = 'delete'
+
 
 class M2MFrom(models.Model):
     m2m = models.ManyToManyField(M2MTo)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class Parent(models.Model):
     pass
 
+    class Meta:
+        app_label = 'delete'
+
 
 class Child(Parent):
-    pass
+    class Meta:
+        app_label = 'delete'
 
 
 class Base(models.Model):
     pass
 
+    class Meta:
+        app_label = 'delete'
+
 
 class RelToBase(models.Model):
     base = models.ForeignKey(Base, models.DO_NOTHING)
 
+    class Meta:
+        app_label = 'delete'
+
 
 class Origin(models.Model):
     pass
 
+    class Meta:
+        app_label = 'delete'
+
 
 class Referrer(models.Model):
     origin = models.ForeignKey(Origin, models.CASCADE)
     unique_field = models.IntegerField(unique=True)
     large_field = models.TextField()
 
+    class Meta:
+        app_label = 'delete'
+
 
 class SecondReferrer(models.Model):
     referrer = models.ForeignKey(Referrer, models.CASCADE)
     other_referrer = models.ForeignKey(
         Referrer, models.CASCADE, to_field='unique_field', related_name='+'
     )
+
+    class Meta:
+        app_label = 'delete'
+
+
+# Models for testing combined fast deletes (#34057)
+class DeleteTestPerson(models.Model):
+    friends = models.ManyToManyField('self', symmetrical=False)
+
+    class Meta:
+        app_label = 'delete'
+
+class DeleteTestUser(models.Model):
+    pass
+
+    class Meta:
+        app_label = 'delete'
+
+class DeleteTestEntry(models.Model):
+    created_by = models.ForeignKey(DeleteTestUser, on_delete=models.CASCADE, related_name='created_entries')
+    updated_by = models.ForeignKey(DeleteTestUser, on_delete=models.CASCADE, related_name='updated_entries')
+
+    class Meta:
+        app_label = 'delete'
\ No newline at end of file
diff --git a/tests/delete/tests.py b/tests/delete/tests.py
index 505fd843d7..4a165c7b0d 100644
--- a/tests/delete/tests.py
+++ b/tests/delete/tests.py
@@ -8,6 +8,7 @@ from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature
 from .models import (
     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,
     M2MTo, MRNull, Origin, Parent, R, RChild, RChildChild, Referrer, S, T,
+    DeleteTestEntry, DeleteTestPerson, DeleteTestUser,
     User, create_a, get_default_r,
 )
 
@@ -337,7 +338,7 @@ class DeletionTests(TestCase):
         batches = ceil(len(objs) / batch_size)
         # One query for Avatar.objects.all() and then one related fast delete for
         # each batch.
-        fetches_to_mem = 1 + batches
+        fetches_to_mem = 2
         # The Avatar objects are going to be deleted in batches of GET_ITERATOR_CHUNK_SIZE
         queries = fetches_to_mem + TEST_SIZE // GET_ITERATOR_CHUNK_SIZE
         self.assertNumQueries(queries, Avatar.objects.all().delete)
@@ -355,8 +356,8 @@ class DeletionTests(TestCase):
         # + 1 (select related `U` instances)
         # + TEST_SIZE / GET_ITERATOR_CHUNK_SIZE (delete `T` instances in batches)
         # + 1 (delete `s`)
-        expected_num_queries = ceil(TEST_SIZE / batch_size)
-        expected_num_queries += ceil(TEST_SIZE / GET_ITERATOR_CHUNK_SIZE) + 2
+        # 1 (find T pks) + 1 (find related U) + T_delete_batches + 1 (delete S)
+        expected_num_queries = ceil(TEST_SIZE / GET_ITERATOR_CHUNK_SIZE) + 3
 
         self.assertNumQueries(expected_num_queries, s.delete)
         self.assertFalse(S.objects.exists())
@@ -571,6 +572,28 @@ class FastDeleteTests(TestCase):
         self.assertNumQueries(2, a.delete)
         self.assertEqual(User.objects.count(), 0)
 
+    def test_fast_delete_combined_queries(self):
+        """Fast delete combines queries for the same table. (#34057)"""
+        user = DeleteTestUser.objects.create()
+        person = DeleteTestPerson.objects.create()
+        # Add self-friendship and entries to ensure related tables are populated
+        person.friends.add(person)
+        DeleteTestEntry.objects.create(created_by=user, updated_by=user)
+
+        # Check FK query combination
+        # Expected: 1 for Entry (combined), 1 for User
+        with self.assertNumQueries(2):
+            user.delete()
+        self.assertFalse(DeleteTestUser.objects.exists())
+        self.assertFalse(DeleteTestEntry.objects.exists())
+
+        # Check M2M query combination
+        # Expected: 1 for Person_friends (combined), 1 for Person
+        with self.assertNumQueries(2):
+            person.delete()
+        self.assertFalse(DeleteTestPerson.objects.exists())
+        self.assertFalse(DeleteTestPerson.friends.through.objects.exists())
+
     def test_fast_delete_empty_no_update_can_self_select(self):
         """
         #25932 - Fast deleting on backends that don't have the
