+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   pylint/checkers/base/name_checker/checker.py
	modified:   pylint/config/argument.py
	modified:   pyproject.toml

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	foo.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 1f8c4d9eb185c16a2c1d881c054f015e1c2eb334
Author: Jacob Walls <jacobtylerwalls@gmail.com>
Date:   Sun Jul 2 18:10:48 2023 -0400

    Add test result that was hidden
    
    This test result change is reproducible
    on main by changing `as b` to `as boo`
    so that it met the prior invalid-name
    criterion. I don't know what the source
    of the interaction is between these two
    messages.

diff --git a/tests/functional/r/regression/regression_4723.py b/tests/functional/r/regression/regression_4723.py
index 012825db0..51c1f7d5d 100644
--- a/tests/functional/r/regression/regression_4723.py
+++ b/tests/functional/r/regression/regression_4723.py
@@ -18,4 +18,4 @@ class B(A):
 
 def func():
     with B().get() as b:
-        b.play()
+        b.play()  # [too-many-function-args]
diff --git a/tests/functional/r/regression/regression_4723.txt b/tests/functional/r/regression/regression_4723.txt
index f64667e72..4f1914089 100644
--- a/tests/functional/r/regression/regression_4723.txt
+++ b/tests/functional/r/regression/regression_4723.txt
@@ -1 +1,2 @@
 no-method-argument:15:4:15:12:B.play:Method 'play' has no argument:UNDEFINED
+too-many-function-args:21:8:21:16:func:Too many positional arguments for method call:UNDEFINED
+ git -c core.fileMode=false diff 1f8c4d9eb185c16a2c1d881c054f015e1c2eb334
diff --git a/pylint/checkers/base/name_checker/checker.py b/pylint/checkers/base/name_checker/checker.py
index 42a7c6b2e..986fea82f 100644
--- a/pylint/checkers/base/name_checker/checker.py
+++ b/pylint/checkers/base/name_checker/checker.py
@@ -228,11 +228,12 @@ class NameChecker(_BasicChecker):
         (
             "bad-names-rgxs",
             {
-                "default": "",
-                "type": "regexp_csv",
-                "metavar": "<names>",
-                "help": "Bad variable names regexes, separated by a comma. If names match any regex,"
-                " they will always be refused",
+                "default": (),  # Changed default to empty tuple
+                "type": "regexp_list",  # Changed type
+                "metavar": "<regexes>", # Changed metavar for clarity
+                "nargs": "*",  # Added nargs
+                "help": "Regular expressions matching bad variable names. If a name matches any regex,"
+                " it will always be refused. Provide as a list of strings.", # Updated help
             },
         ),
         (
diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..9d12fbaed 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -130,6 +130,16 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
                 + pathlib.PureWindowsPath(pattern).as_posix()
             )
         )
+
+
+def _regexp_list_transformer(value: list[str]) -> list[re.Pattern[str]]:
+    """Transforms a list of strings to a list of regex patterns."""
+    patterns = []
+    for pattern in value:
+        try:
+            patterns.append(re.compile(pattern))
+        except re.error as e:
+            raise ValueError(f"Invalid regular expression: {pattern!r}") from e
     return patterns
 
 
@@ -148,6 +158,7 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {
     "regexp_paths_csv": _regexp_paths_csv_transfomer,
     "string": pylint_utils._unquote,
     "yn": _yn_transformer,
+    "regexp_list": _regexp_list_transformer,
 }
 """Type transformers for all argument types.
 
diff --git a/pyproject.toml b/pyproject.toml
index 959533962..fcc603e96 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -166,3 +166,8 @@ fixable = [
     "I",  # isort
     "RUF", # ruff
 ]
+
+[tool.pylint.basic]
+# capture group ensures that the part after the comma is an invalid regular
+# expression, causing pylint to crash
+bad-name-rgxs = "(foo{1,3})"
\ No newline at end of file
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Error processing line 1 of /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/distutils-precedence.pth:

  Traceback (most recent call last):
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site.py", line 177, in addpackage
      exec(line)
    File "<string>", line 1, in <module>
  ModuleNotFoundError: No module named '_distutils_hack'

Remainder of file ignored
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: platformdirs>=2.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (4.3.6)
Requirement already satisfied: astroid<=3.1.0-dev0,>=3.0.0a8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (3.0.3)
Requirement already satisfied: isort<6,>=4.2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (5.13.2)
Requirement already satisfied: mccabe<0.8,>=0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (0.7.0)
Requirement already satisfied: tomlkit>=0.10.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (0.11.8)
Requirement already satisfied: typing-extensions>=3.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (4.12.2)
Requirement already satisfied: dill>=0.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (0.3.9)
Requirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==3.0.0b1) (2.0.2)
Building wheels for collected packages: pylint
  Building editable for pylint (pyproject.toml): started
  Building editable for pylint (pyproject.toml): finished with status 'done'
  Created wheel for pylint: filename=pylint-3.0.0b1-0.editable-py3-none-any.whl size=25475 sha256=89346af7628fd77d8f8e76885b05d660066a778509c682fdaf7ed1f05baa65ea
  Stored in directory: /tmp/pip-ephem-wheel-cache-mybjyz9j/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built pylint
Installing collected packages: pylint
  Attempting uninstall: pylint
    Found existing installation: pylint 3.0.0b1
    Uninstalling pylint-3.0.0b1:
      Successfully uninstalled pylint-3.0.0b1
Successfully installed pylint-3.0.0b1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 1f8c4d9eb185c16a2c1d881c054f015e1c2eb334 tests/config/test_config.py
Updated 0 paths from ddc0b886d
+ git apply -v -
Checking patch tests/config/test_config.py...
Applied patch tests/config/test_config.py cleanly.
+ : '>>>>> Start Test Output'
+ pytest -rA tests/config/test_config.py
Error processing line 1 of /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/distutils-precedence.pth:

  Traceback (most recent call last):
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site.py", line 177, in addpackage
      exec(line)
    File "<string>", line 1, in <module>
  ModuleNotFoundError: No module named '_distutils_hack'

Remainder of file ignored
============================= test session starts ==============================
platform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.5.0
benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /testbed
configfile: pyproject.toml
plugins: benchmark-4.0.0, cov-4.1.0, profiling-1.7.0, timeout-2.3.1, xdist-3.6.1
collected 20 items

tests/config/test_config.py ........FFFF.F..F...                         [100%]

=================================== FAILURES ===================================
______________ test_csv_regex_comma_in_quantifier[foo-expected0] _______________

in_string = 'foo', expected = ['foo']

    @pytest.mark.parametrize("in_string,expected", CSV_REGEX_COMMA_CASES)
    def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:
        """Check that we correctly parse a comma-separated regex when there are one
        or more commas within quantifier expressions.
        """
    
        def _template_run(in_string: str) -> list[re.Pattern[Any]]:
            r = Run(
                [str(EMPTY_MODULE), rf"--bad-names-rgx={in_string}"],
                exit=False,
            )
            bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs
            return bad_names_rgxs
    
>       assert _template_run(in_string) == [re.compile(regex) for regex in expected]
E       AssertionError: assert [re.compile('....compile('o')] == [re.compile('foo')]
E         At index 0 diff: re.compile('f') != re.compile('foo')
E         Left contains 2 more items, first extra item: re.compile('o')
E         Use -v to get more diff

tests/config/test_config.py:142: AssertionError
____________ test_csv_regex_comma_in_quantifier[foo,bar-expected1] _____________

in_string = 'foo,bar', expected = ['foo', 'bar']

    @pytest.mark.parametrize("in_string,expected", CSV_REGEX_COMMA_CASES)
    def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:
        """Check that we correctly parse a comma-separated regex when there are one
        or more commas within quantifier expressions.
        """
    
        def _template_run(in_string: str) -> list[re.Pattern[Any]]:
            r = Run(
                [str(EMPTY_MODULE), rf"--bad-names-rgx={in_string}"],
                exit=False,
            )
            bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs
            return bad_names_rgxs
    
>       assert _template_run(in_string) == [re.compile(regex) for regex in expected]
E       AssertionError: assert [re.compile('...ile('a'), ...] == [re.compile('...ompile('bar')]
E         At index 0 diff: re.compile('f') != re.compile('foo')
E         Left contains 5 more items, first extra item: re.compile('o')
E         Use -v to get more diff

tests/config/test_config.py:142: AssertionError
____________ test_csv_regex_comma_in_quantifier[foo, bar-expected2] ____________

in_string = 'foo, bar', expected = ['foo', 'bar']

    @pytest.mark.parametrize("in_string,expected", CSV_REGEX_COMMA_CASES)
    def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:
        """Check that we correctly parse a comma-separated regex when there are one
        or more commas within quantifier expressions.
        """
    
        def _template_run(in_string: str) -> list[re.Pattern[Any]]:
            r = Run(
                [str(EMPTY_MODULE), rf"--bad-names-rgx={in_string}"],
                exit=False,
            )
            bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs
            return bad_names_rgxs
    
>       assert _template_run(in_string) == [re.compile(regex) for regex in expected]
E       AssertionError: assert [re.compile('...ile('b'), ...] == [re.compile('...ompile('bar')]
E         At index 0 diff: re.compile('f') != re.compile('foo')
E         Left contains 6 more items, first extra item: re.compile('o')
E         Use -v to get more diff

tests/config/test_config.py:142: AssertionError
_________ test_csv_regex_comma_in_quantifier[foo, bar{1,3}-expected3] __________

in_string = 'foo, bar{1,3}', expected = ['foo', 'bar{1,3}']

    @pytest.mark.parametrize("in_string,expected", CSV_REGEX_COMMA_CASES)
    def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:
        """Check that we correctly parse a comma-separated regex when there are one
        or more commas within quantifier expressions.
        """
    
        def _template_run(in_string: str) -> list[re.Pattern[Any]]:
            r = Run(
                [str(EMPTY_MODULE), rf"--bad-names-rgx={in_string}"],
                exit=False,
            )
            bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs
            return bad_names_rgxs
    
>       assert _template_run(in_string) == [re.compile(regex) for regex in expected]
E       AssertionError: assert [re.compile('...ile('b'), ...] == [re.compile('...e('bar{1,3}')]
E         At index 0 diff: re.compile('f') != re.compile('foo')
E         Left contains 11 more items, first extra item: re.compile('o')
E         Use -v to get more diff

tests/config/test_config.py:142: AssertionError
_____________________________ test_csv_regex_error _____________________________

capsys = <_pytest.capture.CaptureFixture object at 0x7f7fdb6c6a30>

    def test_csv_regex_error(capsys: CaptureFixture) -> None:
        """Check that we correctly error when an option is passed and one
        of its comma-separated regular expressions values is an invalid regular expression.
        """
        with pytest.raises(SystemExit):
            Run(
                [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,}, foo{1,3}})"],
                exit=False,
            )
        output = capsys.readouterr()
>       assert (
            r"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern"
            in output.err
        )
E       assert 'Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern' in "usage: pylint [options]\npylint: error: argument --bad-names-rgxs: invalid _regexp_list_transformer value: '(foo{1,}, foo{1,3}})'\n"
E        +  where "usage: pylint [options]\npylint: error: argument --bad-names-rgxs: invalid _regexp_list_transformer value: '(foo{1,}, foo{1,3}})'\n" = CaptureResult(out='', err="usage: pylint [options]\npylint: error: argument --bad-names-rgxs: invalid _regexp_list_transformer value: '(foo{1,}, foo{1,3}})'\n").err

tests/config/test_config.py:171: AssertionError
__________________________ test_clear_cache_post_run ___________________________

    def test_clear_cache_post_run() -> None:
        modname = "changing.py"
        with TemporaryDirectory() as tmp_dir:
            create_files([modname], tmp_dir)
            module = tmp_dir + os.sep + modname
            # Run class does not produce the wanted failure
            # must use LintRun to get pylint.lint.Run
>           run_before_edit = LintRun([module, "--clear-cache-post-run=y"], exit=False)

tests/config/test_config.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pylint/lint/run.py:211: in __init__
    linter.check(args)
pylint/lint/pylinter.py:701: in check
    ast_per_fileitem = self._get_asts(fileitems, data)
pylint/lint/pylinter.py:712: in _get_asts
    for fileitem in fileitems:
pylint/lint/pylinter.py:874: in _iterate_file_descrs
    for descr in self._expand_files(files_or_modules).values():
pylint/lint/pylinter.py:883: in _expand_files
    result, errors = expand_modules(
pylint/lint/expand_modules.py:86: in expand_modules
    if _is_ignored_file(
pylint/lint/expand_modules.py:65: in _is_ignored_file
    or _is_in_ignore_list_re(element, ignore_list_paths_re)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

element = '/tmp/tmpavpd0qlp/changing.py', ignore_list_re = None

    def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:
        """Determines if the element is matched in a regex ignore-list."""
>       return any(file_pattern.match(element) for file_pattern in ignore_list_re)
E       TypeError: 'NoneType' object is not iterable

pylint/lint/expand_modules.py:51: TypeError
==================================== PASSES ====================================
_________________ test_disable_before_enable_all_takes_effect __________________
----------------------------- Captured stdout call -----------------------------
************* Module pylint.testutils.configuration_test
pylint/testutils/configuration_test.py:113:0: I0011: Locally disabling broad-exception-caught (W0718) (locally-disabled)
pylint/testutils/configuration_test.py:113:0: I0020: Suppressed 'broad-exception-caught' (from line 113) (suppressed-message)

------------------------------------
Your code has been rated at 10.00/10

_________________ test_enable_before_disable_all_takes_effect __________________
----------------------------- Captured stdout call -----------------------------
************* Module fixme
tests/regrtest_data/fixme.py:1:1: W0511: TODO: implement (fixme)

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)

=========================== short test summary info ============================
PASSED tests/config/test_config.py::test_can_read_toml_env_variable
PASSED tests/config/test_config.py::test_unknown_message_id
PASSED tests/config/test_config.py::test_unknown_option_name
PASSED tests/config/test_config.py::test_unknown_short_option_name
PASSED tests/config/test_config.py::test_unknown_confidence
PASSED tests/config/test_config.py::test_empty_confidence
PASSED tests/config/test_config.py::test_unknown_yes_no
PASSED tests/config/test_config.py::test_unknown_py_version
PASSED tests/config/test_config.py::test_regex_error
PASSED tests/config/test_config.py::test_short_verbose
PASSED tests/config/test_config.py::test_argument_separator
PASSED tests/config/test_config.py::test_enable_all_disable_all_mutually_exclusive
PASSED tests/config/test_config.py::test_disable_before_enable_all_takes_effect
PASSED tests/config/test_config.py::test_enable_before_disable_all_takes_effect
FAILED tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo-expected0]
FAILED tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo,bar-expected1]
FAILED tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo, bar-expected2]
FAILED tests/config/test_config.py::test_csv_regex_comma_in_quantifier[foo, bar{1,3}-expected3]
FAILED tests/config/test_config.py::test_csv_regex_error - assert 'Error in p...
FAILED tests/config/test_config.py::test_clear_cache_post_run - TypeError: 'N...
========================= 6 failed, 14 passed in 4.42s =========================
+ : '>>>>> End Test Output'
+ git checkout 1f8c4d9eb185c16a2c1d881c054f015e1c2eb334 tests/config/test_config.py
Updated 1 path from ddc0b886d
