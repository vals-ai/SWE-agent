diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index d32c891284..4aeacd461c 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -11,7 +11,7 @@ from django.db.models.fields import (
 from django.db.models.query_utils import RegisterLookupMixin
 from django.utils.datastructures import OrderedSet
 from django.utils.deprecation import RemovedInDjango40Warning
-from django.utils.functional import cached_property
+from django.utils.functional import cached_property, SimpleLazyObject
 
 
 class Lookup:
@@ -68,13 +68,22 @@ class Lookup:
             self.lhs, self.rhs = new_exprs
 
     def get_prep_lookup(self):
-        if hasattr(self.rhs, 'resolve_expression'):
+        if hasattr(self.rhs, 'resolve_expression') or isinstance(self.rhs, SimpleLazyObject):
+            # Expressions and lazy objects are prepared later.
             return self.rhs
         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
             return self.lhs.output_field.get_prep_value(self.rhs)
         return self.rhs
 
     def get_db_prep_lookup(self, value, connection):
+        # Resolve SimpleLazyObject if necessary.
+        if isinstance(value, SimpleLazyObject):
+            value = value._setup()
+            value = value._wrapped
+        # Let the Field handle any further database preparation after the
+        # lazy object has been resolved.
+        if hasattr(self.lhs.output_field, 'get_db_prep_value'):
+            value = self.lhs.output_field.get_db_prep_value(value, connection)
         return ('%s', [value])
 
     def process_lhs(self, compiler, connection, lhs=None):
diff --git a/tests/lazy_object_subquery/__init__.py b/tests/lazy_object_subquery/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/tests/lazy_object_subquery/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tests/lazy_object_subquery/models.py b/tests/lazy_object_subquery/models.py
new file mode 100644
index 0000000000..aa60321bfc
--- /dev/null
+++ b/tests/lazy_object_subquery/models.py
@@ -0,0 +1,12 @@
+
+from django.contrib.auth.models import User
+from django.db import models
+
+class A(models.Model):
+    pass
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
\ No newline at end of file
diff --git a/tests/lazy_object_subquery/tests.py b/tests/lazy_object_subquery/tests.py
new file mode 100644
index 0000000000..ffef80a47c
--- /dev/null
+++ b/tests/lazy_object_subquery/tests.py
@@ -0,0 +1,21 @@
+
+from django.contrib.auth.models import User
+from django.db.models import OuterRef, Subquery
+from django.test import TestCase
+from django.utils.functional import SimpleLazyObject
+
+from .models import A, B, C
+
+class BugTestCase(TestCase):
+    def test_bug(self):
+        owner_user = (
+            B.objects.filter(a=OuterRef("pk"))
+            .annotate(owner_user=Subquery(C.objects.values("owner")))
+            .values("owner_user")
+        )
+        user = SimpleLazyObject(lambda: User.objects.create_user("testuser"))
+        A.objects.annotate(owner_user=Subquery(owner_user)).filter(
+            owner_user=user
+        )
+        # Add a success message to confirm the test runs without error
+        print("Script completed successfully, no errors.")
\ No newline at end of file
