diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..050f7d6134 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -57,10 +57,21 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, **kwargs):
+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)
 
     def write(self, lines):
+        # Let FixedWidthData format header and data lines, calculating widths
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
-        return lines
+
+        # Get the calculated widths and splitter from the data object
+        widths = self.data.widths
+        splitter = self.data.splitter
+
+        # Generate the separator line using '=' character and calculated widths
+        # Note: header_class.position_char could be used, but '=' is hardcoded in SimpleRSTHeader
+        separator_vals = [self.header_class.position_char * width for width in widths]
+        separator = splitter.join(separator_vals, widths)
+
+        # Assemble the final RST table
+        return [separator] + lines + [separator]
diff --git a/reproduce_rst_header.py b/reproduce_rst_header.py
new file mode 100644
index 0000000000..c07164cca2
--- /dev/null
+++ b/reproduce_rst_header.py
@@ -0,0 +1,20 @@
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# First, show the working examples
+print("--- Working example 1: ascii.rst without header_rows ---")
+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})
+tbl.write(sys.stdout,  format="ascii.rst")
+print("\n--- Working example 2: ascii.fixed_width with header_rows ---")
+tbl.write(sys.stdout,  format="ascii.fixed_width", header_rows=["name", "unit"])
+
+# Now, the failing example
+print("\n--- Failing example: ascii.rst with header_rows ---")
+try:
+    tbl.write(sys.stdout,  format="ascii.rst", header_rows=["name", "unit"])
+except Exception as e:
+    print(f"Caught expected exception:\n{type(e).__name__}: {e}")
+
+print("\nScript completed.")
+
