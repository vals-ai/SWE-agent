diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..aca2d757c3 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -15,6 +15,7 @@ from django.db import (
     DJANGO_VERSION_PICKLE_KEY, IntegrityError, NotSupportedError, connections,
     router, transaction,
 )
+from django.db.models import UniqueConstraint
 from django.db.models import AutoField, DateField, DateTimeField, sql
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.deletion import Collector
@@ -689,8 +690,15 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
-            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+        if field_name != 'pk':
+            field = self.model._meta.get_field(field_name)
+            # Check if field is unique via unique=True or a single-field UniqueConstraint
+            is_unique = field.unique or any(
+                isinstance(c, UniqueConstraint) and c.fields == (field_name,)
+                for c in self.model._meta.constraints
+            )
+            if not is_unique:
+                raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
                 return {}
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..13cc0a6744
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,25 @@
+# Generated by Django 3.1 on 2025-04-29 01:51
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('slug', models.CharField(max_length=255)),
+            ],
+        ),
+        migrations.AddConstraint(
+            model_name='article',
+            constraint=models.UniqueConstraint(fields=('slug',), name='main_article_slug_unq'),
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..d8fd02b2f2
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,60 @@
+import os
+import sys
+from django.conf import settings
+from django.db import models, connection
+from django.core.management import call_command
+
+# Minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        '__main__', # Add the current script as an app
+    ],
+    # Suppress warnings
+    SILENCED_SYSTEM_CHECKS=['1_8.W001']
+)
+
+# Required for Django setup
+import django
+django.setup()
+
+# Define the model
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+
+    class Meta:
+        app_label = '__main__' # Important for model discovery
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="main_article_slug_unq")
+        ]
+
+# Create the table manually
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+
+# Attempt the failing operation
+try:
+    print("Attempting Article.objects.in_bulk(field_name='slug')...")
+    # Add some data first to make the call meaningful, though not strictly necessary for the error
+    Article.objects.create(slug='test-slug-1')
+    Article.objects.create(slug='test-slug-2')
+    result = Article.objects.in_bulk(['test-slug-1', 'test-slug-2'], field_name="slug")
+    print(f"in_bulk() succeeded unexpectedly. Result: {result}")
+except ValueError as e:
+    print(f"Successfully reproduced the error: {e}")
+    # Print traceback for more details if needed
+    # import traceback
+    # traceback.print_exc()
+except Exception as e:
+    print(f"An unexpected error occurred: {e}")
+    # import traceback
+    # traceback.print_exc()
+
+
+print("Script finished.")
+
diff --git a/tests/lookup/models.py b/tests/lookup/models.py
index fbc9fa606f..0cc6dc4b42 100644
--- a/tests/lookup/models.py
+++ b/tests/lookup/models.py
@@ -23,6 +23,15 @@ class Author(models.Model):
     class Meta:
         ordering = ('name',)
 
+class ConstrainedArticle(models.Model):
+    name = models.CharField(max_length=100)
+    slug = models.CharField(max_length=255)
+
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="constrained_article_slug_unq"),
+        ]
+
 
 class Article(models.Model):
     headline = models.CharField(max_length=100)
diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py
index baefdf9701..cd2892fa09 100644
--- a/tests/lookup/tests.py
+++ b/tests/lookup/tests.py
@@ -11,7 +11,7 @@ from django.test import TestCase, skipUnlessDBFeature
 from django.utils.deprecation import RemovedInDjango40Warning
 
 from .models import (
-    Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,
+    Article, Author, ConstrainedArticle, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,
 )
 
 
