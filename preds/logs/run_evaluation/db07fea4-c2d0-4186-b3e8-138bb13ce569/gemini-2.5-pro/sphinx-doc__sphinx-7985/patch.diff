diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..1c3a85441 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -15,6 +15,7 @@ import socket
 import threading
 from html.parser import HTMLParser
 from os import path
+import posixpath
 from typing import Any, Dict, List, Set, Tuple
 from urllib.parse import unquote, urlparse
 
@@ -213,7 +214,53 @@ class CheckExternalLinksBuilder(Builder):
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                # Handle local links
+                target_docname_rel, anchor = uri.split('#', 1) if '#' in uri else (uri, None)
+
+                # Resolve relative path
+                if not target_docname_rel: # Link to anchor in the same document (#anchor)
+                    target_docname = docname
+                else:
+                    current_dir = posixpath.dirname(docname)
+                    # Ensure the target has the correct extension if needed (usually not for docnames)
+                    target_docname = posixpath.normpath(posixpath.join(current_dir, target_docname_rel))
+
+                if target_docname not in self.env.all_docs:
+                    # Check if the target_docname_rel might be a source file with extension
+                    target_docname_noext, ext = posixpath.splitext(target_docname)
+                    if target_docname_noext in self.env.all_docs:
+                        target_docname = target_docname_noext # Use the docname without extension
+                    else:
+                        return 'broken', f'document not found: {target_docname}', 0 # Corrected indentation
+
+                # Document exists, check anchor if present
+                if anchor:
+                    # Ignore configuration for anchors
+                    for rex in self.anchors_ignore:
+                        if rex.match(anchor):
+                            return 'ignored', 'anchor ignored by config', 0
+
+                    if self.app.config.linkcheck_anchors:
+                        # Check standard domain labels and anonymous labels
+                        std_domain = self.env.domains.get('std')
+                        if std_domain:
+                            if anchor in std_domain.labels or \
+                               anchor in std_domain.anonlabels: # Corrected indentation
+                                return 'working', '', 0
+                            else:
+                                # Maybe it's an implicit section title anchor?
+                                # This requires more complex checking, potentially involving doctrees.
+                                # For now, report as broken if not in explicit labels.
+                                return 'broken', f'anchor not found: {anchor} in {target_docname}', 0
+                        else:
+                            # Should not happen in a normal Sphinx setup
+                            return 'broken', 'standard domain not found', 0
+                    else:
+                        # Anchor check is disabled, assume working if document exists
+                        return 'working', 'anchor check disabled', 0
+                else:
+                    # Document found, no anchor specified
+                    return 'working', '', 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
