diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..d8a9c6ec50
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..abbab2bdc8
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,16 @@
+
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/myapp/__init__.py
@@ -0,0 +1 @@
+
diff --git a/myapp/apps.py b/myapp/apps.py
new file mode 100644
index 0000000000..560453340f
--- /dev/null
+++ b/myapp/apps.py
@@ -0,0 +1,5 @@
+
+from django.apps import AppConfig
+
+class MyappConfig(AppConfig):
+    name = 'myapp'
\ No newline at end of file
diff --git a/myapp/migrations/0001_initial.py b/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..417c88b1e8
--- /dev/null
+++ b/myapp/migrations/0001_initial.py
@@ -0,0 +1,52 @@
+# Generated by Django 4.2.dev20221109093240 on 2025-04-28 22:50
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Book",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("title", models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Chapter",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("title", models.CharField(max_length=100)),
+                (
+                    "book",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="chapters",
+                        to="myapp.book",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/myapp/migrations/__init__.py b/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..39e4a2dc57
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,9 @@
+
+from django.db import models
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+
+class Chapter(models.Model):
+    title = models.CharField(max_length=100)
+    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='chapters')
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..99d5092a3e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,39 @@
+
+import os
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+import django
+django.setup()
+
+from django.db.models import Count
+from django.db import connection
+from myapp.models import Book, Chapter
+
+# Create some data
+book1 = Book.objects.create(title="Book 1")
+Chapter.objects.create(title="Chapter 1.1", book=book1)
+Chapter.objects.create(title="Chapter 1.2", book=book1)
+
+book2 = Book.objects.create(title="Book 2")
+Chapter.objects.create(title="Chapter 2.1", book=book2)
+
+# Query with annotation
+qs_annotated = Book.objects.annotate(num_chapters=Count('chapters'))
+count_annotated = qs_annotated.count()
+print(f"Count with annotation: {count_annotated}")
+print("SQL for annotated count:")
+print(connection.queries[-1]['sql'])
+
+# Query without annotation
+count_plain = Book.objects.count()
+print(f"\nCount without annotation: {count_plain}")
+print("SQL for plain count:")
+print(connection.queries[-1]['sql'])
+
+# Check if the annotation is present in the annotated count SQL
+annotated_sql = connection.queries[-2]['sql'] # Get the SQL for the annotated count again
+if 'num_chapters' in annotated_sql or 'COUNT("myapp_chapter"."id")' in annotated_sql:
+    print("\nIssue reproduced: Annotation is present in the SQL for count().")
+else:
+    print("\nIssue not reproduced: Annotation is NOT present in the SQL for count().")
+
+print("\nScript completed successfully, no errors.")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..391164c270
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,15 @@
+
+
+SECRET_KEY = 'fake-key'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'myapp',
+]
+DEBUG = True
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
\ No newline at end of file
