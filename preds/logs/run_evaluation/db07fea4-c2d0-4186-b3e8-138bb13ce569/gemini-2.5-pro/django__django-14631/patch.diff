diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..6abeb8ed33 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,6 +1,8 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
+
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
@@ -229,6 +231,31 @@ class BoundField:
         return attrs
 
     @property
+    def _did_change(self):
+        """Return True if the data for this field has changed."""
+        # Access data using form methods that consider the prefix.
+        data_value = self.form._field_data_value(self.field, self.html_name)
+
+        if not self.field.show_hidden_initial:
+            # Use the BoundField's initial property, which is already cached
+            # and handles callable initial values correctly.
+            initial_value = self.initial
+        else:
+            # Handle hidden initial fields.
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                # Use form's method to get widget data value.
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # If the initial value is invalid, assume it changed.
+                return True
+
+        # Compare the prepared initial and data values using the field's
+        # comparison method.
+        return self.field.has_changed(initial_value, data_value)
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..ed7d6b194c 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -387,11 +387,12 @@ class BaseForm:
         self._post_clean()
 
     def _clean_fields(self):
-        for name, field in self.fields.items():
+        for name, bf in self._bound_items():
+            field = bf.field
             if field.disabled:
                 value = self.get_initial_for_field(field, name)
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.value()
             try:
                 if isinstance(field, FileField):
                     initial = self.get_initial_for_field(field, name)
@@ -436,27 +437,7 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf._did_change()]
 
     @property
     def media(self):
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index e1567f12ce..7e36301bf2 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -2120,6 +2120,7 @@ Password: <input type="password" name="password" required></li>
 
         form = DateTimeForm({})
         self.assertEqual(form.errors, {})
+        self.assertEqual(form.cleaned_data['dt'], form['dt'].initial)
         self.assertEqual(form.cleaned_data, {'dt': now})
 
     def test_datetime_changed_data_callable_with_microseconds(self):
