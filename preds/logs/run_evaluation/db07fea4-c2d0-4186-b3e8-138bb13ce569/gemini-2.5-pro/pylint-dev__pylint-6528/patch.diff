diff --git a/.a/foo.py b/.a/foo.py
new file mode 100644
index 000000000..1dd4d07d9
--- /dev/null
+++ b/.a/foo.py
@@ -0,0 +1 @@
+# import re
diff --git a/bar.py b/bar.py
new file mode 100644
index 000000000..1dd4d07d9
--- /dev/null
+++ b/bar.py
@@ -0,0 +1 @@
+# import re
diff --git a/pylint/config/option.py b/pylint/config/option.py
index 5043fe765..b8cdc4990 100644
--- a/pylint/config/option.py
+++ b/pylint/config/option.py
@@ -38,13 +38,8 @@ def _regexp_paths_csv_validator(
         return value
     patterns = []
     for val in _csv_validator(_, name, value):
-        patterns.append(
-            re.compile(
-                str(pathlib.PureWindowsPath(val)).replace("\\", "\\\\")
-                + "|"
-                + pathlib.PureWindowsPath(val).as_posix()
-            )
-        )
+        # Just compile the value directly as a regex
+        patterns.append(_regexp_validator(_, name, val))
     return patterns
 
 
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..ba57c04ab 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -31,6 +31,7 @@ from pylint.constants import (
 )
 from pylint.lint.base_options import _make_linter_options
 from pylint.lint.caching import load_results, save_results
+from pylint.lint.expand_modules import _is_in_ignore_list_re
 from pylint.lint.expand_modules import expand_modules
 from pylint.lint.message_state_handler import _MessageStateHandler
 from pylint.lint.parallel import check_parallel
@@ -564,31 +565,100 @@ class PyLinter(
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
         """
+        # Prepare ignore lists once
+        ignore_list = self.config.ignore
+        ignore_list_re = self.config.ignore_patterns
+        # Use the already compiled regex list for paths
+        ignore_list_paths_re = self.config.ignore_paths
+
         for something in files_or_modules:
+            # Check if the initial 'something' should be ignored
+            something_base = os.path.basename(something)
+            if (
+                something_base in ignore_list
+                or _is_in_ignore_list_re(something_base, ignore_list_re)
+                or _is_in_ignore_list_re(something, ignore_list_paths_re)
+            ):
+                continue  # Skip this entry entirely
+
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
+                # It's a directory to walk recursively
                 skip_subtrees: list[str] = []
-                for root, _, files in os.walk(something):
+                # Use os.walk(something, topdown=True) to allow pruning
+                for root, dirs, files in os.walk(something, topdown=True):
+                    # Check if the current root itself should be skipped
+                    root_base = os.path.basename(root)
+                    if (
+                        root_base in ignore_list
+                        or _is_in_ignore_list_re(root_base, ignore_list_re)
+                        or _is_in_ignore_list_re(root, ignore_list_paths_re)
+                    ):
+                        # If root is ignored, clear dirs to prevent further descent
+                        dirs[:] = []
+                        continue  # Skip processing files/dirs in this root
+
+                    # Prune ignored directories based on basename and patterns
+                    dirs[:] = [
+                        d
+                        for d in dirs
+                        if not (
+                            d in ignore_list or _is_in_ignore_list_re(d, ignore_list_re)
+                        )
+                    ]
+                    # Prune ignored directories based on full path patterns
+                    original_dirs = list(dirs)  # Keep original list for iteration
+                    dirs[:] = []  # Clear dirs to rebuild
+                    for d in original_dirs:
+                        dir_path = os.path.join(root, d)
+                        if not _is_in_ignore_list_re(dir_path, ignore_list_paths_re):
+                            dirs.append(d)
+
+                    # Original logic for skipping subtrees of discovered packages
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
+                        dirs[:] = []  # Prune descent into already covered package
                         continue
+
+                    # Process packages (__init__.py found)
                     if "__init__.py" in files:
-                        skip_subtrees.append(root)
-                        yield root
+                        # Check if the package file itself is ignored
+                        init_path = os.path.join(root, "__init__.py")
+                        init_base = "__init__.py"
+                        if not (
+                            init_base in ignore_list
+                            or _is_in_ignore_list_re(init_base, ignore_list_re)
+                            or _is_in_ignore_list_re(init_path, ignore_list_paths_re)
+                        ):
+                            # Yield the package directory path (root)
+                            skip_subtrees.append(root)
+                            yield root
+                        else:
+                            # If __init__.py is ignored by path, prune descent
+                            dirs[:] = []
+                            continue
+                    # Process standalone .py files
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
-            else:
+                        for file in files:
+                            if file.endswith(".py"):
+                                file_path = os.path.join(root, file)
+                                file_base = file
+                                if not (
+                                    file_base in ignore_list
+                                    or _is_in_ignore_list_re(file_base, ignore_list_re)
+                                    or _is_in_ignore_list_re(file_path, ignore_list_paths_re)
+                                ):
+                                    yield file_path
+            # Handle case where 'something' is a file or package directory directly
+            # (The initial ignore check at the start of the loop already handled ignores)
+            elif os.path.exists(something):
                 yield something
 
     def check(self, files_or_modules: Sequence[str] | str) -> None:
