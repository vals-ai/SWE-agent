diff --git a/django/apps/registry.py b/django/apps/registry.py
index 0683f3ad3c..c17543cc1d 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -375,6 +375,7 @@ class Apps:
         """
         # Call expire cache on each model. This will purge
         # the relation tree and the fields cache.
+        self.get_swappable_settings_name.cache_clear()
         self.get_models.cache_clear()
         if self.ready:
             # Circumvent self.get_models() to prevent that the cache is refilled.
diff --git a/tests/apps/tests.py b/tests/apps/tests.py
index 9f989c5d9a..09d03c5f08 100644
--- a/tests/apps/tests.py
+++ b/tests/apps/tests.py
@@ -373,6 +373,40 @@ class AppsTests(SimpleTestCase):
         # Everything should be loaded - make sure the callback was executed properly.
         self.assertEqual(model_classes, [LazyA, LazyB, LazyB, LazyC, LazyA])
 
+    @override_settings(AUTH_USER_MODEL="apps.User")
+    def test_clear_cache_clears_swappable_cache(self):
+        """
+        Apps.clear_cache() clears the get_swappable_settings_name() cache.
+        """
+        # Define a dummy User model for the test
+        class User(models.Model):
+            class Meta:
+                app_label = "apps"
+                swappable = "AUTH_USER_MODEL"
+
+        # Populate the cache by calling the method
+        swappable_setting = apps.get_swappable_settings_name("apps.User")
+        self.assertEqual(swappable_setting, "AUTH_USER_MODEL")
+        # Check cache is populated (at least 1 hit/miss depending on previous tests)
+        cache_info_before = apps.get_swappable_settings_name.cache_info()
+        self.assertGreater(cache_info_before.currsize, 0)
+
+        # Clear the cache
+        apps.clear_cache()
+
+        # Check the cache is now empty
+        cache_info_after = apps.get_swappable_settings_name.cache_info()
+        self.assertEqual(cache_info_after.hits, 0)
+        self.assertEqual(cache_info_after.misses, 0)
+        self.assertEqual(cache_info_after.currsize, 0)
+
+        # Verify the method still works after cache clear
+        swappable_setting_after = apps.get_swappable_settings_name("apps.User")
+        self.assertEqual(swappable_setting_after, "AUTH_USER_MODEL")
+        cache_info_final = apps.get_swappable_settings_name.cache_info()
+        self.assertEqual(cache_info_final.misses, 1) # Should be a miss now
+        self.assertEqual(cache_info_final.currsize, 1)
+
 
 class Stub:
     def __init__(self, **kwargs):
