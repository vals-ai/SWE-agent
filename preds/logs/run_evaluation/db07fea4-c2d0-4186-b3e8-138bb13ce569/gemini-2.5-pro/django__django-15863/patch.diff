diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..3622fed4f0 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -150,14 +150,36 @@ def floatformat(text, arg=-1):
         elif last_char == "u":
             use_l10n = False
             arg = arg[:-1] or -1
+    # The try block is slightly different now, catching more errors.
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
-    except InvalidOperation:
-        try:
-            d = Decimal(str(float(text)))
-        except (ValueError, InvalidOperation, TypeError):
-            return ""
+        # Attempt to convert persistent Decimal instances to strings early.
+        input_val = str(text)
+        if isinstance(text, Decimal):
+            # Avoid conversion through float for Decimal instances (#33761).
+            d = text
+        else:
+            # Handle floats, strings representing floats, Inf, NaN
+            try:
+                d = Decimal(input_val)
+            except InvalidOperation:
+                # Try converting via float.
+                try:
+                    d = Decimal(str(float(text)))
+                except (ValueError, InvalidOperation, TypeError):
+                    # Maybe Inf/NaN? The docstring promises to return their
+                    # string representation.
+                    try:
+                        val = float(text)
+                        if val.is_infinite() or val.is_nan():
+                            return str(val)
+                    except (ValueError, TypeError):
+                        pass  # Wasn't float/Inf/NaN
+                    # Otherwise, fail. The original code returned "", keep that.
+                    return ""
+    except (ValueError, TypeError, InvalidOperation):
+        # Handle cases where the input is invalid for Decimal conversion
+        # after initial checks, e.g., non-numeric strings not caught earlier.
+        return ""
     try:
         p = int(arg)
     except ValueError:
diff --git a/reproduce_floatformat_bug.py b/reproduce_floatformat_bug.py
new file mode 100644
index 0000000000..afec18f8d0
--- /dev/null
+++ b/reproduce_floatformat_bug.py
@@ -0,0 +1,39 @@
+
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+t = Template('{{ value|floatformat:20 }}')
+c = Context({'value': Decimal('42.12345678901234567890')})
+
+# Test with a standard float
+t_float = Template('{{ value|floatformat:5 }}')
+c_float = Context({'value': 123.456789})
+print(f"Float test: {t_float.render(c_float)}") # Expected: 123.45679
+
+# Test with an integer
+t_int = Template('{{ value|floatformat:3 }}')
+c_int = Context({'value': 100})
+print(f"Integer test: {t_int.render(c_int)}") # Expected: 100.000
+
+# Test with a negative Decimal
+t_neg_decimal = Template('{{ value|floatformat:10 }}')
+c_neg_decimal = Context({'value': Decimal('-98.7654321098')})
+print(f"Negative Decimal test: {t_neg_decimal.render(c_neg_decimal)}") # Expected: -98.7654321098
+
+# Test with zero
+t_zero = Template('{{ value|floatformat:4 }}')
+c_zero = Context({'value': Decimal('0.0')})
+print(f"Zero test: {t_zero.render(c_zero)}") # Expected: 0.0000
+# Add a success message for clarity
+print("Script completed successfully.")
\ No newline at end of file
