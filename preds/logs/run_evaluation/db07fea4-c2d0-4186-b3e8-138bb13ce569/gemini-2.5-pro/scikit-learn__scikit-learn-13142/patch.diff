diff --git a/reproduce_gm_bug.py b/reproduce_gm_bug.py
new file mode 100644
index 000000000..0bd072718
--- /dev/null
+++ b/reproduce_gm_bug.py
@@ -0,0 +1,32 @@
+
+from sklearn.mixture import GaussianMixture
+# The issue used sklearn.utils.testing.assert_array_equal, but that might be deprecated.
+# Using numpy.testing.assert_array_equal instead.
+from numpy.testing import assert_array_equal
+import numpy as np # Use numpy consistently
+
+# Set a random seed for reproducibility
+np.random.seed(0)
+
+X = np.random.randn(1000,5)
+
+print('no n_init')
+gm = GaussianMixture(n_components=5, random_state=0) # Add random_state for reproducibility
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1,c2)
+print('Test passed for no n_init.')
+
+print('\nn_init=5')
+gm = GaussianMixture(n_components=5, n_init=5, random_state=0) # Add random_state for reproducibility
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+# Add a print statement to show the difference if assertion fails
+try:
+    assert_array_equal(c1, c2)
+    print('Test passed for n_init=5.')
+except AssertionError as e:
+    print('AssertionError encountered as expected:')
+    print(e)
+
+print("\nScript completed.")
\ No newline at end of file
diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..62ea33543 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -259,6 +259,7 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
 
         # Always do a final e-step to guarantee that the labels returned by
         # fit_predict(X) are always consistent with fit(X).predict(X)
+        self._set_parameters(best_params)
         # for any value of max_iter and tol (and any random_state).
         _, log_resp = self._e_step(X)
 
@@ -269,7 +270,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                           'or check for degenerate data.'
                           % (init + 1), ConvergenceWarning)
 
-        self._set_parameters(best_params)
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py
index 4d549ccd7..617be75f0 100644
--- a/sklearn/mixture/tests/test_gaussian_mixture.py
+++ b/sklearn/mixture/tests/test_gaussian_mixture.py
@@ -584,9 +584,9 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):
         X = rand_data.X[covar_type]
         Y = rand_data.Y
         g = GaussianMixture(n_components=rand_data.n_components,
-                            random_state=rng, weights_init=rand_data.weights,
-                            means_init=rand_data.means,
-                            precisions_init=rand_data.precisions[covar_type],
+                            random_state=rng,
+                            n_init=2,  # Test with n_init > 1
+                            # Do not provide init params to test internal init selection
                             covariance_type=covar_type,
                             max_iter=max_iter, tol=tol)
 
