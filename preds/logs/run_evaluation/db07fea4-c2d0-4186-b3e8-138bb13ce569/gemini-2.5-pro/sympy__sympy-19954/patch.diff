diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..66cf6efa83 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2194,18 +2194,22 @@ def _number_blocks(blocks):
                 # check if the system is minimal with
                 # respect to the already discovere ones
                 minimal = True
-                to_remove = []
+                to_remove_reps = [] # Keep track of representative blocks to remove
+                indices_to_remove = [] # Keep track of indices to remove from num_blocks/blocks
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
-                        # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
+                        # Mark i-th block system for removal
+                        indices_to_remove.append(i)
+                        to_remove_reps.append(r) # Use the actual element r for removal check later
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
                 # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                rep_blocks = [r for r in rep_blocks if r not in to_remove_reps]
+                # Now, remove the marked elements from num_blocks and blocks in reverse index order
+                for i in sorted(indices_to_remove, reverse=True):
+                    del num_blocks[i], blocks[i]
 
                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py
index 7ab0993654..fa50036de2 100644
--- a/sympy/combinatorics/tests/test_perm_groups.py
+++ b/sympy/combinatorics/tests/test_perm_groups.py
@@ -903,6 +903,21 @@ def test_sylow_subgroup():
     G = AlternatingGroup(100)
     S = G.sylow_subgroup(2)
     assert G.order() % S.order() == 0
+
+
+
+    # Test cases from issue #19881
+    G18 = DihedralGroup(18)
+    S2_18 = G18.sylow_subgroup(2)
+    assert S2_18.order() == 4
+    S3_18 = G18.sylow_subgroup(3)
+    assert S3_18.order() == 9
+
+    G50 = DihedralGroup(50)
+    S2_50 = G50.sylow_subgroup(2)
+    assert S2_50.order() == 4
+    S5_50 = G50.sylow_subgroup(5)
+    assert S5_50.order() == 25
     assert G.order()/S.order() % 2 > 0
 
 
