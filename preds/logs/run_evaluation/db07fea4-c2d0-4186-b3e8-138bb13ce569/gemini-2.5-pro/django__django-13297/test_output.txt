+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/backends/utils.py
	modified:   tests/generic_views/test_base.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 8954f255bbf5f4ee997fd6de62cb50fc9b5dd697
Author: Pat Garcia <commonzenmedia@gmail.com>
Date:   Tue Aug 11 21:05:03 2020 -0400

    Fixed #31382 -- Made Model.save(update_fields=...) raise ValueError on non-concrete fields.

diff --git a/django/db/models/base.py b/django/db/models/base.py
index 7c7bd2d7ee..97d1eecbc8 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -727,7 +727,7 @@ class Model(metaclass=ModelBase):
             update_fields = frozenset(update_fields)
             field_names = set()
 
-            for field in self._meta.fields:
+            for field in self._meta.concrete_fields:
                 if not field.primary_key:
                     field_names.add(field.name)
 
@@ -737,9 +737,11 @@ class Model(metaclass=ModelBase):
             non_model_fields = update_fields.difference(field_names)
 
             if non_model_fields:
-                raise ValueError("The following fields do not exist in this "
-                                 "model or are m2m fields: %s"
-                                 % ', '.join(non_model_fields))
+                raise ValueError(
+                    'The following fields do not exist in this model, are m2m '
+                    'fields, or are non-concrete fields: %s'
+                    % ', '.join(non_model_fields)
+                )
 
         # If saving to the same database, and this model is deferred, then
         # automatically do an "update_fields" save on the loaded fields.
diff --git a/tests/update_only_fields/models.py b/tests/update_only_fields/models.py
index b7100398cd..3bba684d21 100644
--- a/tests/update_only_fields/models.py
+++ b/tests/update_only_fields/models.py
@@ -22,9 +22,19 @@ class Employee(Person):
     accounts = models.ManyToManyField('Account', related_name='employees', blank=True)
 
 
+class NonConcreteField(models.IntegerField):
+    def db_type(self, connection):
+        return None
+
+    def get_attname_column(self):
+        attname, _ = super().get_attname_column()
+        return attname, None
+
+
 class Profile(models.Model):
     name = models.CharField(max_length=200)
     salary = models.FloatField(default=1000.0)
+    non_concrete = NonConcreteField()
 
 
 class ProxyEmployee(Employee):
diff --git a/tests/update_only_fields/tests.py b/tests/update_only_fields/tests.py
index 58ae94b7cc..65a260338c 100644
--- a/tests/update_only_fields/tests.py
+++ b/tests/update_only_fields/tests.py
@@ -5,7 +5,10 @@ from .models import Account, Employee, Person, Profile, ProxyEmployee
 
 
 class UpdateOnlyFieldsTests(TestCase):
-    msg = 'The following fields do not exist in this model or are m2m fields: %s'
+    msg = (
+        'The following fields do not exist in this model, are m2m fields, or '
+        'are non-concrete fields: %s'
+    )
 
     def test_update_fields_basic(self):
         s = Person.objects.create(name='Sara', gender='F')
@@ -254,3 +257,8 @@ class UpdateOnlyFieldsTests(TestCase):
         self.assertEqual(Person.objects.count(), 1)
         with self.assertNumQueries(2):
             s.save(update_fields=['name', 'employee_num'])
+
+    def test_update_non_concrete_field(self):
+        profile_boss = Profile.objects.create(name='Boss', salary=3000)
+        with self.assertRaisesMessage(ValueError, self.msg % 'non_concrete'):
+            profile_boss.save(update_fields=['non_concrete'])
+ git -c core.fileMode=false diff 8954f255bbf5f4ee997fd6de62cb50fc9b5dd697
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py
index 45c03ba3e9..a020e30f8a 100644
--- a/django/db/backends/utils.py
+++ b/django/db/backends/utils.py
@@ -2,6 +2,7 @@ import datetime
 import decimal
 import functools
 import hashlib
+from django.utils.functional import SimpleLazyObject
 import logging
 import time
 from contextlib import contextmanager
@@ -81,12 +82,25 @@ class CursorWrapper:
                 # params default might be backend specific.
                 return self.cursor.execute(sql)
             else:
-                return self.cursor.execute(sql, params)
+                # Resolve SimpleLazyObject instances.
+                if isinstance(params, dict):
+                    resolved_params = {k: str(v) if isinstance(v, SimpleLazyObject) else v for k, v in params.items()}
+                else:  # Assume tuple/list
+                    resolved_params = tuple(str(p) if isinstance(p, SimpleLazyObject) else p for p in params)
+                return self.cursor.execute(sql, resolved_params)
 
     def _executemany(self, sql, param_list, *ignored_wrapper_args):
         self.db.validate_no_broken_transaction()
         with self.db.wrap_database_errors:
-            return self.cursor.executemany(sql, param_list)
+            # Resolve SimpleLazyObject instances in param_list
+            resolved_param_list = []
+            for params in param_list:
+                if isinstance(params, dict):
+                    resolved_params = {k: str(v) if isinstance(v, SimpleLazyObject) else v for k, v in params.items()}
+                else: # Assume tuple/list
+                    resolved_params = tuple(str(p) if isinstance(p, SimpleLazyObject) else p for p in params)
+                resolved_param_list.append(resolved_params)
+            return self.cursor.executemany(sql, resolved_param_list)
 
 
 class CursorDebugWrapper(CursorWrapper):
diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py
index d498d23a68..b83fe9fcb9 100644
--- a/tests/generic_views/test_base.py
+++ b/tests/generic_views/test_base.py
@@ -3,11 +3,15 @@ import time
 from django.core.exceptions import ImproperlyConfigured
 from django.http import HttpResponse
 from django.test import (
-    RequestFactory, SimpleTestCase, ignore_warnings, override_settings,
+    RequestFactory, SimpleTestCase, TestCase, ignore_warnings, override_settings,
 )
 from django.test.utils import require_jinja2
 from django.urls import resolve
 from django.utils.deprecation import RemovedInDjango40Warning
+from django.shortcuts import get_object_or_404
+from django.urls import path
+
+from .models import Author
 from django.views.generic import RedirectView, TemplateView, View
 
 from . import views
@@ -603,3 +607,43 @@ class DeprecationTests(SimpleTestCase):
             str(response.context['foo2'])
         self.assertEqual(response.context['key'], 'value')
         self.assertIsInstance(response.context['view'], View)
+
+
+# Test view for #31904
+class KwargsResolutionView(TemplateView):
+    template_name = 'generic_views/about.html'  # Needs a valid template
+
+    def get_context_data(self, **kwargs):
+        context = super().get_context_data(**kwargs)
+        # This get_object_or_404 call would fail if kwargs['author_slug']
+        # was an unresolved SimpleLazyObject.
+        author_slug = self.kwargs.get('author_slug')
+        context['author'] = get_object_or_404(Author, slug=author_slug)
+        return context
+
+# URL patterns for KwargsResolutionView
+# These need to be discoverable by the test runner's URL resolver override.
+# Placing them directly in the test file makes them available when
+# @override_settings(ROOT_URLCONF='generic_views.test_base') is used.
+urlpatterns = [
+    path('kwargs_resolution/<slug:author_slug>/', KwargsResolutionView.as_view(), name='kwargs_resolution'),
+]
+
+@override_settings(ROOT_URLCONF='generic_views.test_base')
+class KwargsResolutionTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create a unique slug to avoid conflicts if Author is used elsewhere.
+        cls.author = Author.objects.create(name='Test Author Kwargs', slug='test-author-kwargs')
+
+    def test_kwargs_resolved_in_get_context_data(self):
+        """
+        kwargs passed from the URL resolver are resolved before being used
+        in get_context_data, preventing crashes when used in ORM queries (#31904).
+        """
+        # Ensure the URL path matches the one defined in urlpatterns above.
+        res = self.client.get('/kwargs_resolution/test-author-kwargs/')
+        self.assertEqual(res.status_code, 200)
+        # Corrected line: use self.author instead of cls.author
+        self.assertEqual(res.context['author'], self.author)
+        self.assertTemplateUsed(res, 'generic_views/about.html')
\ No newline at end of file
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git checkout 8954f255bbf5f4ee997fd6de62cb50fc9b5dd697 tests/generic_views/test_base.py
Updated 1 path from 289deb388c
+ git apply -v -
Checking patch tests/generic_views/test_base.py...
Applied patch tests/generic_views/test_base.py cleanly.
+ : '>>>>> Start Test Output'
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 generic_views.test_base
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_extra_template_params (generic_views.test_base.DeprecationTests)
A template view can be customized to return extra context. ... ok
test_template_params (generic_views.test_base.DeprecationTests)
A generic template view passes kwargs as context. ... ok
test_template_params_filtering (generic_views.test_base.DeprecationTests) ... ok
test_template_params_warning (generic_views.test_base.DeprecationTests) ... ok
test_get_context_data_super (generic_views.test_base.GetContextDataTest) ... ok
test_object_at_custom_name_in_context_data (generic_views.test_base.GetContextDataTest) ... ok
test_object_in_get_context_data (generic_views.test_base.GetContextDataTest) ... ok
test_default_redirect (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_direct_instantiation (generic_views.test_base.RedirectViewTest) ... ok
test_include_args (generic_views.test_base.RedirectViewTest)
GET arguments can be included in the redirected URL ... ok
test_include_urlencoded_args (generic_views.test_base.RedirectViewTest)
GET arguments can be URL-encoded when included in the redirected URL ... ok
test_named_url_pattern (generic_views.test_base.RedirectViewTest)
Named pattern parameter should reverse to the matching pattern ... ok
test_named_url_pattern_using_args (generic_views.test_base.RedirectViewTest) ... ok
test_no_url (generic_views.test_base.RedirectViewTest)
Without any configuration, returns HTTP 410 GONE ... ok
test_parameter_substitution (generic_views.test_base.RedirectViewTest)
Redirection URLs can be parameterized ... ok
test_permanent_redirect (generic_views.test_base.RedirectViewTest)
Permanent redirects are an option ... ok
test_redirect_DELETE (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_redirect_HEAD (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_redirect_OPTIONS (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_redirect_PATCH (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_redirect_POST (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_redirect_PUT (generic_views.test_base.RedirectViewTest)
Default is a temporary redirect ... ok
test_redirect_when_meta_contains_no_query_string (generic_views.test_base.RedirectViewTest)
regression for #16705 ... ok
test_temporary_redirect (generic_views.test_base.RedirectViewTest)
Temporary redirects are an option ... ok
test_template_mixin_without_template (generic_views.test_base.SingleObjectTemplateResponseMixinTest) ... ok
test_cached_views (generic_views.test_base.TemplateViewTest) ... ok
test_content_type (generic_views.test_base.TemplateViewTest) ... ok
test_extra_context (generic_views.test_base.TemplateViewTest) ... ok
test_get (generic_views.test_base.TemplateViewTest) ... ok
test_get_generic_template (generic_views.test_base.TemplateViewTest) ... ok
test_get_template_attribute (generic_views.test_base.TemplateViewTest) ... ok
test_head (generic_views.test_base.TemplateViewTest) ... ok
test_resolve_login_required_view (generic_views.test_base.TemplateViewTest) ... ok
test_resolve_view (generic_views.test_base.TemplateViewTest) ... ok
test_template_engine (generic_views.test_base.TemplateViewTest) ... ok
test_template_name_required (generic_views.test_base.TemplateViewTest) ... ok
test_overwrite_queryset (generic_views.test_base.UseMultipleObjectMixinTest) ... ok
test_use_queryset_from_view (generic_views.test_base.UseMultipleObjectMixinTest) ... ok
test_args_kwargs_request_on_self (generic_views.test_base.ViewTest) ... ok
test_calling_more_than_once (generic_views.test_base.ViewTest) ... ok
test_class_attributes (generic_views.test_base.ViewTest) ... ok
test_direct_instantiation (generic_views.test_base.ViewTest) ... ok
test_dispatch_decoration (generic_views.test_base.ViewTest) ... ok
test_get_and_head (generic_views.test_base.ViewTest) ... ok
test_get_and_post (generic_views.test_base.ViewTest) ... ok
test_get_only (generic_views.test_base.ViewTest) ... ok
test_head_no_get (generic_views.test_base.ViewTest) ... ok
test_invalid_keyword_argument (generic_views.test_base.ViewTest) ... ok
test_no_init_args (generic_views.test_base.ViewTest) ... ok
test_no_init_kwargs (generic_views.test_base.ViewTest) ... ok
test_not_calling_parent_setup_error (generic_views.test_base.ViewTest) ... ok
test_options (generic_views.test_base.ViewTest) ... ok
test_options_for_get_and_post_view (generic_views.test_base.ViewTest) ... ok
test_options_for_get_view (generic_views.test_base.ViewTest) ... ok
test_options_for_post_view (generic_views.test_base.ViewTest) ... ok
test_overridden_setup (generic_views.test_base.ViewTest) ... ok
test_pathological_http_method (generic_views.test_base.ViewTest) ... ok
test_setup_adds_args_kwargs_request (generic_views.test_base.ViewTest) ... ok
test_setup_get_and_head (generic_views.test_base.ViewTest) ... ok

----------------------------------------------------------------------
Ran 59 tests in 3.115s

OK
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application generic_views
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, generic_views, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table generic_views_artist
    Creating table generic_views_author
    Creating table generic_views_book
    Creating table generic_views_page
    Creating table generic_views_booksigning
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
+ : '>>>>> End Test Output'
+ git checkout 8954f255bbf5f4ee997fd6de62cb50fc9b5dd697 tests/generic_views/test_base.py
Updated 1 path from 289deb388c
