diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..6d380c1bdd 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -7,6 +7,8 @@ attributes of the resolved URL match.
 """
 import functools
 import inspect
+from django.utils.translation import trans_real
+from django.utils import translation
 import re
 import string
 from importlib import import_module
@@ -314,10 +316,22 @@ class LocalePrefixPattern:
 
     @property
     def language_prefix(self):
-        language_code = get_language() or settings.LANGUAGE_CODE
+        # Get the original language code if available, otherwise fall back
+        t = getattr(trans_real._active, "value", None)
+        original_language_code = None
+        if t is not None:
+            try:
+                # Access the original code stored in DjangoTranslation
+                original_language_code = t.language()
+            except AttributeError:
+                pass
+        # Use original code if found, otherwise use get_language() (normalized)
+        language_code = original_language_code or get_language() or settings.LANGUAGE_CODE
+
         if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:
             return ''
         else:
+            # Use the potentially case-preserved language_code
             return '%s/' % language_code
 
     def match(self, path):
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..7767163345 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -1,3 +1,4 @@
+import re
 """Translation helper functions."""
 import functools
 import gettext as gettext_module
@@ -43,7 +44,7 @@ language_code_re = _lazy_re_compile(
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(r'^/([a-zA-Z]{1,8}(?:-[a-zA-Z0-9]{1,8})*)(/|$)')
 
 
 @receiver(setting_changed)
@@ -473,6 +474,17 @@ def get_supported_language_variant(lang_code, strict=False):
     as the provided language codes are taken from the HTTP request. See also
     <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.
     """
+    # Define a stricter regex locally for format validation
+    strict_language_code_re = _lazy_re_compile(
+        r'^[a-z]{2,3}(?:-[a-zA-Z]{2,4})?(?:-[a-zA-Z]{2}|[0-9]{3})?$',
+        re.IGNORECASE
+    )
+    # Validate the input lang_code format first using the stricter regex.
+    if not lang_code or not strict_language_code_re.match(lang_code):
+        raise LookupError(lang_code)
+
+
+
     if lang_code:
         # If 'zh-hant-tw' is not supported, try special fallback or subsequent
         # language codes i.e. 'zh-hant' and 'zh'.
diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py
index ebd2430428..0f4a4e9005 100644
--- a/tests/i18n/patterns/tests.py
+++ b/tests/i18n/patterns/tests.py
@@ -26,6 +26,7 @@ class PermanentRedirectLocaleMiddleWare(LocaleMiddleware):
         ('nl', 'Dutch'),
         ('en', 'English'),
         ('pt-br', 'Brazilian Portuguese'),
+        ('en-Latn-US', 'US English with Latin script'),
     ],
     MIDDLEWARE=[
         'django.middleware.locale.LocaleMiddleware',
@@ -75,6 +76,11 @@ class URLPrefixTests(URLTestCaseBase):
             self.assertEqual(reverse('prefixed'), '/nl/prefixed/')
         with translation.override(None):
             self.assertEqual(reverse('prefixed'), '/%s/prefixed/' % settings.LANGUAGE_CODE)
+    def test_prefixed_script_region(self):
+        """Test reversing URLs with language codes containing script and region."""
+        with translation.override('en-Latn-US'):
+            self.assertEqual(reverse('prefixed'), '/en-Latn-US/prefixed/')
+
 
     @override_settings(ROOT_URLCONF='i18n.patterns.urls.wrong')
     def test_invalid_prefix_use(self):
diff --git a/tshi/db.sqlite3 b/tshi/db.sqlite3
new file mode 100644
index 0000000000..a245af9327
Binary files /dev/null and b/tshi/db.sqlite3 differ
diff --git a/tshi/manage.py b/tshi/manage.py
new file mode 100755
index 0000000000..9b0d2e224c
--- /dev/null
+++ b/tshi/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tshi.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/tshi/tshi/__init__.py b/tshi/tshi/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tshi/tshi/asgi.py b/tshi/tshi/asgi.py
new file mode 100644
index 0000000000..ef61b94be2
--- /dev/null
+++ b/tshi/tshi/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for tshi project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tshi.settings')
+
+application = get_asgi_application()
diff --git a/tshi/tshi/settings.py b/tshi/tshi/settings.py
new file mode 100644
index 0000000000..b8a49723ac
--- /dev/null
+++ b/tshi/tshi/settings.py
@@ -0,0 +1,129 @@
+"""
+Django settings for tshi project.
+
+Generated by 'django-admin startproject' using Django 4.1.dev20211203105622.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-9+-&9_-h(-#0f)ftrw_e!#k7m3%f7m@ua99v&46b-ozwkpku9_'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.middleware.locale.LocaleMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'tshi.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'tshi.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGES = [
+    ('en-us', "English"),
+    ('en-latn-us', "Latin English"),
+    ('en-Latn-US', "BCP 47 case format"),
+]
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/tshi/tshi/urls.py b/tshi/tshi/urls.py
new file mode 100644
index 0000000000..ff2cf6f762
--- /dev/null
+++ b/tshi/tshi/urls.py
@@ -0,0 +1,31 @@
+"""tshi URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
+
+from django.conf.urls.i18n import i18n_patterns
+from django.http import HttpResponse
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+urlpatterns += i18n_patterns(
+    path('', bangiah),
+)
\ No newline at end of file
diff --git a/tshi/tshi/wsgi.py b/tshi/tshi/wsgi.py
new file mode 100644
index 0000000000..334a533fb8
--- /dev/null
+++ b/tshi/tshi/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for tshi project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tshi.settings')
+
+application = get_wsgi_application()
