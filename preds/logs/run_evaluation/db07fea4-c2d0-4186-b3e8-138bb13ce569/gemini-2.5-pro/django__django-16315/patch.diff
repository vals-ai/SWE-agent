diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..9b113229cd 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -353,12 +353,18 @@ class DatabaseOperations(BaseDatabaseOperations):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            # Map field names to column names
+            field_to_column = {field.name: field.column for field in fields}
+            # Get column names for unique fields, falling back to field name if not found (shouldn't happen in valid cases)
+            unique_columns = [field_to_column.get(f, f) for f in unique_fields]
+            # Get column names for update fields, falling back to field name
+            update_columns = [field_to_column.get(f, f) for f in update_fields]
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(map(self.quote_name, unique_columns)),  # Use unique_columns
                 ", ".join(
                     [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
+                        f"{self.quote_name(col)} = EXCLUDED.{self.quote_name(col)}"  # Use update_columns (col)
+                        for col in update_columns  # Iterate over update_columns
                     ]
                 ),
             )
diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py
index 27abc416bd..1500e981c0 100644
--- a/tests/bulk_create/models.py
+++ b/tests/bulk_create/models.py
@@ -135,4 +135,12 @@ class NullableFields(models.Model):
 class RelatedModel(models.Model):
     name = models.CharField(max_length=15, null=True)
     country = models.OneToOneField(Country, models.CASCADE, primary_key=True)
+
+
+class ActivityBlacklisted(models.Model):
+    class Meta:
+        db_table = "Activity_BlackListed"
+    blacklistid = models.IntegerField(primary_key=True, db_column="BlacklistID")
+    sectorid = models.IntegerField(null=True, blank=True, db_column="SectorID")
+    description = models.CharField(max_length=255, null=True, blank=True, db_column="Description")
     big_auto_fields = models.ManyToManyField(BigAutoFieldModel)
diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py
index 6c490d1235..fc352dbe7d 100644
--- a/tests/bulk_create/tests.py
+++ b/tests/bulk_create/tests.py
@@ -34,6 +34,7 @@ from .models import (
     State,
     TwoFields,
     UpsertConflict,
+    ActivityBlacklisted,
 )
 
 
@@ -771,4 +772,31 @@ class BulkCreateTests(TestCase):
     @skipUnlessDBFeature("supports_update_conflicts")
     @skipIfDBFeature("supports_update_conflicts_with_target")
     def test_update_conflicts_no_unique_fields(self):
+        pass
+
+    @skipUnlessDBFeature("supports_update_conflicts", "supports_update_conflicts_with_target")
+    def test_update_conflicts_db_column_mixed_case(self):
+        """
+        Test bulk_create with update_conflicts=True when unique_fields
+        and update_fields refer to fields with db_column set to mixed case.
+        """
+        ActivityBlacklisted.objects.bulk_create(
+            [ActivityBlacklisted(blacklistid=1, sectorid=10, description="Initial")]
+        )
+        self.assertEqual(ActivityBlacklisted.objects.count(), 1)
+        obj = ActivityBlacklisted.objects.get(blacklistid=1)
+        self.assertEqual(obj.sectorid, 10)
+        self.assertEqual(obj.description, "Initial")
+
+        ActivityBlacklisted.objects.bulk_create(
+            [ActivityBlacklisted(blacklistid=1, sectorid=20, description="Updated")],
+            update_conflicts=True,
+            unique_fields=["blacklistid"],
+            update_fields=["sectorid", "description"],
+        )
+        self.assertEqual(ActivityBlacklisted.objects.count(), 1)
+        obj = ActivityBlacklisted.objects.get(blacklistid=1)
+        print("Test completed")
+        self.assertEqual(obj.sectorid, 20)
+
         self._test_update_conflicts([])
