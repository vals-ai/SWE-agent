diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 2e97d9064b..d4a27e07d8 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -248,12 +248,13 @@ class Command(BaseCommand):
                 else:
                     self.log("No changes detected")
         else:
+            if check_changes:
+                self.stderr.write("Migrations are required.")
+                sys.exit(1)
             if self.update:
                 self.write_to_last_migration_files(changes)
             else:
                 self.write_migration_files(changes)
-            if check_changes:
-                sys.exit(1)
 
     def write_to_last_migration_files(self, changes):
         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 9900c7a35d..9e61b27b28 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -1464,6 +1464,32 @@ class MakeMigrationsTests(MigrationTestBase):
                 self.assertIn("úñí©óðé µóðéøß", content)  # Meta.verbose_name_plural
                 self.assertIn("ÚÑÍ¢ÓÐÉ", content)  # title.verbose_name
                 self.assertIn("“Ðjáñgó”", content)  # title.default
+    def test_makemigrations_check_exits_without_writing(self):
+        """
+        makemigrations --check exits with code 1 and doesn't write files if
+        migrations are needed.
+        """
+        # Use UnicodeModel as it's used in the previous test
+        apps.register_model("migrations", UnicodeModel)
+        with self.temporary_migration_module() as migration_dir:
+            out = io.StringIO()
+            err = io.StringIO()
+            with self.assertRaises(SystemExit) as cm:
+                call_command(
+                    "makemigrations",
+                    "--check",
+                    "migrations",
+                    stdout=out,
+                    stderr=err,
+                )
+            self.assertEqual(cm.exception.code, 1)
+            # Check no migration file was created.
+            if os.path.exists(migration_dir):
+                migration_files = [f for f in os.listdir(migration_dir) if f.endswith('.py') and not f.startswith('__init__')]
+                self.assertEqual(len(migration_files), 0, f"Migration file(s) created: {migration_files}")
+            # If the directory doesn't exist, that also means no files were created.
+            # Check the output message.
+            self.assertIn("Migrations are required.", err.getvalue())
 
     def test_makemigrations_order(self):
         """
