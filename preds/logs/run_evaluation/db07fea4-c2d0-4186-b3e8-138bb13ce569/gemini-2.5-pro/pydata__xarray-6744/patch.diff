diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 00000000..d680ae99
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,17 @@
+
+import xarray as xr
+import numpy as np
+
+my_data = xr.DataArray(np.arange(1,10), dims="x")
+
+# Option 1: take a center-justified rolling average
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("Result 1:", result1)
+
+# Option 2: try to manually iterate, but the result is not centered
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = [window.mean().values.item() for label, window in my_data_rolling]
+print("Result 2:", result2)
+
+# Add a success message
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..e355d6a0 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -270,9 +270,28 @@ class DataArrayRolling(Rolling["DataArray"]):
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
-        stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
+        window_size = int(self.window[0])
+        # self.center is a dict {dim: bool}
+        is_center = self.center[0]
+
+        if is_center:
+            offset = window_size // 2
+            starts = np.arange(len(self.window_labels)) - offset
+            stops = starts + window_size
+        else:
+            stops = np.arange(1, len(self.window_labels) + 1)
+            starts = stops - window_size
+
+        # Ensure starts and stops are within bounds [0, N)
+        starts = np.maximum(starts, 0)
+        stops = np.minimum(stops, len(self.window_labels))
+
+        # Handle initial windows for non-centered case (original logic had a bug here too)
+        # For window size 3, starts should be [0, 0, 0, 1, 2, ...]
+        # Original code: starts[:3] = 0 -> [0, 0, 0, 1, 2, ...] (Correct)
+        # My previous proposed fix: starts[:2] = 0 -> [0, 0, -1, 1, 2, ...] (Incorrect)
+        if not is_center:
+            starts[: window_size - 1] = 0
         for (label, start, stop) in zip(self.window_labels, starts, stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
 
diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py
index 2d6efff7..1488d37b 100644
--- a/xarray/tests/test_rolling.py
+++ b/xarray/tests/test_rolling.py
@@ -275,6 +275,29 @@ class TestDataArrayRolling:
 
             result = da.to_dataset(name="var1").rolling(**kwarg).count()["var1"]
             assert_equal(result, expected)
+    def test_rolling_iter_center(self) -> None:
+        """Test manual iteration with center=True. Regression test for GH6738."""
+        my_data = DataArray(np.arange(1, 10), dims="x")
+
+        # Expected result from center-justified rolling average
+        expected = np.array([np.nan, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, np.nan])
+
+        # Manually iterate with center=True
+        my_data_rolling = my_data.rolling(x=3, center=True)
+        actual = np.array(
+            [window.mean().item() for label, window in my_data_rolling], dtype=float
+        )
+        assert_allclose(DataArray(actual), DataArray(expected))
+
+        # Also test center=False iteration matches the direct method
+        expected_false = my_data.rolling(x=3, center=False).mean().values
+        my_data_rolling_false = my_data.rolling(x=3, center=False)
+        actual_false = np.array(
+            [window.mean().item() for label, window in my_data_rolling_false],
+            dtype=float,
+        )
+        assert_allclose(DataArray(actual_false), DataArray(expected_false))
+
 
     @pytest.mark.parametrize("da", (1,), indirect=True)
     @pytest.mark.parametrize("center", (True, False))
