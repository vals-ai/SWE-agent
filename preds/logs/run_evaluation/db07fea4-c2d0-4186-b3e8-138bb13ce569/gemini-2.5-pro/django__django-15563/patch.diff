diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..71d8ebc32c 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -134,7 +134,20 @@ class UpdateQuery(Query):
             query = UpdateQuery(model)
             query.values = values
             if self.related_ids is not None:
-                query.add_filter("pk__in", self.related_ids)
+                # Find the field in the child model that points to the parent model
+                # (e.g., the OneToOneField created automatically).
+                link_field = self.model._meta.get_ancestor_link(model)
+                if link_field is None:
+                    # This should not happen in valid multi-table inheritance.
+                    raise ValueError(f"Could not find link field between {self.model} and {model}")
+
+                # Construct a query to get the parent PKs corresponding to the child PKs.
+                parent_pk_query = self.model._base_manager.filter(
+                    pk__in=self.related_ids
+                ).values_list(link_field.attname, flat=True)
+
+                # Filter the parent update query using the fetched parent PKs.
+                query.add_filter("pk__in", parent_pk_query)
             result.append(query)
         return result
 
diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py
index a479faeda5..9f65046db9 100644
--- a/tests/model_inheritance/models.py
+++ b/tests/model_inheritance/models.py
@@ -182,3 +182,17 @@ class Child(Parent):
 
 class GrandChild(Child):
     pass
+
+
+class MultiInheritanceBase(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField()
+
+
+class MultiInheritanceOtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField()
+
+
+class MultiInheritanceChild(MultiInheritanceBase, MultiInheritanceOtherBase):
+    pass
\ No newline at end of file
diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py
index 882f2999e2..bd7fdd4ed1 100644
--- a/tests/model_inheritance/tests.py
+++ b/tests/model_inheritance/tests.py
@@ -608,7 +608,7 @@ class InheritanceUniqueTests(TestCase):
         )
         msg = "Grand parent with this Email already exists."
         with self.assertRaisesMessage(ValidationError, msg):
-            grand_child.validate_unique()
+                        grand_child.validate_unique()
 
     def test_unique_together(self):
         grand_child = GrandChild(
@@ -619,3 +619,41 @@ class InheritanceUniqueTests(TestCase):
         msg = "Grand parent with this First name and Last name already exists."
         with self.assertRaisesMessage(ValidationError, msg):
             grand_child.validate_unique()
+
+
+class MultiInheritanceUpdateTests(TestCase):
+    def test_multi_inheritance_update_bug(self):
+        from .models import MultiInheritanceOtherBase, MultiInheritanceChild
+
+        # Create instances of the second base model
+        other1 = MultiInheritanceOtherBase.objects.create(field_otherbase=100)
+        other2 = MultiInheritanceOtherBase.objects.create(field_otherbase=101)
+
+        # Create instances of the child model
+        child1 = MultiInheritanceChild.objects.create(field_base=0, field_otherbase=0)
+        child2 = MultiInheritanceChild.objects.create(field_base=1, field_otherbase=1)
+
+        # Attempt to update the child model's field inherited from the second base
+        # This is where the bug occurs
+        num_updated = MultiInheritanceChild.objects.update(field_otherbase=55)
+
+        # Assertions to check the behavior
+        # Check if the correct number of rows were reported as updated (should be 2 Child objects)
+        self.assertEqual(num_updated, 2)
+
+        # Refresh objects from DB
+        child1.refresh_from_db()
+        child2.refresh_from_db()
+        other1.refresh_from_db()
+        other2.refresh_from_db()
+
+        # Check if the Child objects were actually updated (this should fail with the bug)
+        self.assertEqual(child1.field_otherbase, 55, "Child 1 field_otherbase should be updated")
+        self.assertEqual(child2.field_otherbase, 55, "Child 2 field_otherbase should be updated")
+
+        # Check if the unrelated OtherBase objects were incorrectly updated (this should fail with the bug)
+        self.assertEqual(other1.field_otherbase, 100, "OtherBase 1 should not be updated")
+        self.assertEqual(other2.field_otherbase, 101, "OtherBase 2 should not be updated")
+
+        # Add a success message for clarity when the test runs correctly after the fix
+        print("Multi-inheritance update test completed successfully.")
\ No newline at end of file
