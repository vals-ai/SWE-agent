diff --git a/app/__init__.py b/app/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/app/__init__.py
@@ -0,0 +1 @@
+
diff --git a/app/migrations/0001_initial.py b/app/migrations/0001_initial.py
new file mode 100644
index 0000000000..2deac581ac
--- /dev/null
+++ b/app/migrations/0001_initial.py
@@ -0,0 +1,33 @@
+# Generated by Django 3.0.dev20190413103531 on 2025-04-28 20:05
+
+from django.db import migrations, models
+import django.db.models.deletion
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('contenttypes', '0002_remove_content_type_name'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Foo',
+            fields=[
+                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Bar',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('foo_object_id', models.CharField(db_index=True, max_length=255)),
+                ('name', models.CharField(max_length=100)),
+                ('foo_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actor', to='contenttypes.ContentType')),
+            ],
+        ),
+    ]
diff --git a/app/migrations/__init__.py b/app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/models.py b/app/models.py
new file mode 100644
index 0000000000..3f99bdd7df
--- /dev/null
+++ b/app/models.py
@@ -0,0 +1,19 @@
+
+
+import uuid
+from django.db import models
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100) # Add a field for easier identification
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(
+        ContentType, related_name='actor',
+        on_delete=models.CASCADE, db_index=True
+    )
+    foo_object_id = models.CharField(max_length=255, db_index=True) # Changed from UUIDField to CharField as per issue description
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+    name = models.CharField(max_length=100) # Add a field for easier identification
\ No newline at end of file
diff --git a/app/urls.py b/app/urls.py
new file mode 100644
index 0000000000..ff12309de4
--- /dev/null
+++ b/app/urls.py
@@ -0,0 +1,2 @@
+
+urlpatterns = []
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..690779416f
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..aa0f8caf3f 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -202,12 +202,12 @@ class GenericForeignKey(FieldCacheMixin):
             else:
                 model = self.get_content_type(id=ct_id,
                                               using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
+                return (model._meta.pk.to_python(getattr(obj, self.fk_field)),
                         model)
 
         return (
             ret_val,
-            lambda obj: (obj.pk, obj.__class__),
+            lambda obj: (obj._meta.pk.get_prep_value(obj.pk), obj.__class__),
             gfk_key,
             True,
             self.name,
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..edf32fd95b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,36 @@
+
+
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+import django
+django.setup()
+
+from django.contrib.contenttypes.models import ContentType
+from app.models import Foo, Bar
+
+# Create instances
+foo_instance = Foo.objects.create(name="Test Foo")
+foo_ct = ContentType.objects.get_for_model(Foo)
+
+# Important: Store the UUID as a string in foo_object_id
+bar_instance = Bar.objects.create(
+    name="Test Bar",
+    foo_content_type=foo_ct,
+    foo_object_id=str(foo_instance.id)
+)
+
+# Run the query with prefetch_related
+bars = Bar.objects.all().prefetch_related('foo')
+
+# Check if prefetch worked
+for bar in bars:
+    # Accessing bar.foo should hit the prefetched cache, not the DB
+    print(f"Bar: {bar.name}, Prefetched Foo: {bar.foo}")
+    if bar.foo is None:
+        print("ERROR: Prefetching failed, bar.foo is None!")
+    elif bar.foo.id != foo_instance.id:
+        print(f"ERROR: Prefetched foo ID ({bar.foo.id}) doesn't match original foo ID ({foo_instance.id})!")
+    else:
+        print("Prefetch successful!")
+
+print("\nScript completed.")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..fc958beb29
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,41 @@
+
+
+SECRET_KEY = 'fake-key'
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.admin',
+    'django.contrib.contenttypes',
+    'django.contrib.messages',
+    'django.contrib.sessions',
+    'app', # Assuming our models will be in an app named 'app'
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+
+MIDDLEWARE = [
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+]
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+# Add ROOT_URLCONF to silence warning
+ROOT_URLCONF = 'app.urls' # Dummy value, file doesn't need to exist for tests
\ No newline at end of file
diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py
index 091d600475..5b9b260caf 100644
--- a/tests/prefetch_related/models.py
+++ b/tests/prefetch_related/models.py
@@ -294,4 +294,24 @@ class Flea(models.Model):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
     current_room = models.ForeignKey(Room, models.SET_NULL, related_name='fleas', null=True)
     pets_visited = models.ManyToManyField(Pet, related_name='fleas_hosted')
+
+
+# Models for GFK + UUID PK prefetch test (#24961)
+
+class UUIDTarget(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        ordering = ['name']
+
+
+class GFKUUIDSource(models.Model):
+    name = models.CharField(max_length=100)
+    target_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
+    target_object_id = models.CharField(max_length=36)  # Store UUID as string
+    target = GenericForeignKey('target_content_type', 'target_object_id')
+
+    class Meta:
+        ordering = ['name']
     people_visited = models.ManyToManyField(Person, related_name='fleas_hosted')
diff --git a/tests/prefetch_related/test_uuid.py b/tests/prefetch_related/test_uuid.py
index 11a2474f4a..4b4a0341d7 100644
--- a/tests/prefetch_related/test_uuid.py
+++ b/tests/prefetch_related/test_uuid.py
@@ -1,6 +1,8 @@
 from django.test import TestCase
 
-from .models import Flea, House, Person, Pet, Room
+from django.contrib.contenttypes.models import ContentType
+
+from .models import Flea, GFKUUIDSource, House, Person, Pet, Room, UUIDTarget
 
 
 class UUIDPrefetchRelated(TestCase):
@@ -102,3 +104,23 @@ class UUIDPrefetchRelatedLookups(TestCase):
             redwood = House.objects.prefetch_related('rooms__fleas__pets_visited').get(name='Redwood')
         with self.assertNumQueries(0):
             self.assertEqual('Spooky', redwood.rooms.all()[0].fleas.all()[0].pets_visited.all()[0].name)
+
+
+class UUIDPrefetchGFKTests(TestCase):
+    # Test prefetching GFK pointing to a UUID PK (#24961)
+
+    @classmethod
+    def setUpTestData(cls):
+        cls.target = UUIDTarget.objects.create(name='Target')
+        cls.target_ct = ContentType.objects.get_for_model(cls.target)
+        cls.source = GFKUUIDSource.objects.create(
+            name='Source',
+            target_content_type=cls.target_ct,
+            target_object_id=str(cls.target.id),
+        )
+
+    def test_prefetch_gfk_to_uuid_pk(self):
+        with self.assertNumQueries(2):
+            source = GFKUUIDSource.objects.prefetch_related('target').get(name='Source')
+        with self.assertNumQueries(0):
+            self.assertEqual(source.target, self.target)
\ No newline at end of file
