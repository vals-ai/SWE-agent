diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index 11031f2f2..e06a84397 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -345,6 +345,7 @@ class LogCaptureFixture:
         """Creates a new funcarg."""
         self._item = item
         # dict of log name -> log level
+        self._initial_handler_level = self.handler.level
         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]
 
     def _finalize(self) -> None:
@@ -356,6 +357,8 @@ class LogCaptureFixture:
         for logger_name, level in self._initial_logger_levels.items():
             logger = logging.getLogger(logger_name)
             logger.setLevel(level)
+        # restore handler level
+        self.handler.setLevel(self._initial_handler_level)
 
     @property
     def handler(self) -> LogCaptureHandler:
diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py
index da5303302..6eb3fce69 100644
--- a/testing/logging/test_fixture.py
+++ b/testing/logging/test_fixture.py
@@ -205,7 +205,6 @@ def test_caplog_can_override_global_log_level(testdir):
     result = testdir.runpytest()
     assert result.ret == 0
 
-
 def test_caplog_captures_despite_exception(testdir):
     testdir.makepyfile(
         """
@@ -273,4 +272,24 @@ def test_log_report_captures_according_to_config_option_upon_failure(testdir):
     result.stdout.fnmatch_lines(
         ["*Print message*", "*INFO log message*", "*WARNING log message*"]
     )
+
+
+def test_caplog_handler_level_restored(testdir):
+    """Check that handler level is restored after caplog.set_level(). (#7864)"""
+    testdir.makepyfile(
+        """
+        import logging
+
+        def test_set_level(caplog):
+            assert caplog.handler.level == logging.NOTSET  # Default level
+            caplog.set_level(logging.ERROR)
+            assert caplog.handler.level == logging.ERROR
+
+        def test_level_restored(caplog):
+            # Handler level should be restored to the default NOTSET
+            assert caplog.handler.level == logging.NOTSET
+        """
+    )
+    result = testdir.runpytest()
+    assert result.ret == 0
     assert result.ret == 1
