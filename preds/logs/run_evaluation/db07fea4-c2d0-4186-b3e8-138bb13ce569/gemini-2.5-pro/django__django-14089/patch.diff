diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..c58382c3b3 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -34,6 +34,13 @@ class OrderedSet:
     def __len__(self):
         return len(self.dict)
 
+    def __reversed__(self):
+        """Return a reverse iterator over the set's items."""
+        # In Python 3.8+, dicts are ordered and support reversed() directly.
+        # For older versions, this relies on dict.fromkeys preserving order
+        # and reversed() working on the iterator from iter(self.dict).
+        return reversed(self.dict)
+
 
 class MultiValueDictKeyError(KeyError):
     pass
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0a4cae18b6
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,13 @@
+
+
+from django.utils.datastructures import OrderedSet
+
+my_set = OrderedSet([1, 2, 3, 4])
+
+try:
+    reversed_set = reversed(my_set)
+    print("Reversed set:", list(reversed_set))
+except TypeError as e:
+    print(f"Error: {e}")
+
+print("Script completed.")
\ No newline at end of file
diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py
index 45d172f984..88eb3e40d7 100644
--- a/tests/utils_tests/test_datastructures.py
+++ b/tests/utils_tests/test_datastructures.py
@@ -52,8 +52,14 @@ class OrderedSetTests(SimpleTestCase):
         self.assertEqual(len(s), 0)
         s.add(1)
         s.add(2)
-        s.add(2)
         self.assertEqual(len(s), 2)
+        s.add(2)
+
+    def test_reversed(self):
+        s = OrderedSet([1, 2, 3, 4])
+        self.assertEqual(list(reversed(s)), [4, 3, 2, 1])
+        s_empty = OrderedSet()
+        self.assertEqual(list(reversed(s_empty)), [])
 
 
 class MultiValueDictTests(SimpleTestCase):
