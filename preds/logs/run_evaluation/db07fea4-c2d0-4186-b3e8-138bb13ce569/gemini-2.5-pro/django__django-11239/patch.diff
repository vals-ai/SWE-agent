diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index cf4df76882..267af12a41 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -30,6 +30,19 @@ class DatabaseClient(BaseDatabaseClient):
         subprocess_env = os.environ.copy()
         if passwd:
             subprocess_env['PGPASSWORD'] = str(passwd)
+        options = conn_params.get('options', {})
+        sslmode = options.get('sslmode')
+        sslrootcert = options.get('sslrootcert')
+        sslcert = options.get('sslcert')
+        sslkey = options.get('sslkey')
+        if sslmode:
+            subprocess_env['PGSSLMODE'] = str(sslmode)
+        if sslrootcert:
+            subprocess_env['PGSSLROOTCERT'] = str(sslrootcert)
+        if sslcert:
+            subprocess_env['PGSSLCERT'] = str(sslcert)
+        if sslkey:
+            subprocess_env['PGSSLKEY'] = str(sslkey)
         try:
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index a33e7f6482..8860ffa591 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -19,10 +19,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
         def _mock_subprocess_run(*args, env=os.environ, **kwargs):
             self.subprocess_args = list(*args)
             self.pgpassword = env.get('PGPASSWORD')
+            self.pgsslmode = env.get('PGSSLMODE')
+            self.pgsslrootcert = env.get('PGSSLROOTCERT')
+            self.pgsslcert = env.get('PGSSLCERT')
+            self.pgsslkey = env.get('PGSSLKEY')
             return subprocess.CompletedProcess(self.subprocess_args, 0)
         with mock.patch('subprocess.run', new=_mock_subprocess_run):
             DatabaseClient.runshell_db(dbinfo)
-        return self.subprocess_args, self.pgpassword
+        return self.subprocess_args, self.pgpassword, self.pgsslmode, self.pgsslrootcert, self.pgsslcert, self.pgsslkey
 
     def test_basic(self):
         self.assertEqual(
@@ -35,6 +39,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
             }), (
                 ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
                 'somepassword',
+                None, None, None, None,
             )
         )
 
@@ -48,6 +53,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
             }), (
                 ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
                 None,
+                None, None, None, None,
             )
         )
 
@@ -62,6 +68,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
             }), (
                 ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],
                 'some:password',
+                None, None, None, None,
             )
         )
 
@@ -78,9 +85,37 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
             }), (
                 ['psql', '-U', username, '-h', 'somehost', '-p', '444', 'dbname'],
                 password,
+                None, None, None, None,
             )
         )
 
+    def test_ssl_options(self):
+        dbinfo = {
+            'database': 'dbname',
+            'user': 'someuser',
+            'password': 'somepassword',
+            'host': 'somehost',
+            'port': '444',
+            'options': {
+                'sslmode': 'verify-ca',
+                'sslrootcert': 'ca.crt',
+                'sslcert': 'client.crt',
+                'sslkey': 'client.key',
+            }
+        }
+        expected_args = ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']
+        expected_env = (
+            'somepassword',
+            'verify-ca',
+            'ca.crt',
+            'client.crt',
+            'client.key',
+        )
+        self.assertEqual(
+            self._run_it(dbinfo),
+            (expected_args, *expected_env)
+        )
+
     def test_sigint_handler(self):
         """SIGINT is ignored in Python and passed to psql to abort quries."""
         def _mock_subprocess_run(*args, **kwargs):
@@ -92,5 +127,6 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
         self.assertNotEqual(sigint_handler, signal.SIG_IGN)
         with mock.patch('subprocess.run', new=_mock_subprocess_run):
             DatabaseClient.runshell_db({})
+        self.assertEqual(signal.getsignal(signal.SIGINT), sigint_handler)
         # dbshell restores the original handler.
         self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))
