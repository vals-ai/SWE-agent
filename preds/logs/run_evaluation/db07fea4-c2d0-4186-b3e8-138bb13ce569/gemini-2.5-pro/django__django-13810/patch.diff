diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..be8a114eb1 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -51,11 +51,11 @@ class BaseHandler:
                 middleware_is_async = middleware_can_async
             try:
                 # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
                     if str(exc):
diff --git a/tests/handlers/tests.py b/tests/handlers/tests.py
index 1d445cd38c..29345b6c42 100644
--- a/tests/handlers/tests.py
+++ b/tests/handlers/tests.py
@@ -7,6 +7,49 @@ from django.test import (
 )
 from django.utils.version import PY37
 
+import asyncio
+from unittest.mock import Mock
+
+from django.core.exceptions import MiddlewareNotUsed
+from django.core.handlers.asgi import ASGIHandler
+from django.http import HttpResponse
+from django.test import AsyncClient, RequestFactory, override_settings
+from django.utils.decorators import async_only_middleware
+
+# Middleware that raises MiddlewareNotUsed
+class MiddlewareNotUsedRaisingMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed("Not used")
+
+# Simple middleware (sync)
+class SimpleSyncMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    def __call__(self, request):
+        response = self.get_response(request)
+        response['X-Sync-Middleware'] = 'Processed'
+        return response
+
+# Simple middleware (async)
+@async_only_middleware
+class SimpleAsyncMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    async def __call__(self, request):
+        response = await self.get_response(request)
+        response['X-Async-Middleware'] = 'Processed'
+        return response
+
+# Simple sync view
+def simple_sync_view(request):
+    return HttpResponse("OK")
+
+# Simple async view
+async def simple_async_view(request):
+    return HttpResponse("OK")
+
 
 class HandlerTests(SimpleTestCase):
     request_factory = RequestFactory()
@@ -284,3 +327,64 @@ class AsyncHandlerRequestTests(SimpleTestCase):
         )
         with self.assertRaisesMessage(ValueError, msg):
             await self.async_client.get('/unawaited/')
+
+# Test class for MiddlewareNotUsed interaction
+@override_settings(ROOT_URLCONF='handlers.urls') # Use existing urls for simplicity
+class MiddlewareNotUsedTests(SimpleTestCase):
+    async_client = AsyncClient()
+
+    async def test_middleware_not_used_sync_view_sync_middleware(self):
+        """
+        MiddlewareNotUsed doesn't break subsequent sync middleware with a sync view.
+        """
+        middlewares = [
+            'handlers.tests.MiddlewareNotUsedRaisingMiddleware',
+            'handlers.tests.SimpleSyncMiddleware',
+        ]
+        with override_settings(MIDDLEWARE=middlewares):
+            response = await self.async_client.get('/regular/')
+            self.assertEqual(response.status_code, 200)
+            self.assertEqual(response.content, b'regular content')
+            self.assertEqual(response['X-Sync-Middleware'], 'Processed')
+
+    async def test_middleware_not_used_async_view_async_middleware(self):
+        """
+        MiddlewareNotUsed doesn't break subsequent async middleware with an async view.
+        """
+        middlewares = [
+            'handlers.tests.MiddlewareNotUsedRaisingMiddleware',
+            'handlers.tests.SimpleAsyncMiddleware',
+        ]
+        with override_settings(MIDDLEWARE=middlewares):
+            response = await self.async_client.get('/async_regular/')
+            self.assertEqual(response.status_code, 200)
+            self.assertEqual(response.content, b'regular content')
+            self.assertEqual(response['X-Async-Middleware'], 'Processed')
+
+    async def test_middleware_not_used_async_view_sync_middleware(self):
+        """
+        MiddlewareNotUsed doesn't break subsequent sync middleware with an async view.
+        """
+        middlewares = [
+            'handlers.tests.MiddlewareNotUsedRaisingMiddleware',
+            'handlers.tests.SimpleSyncMiddleware',
+        ]
+        with override_settings(MIDDLEWARE=middlewares):
+            response = await self.async_client.get('/async_regular/')
+            self.assertEqual(response.status_code, 200)
+            self.assertEqual(response.content, b'regular content')
+            self.assertEqual(response['X-Sync-Middleware'], 'Processed')
+
+    async def test_middleware_not_used_sync_view_async_middleware(self):
+        """
+        MiddlewareNotUsed doesn't break subsequent async middleware with a sync view.
+        """
+        middlewares = [
+            'handlers.tests.MiddlewareNotUsedRaisingMiddleware',
+            'handlers.tests.SimpleAsyncMiddleware',
+        ]
+        with override_settings(MIDDLEWARE=middlewares):
+            response = await self.async_client.get('/regular/')
+            self.assertEqual(response.status_code, 200)
+            self.assertEqual(response.content, b'regular content')
+            self.assertEqual(response['X-Async-Middleware'], 'Processed')
\ No newline at end of file
