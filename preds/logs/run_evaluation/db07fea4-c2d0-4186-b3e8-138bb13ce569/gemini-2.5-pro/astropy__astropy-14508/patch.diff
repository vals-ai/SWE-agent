diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..c9e7b05b46 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,31 +1299,36 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
-    if "." not in value_str and "E" not in value_str:
-        value_str += ".0"
-    elif "E" in value_str:
-        # On some Windows builds of Python (and possibly other platforms?) the
-        # exponent is zero-padded out to, it seems, three digits.  Normalize
-        # the format to pad only to two digits.
-        significand, exponent = value_str.split("E")
-        if exponent[0] in ("+", "-"):
-            sign = exponent[0]
-            exponent = exponent[1:]
-        else:
-            sign = ""
-        value_str = f"{significand}E{sign}{int(exponent):02d}"
-
-    # Limit the value string to at most 20 characters.
-    str_len = len(value_str)
-
-    if str_len > 20:
-        idx = value_str.find("E")
-
-        if idx < 0:
-            value_str = value_str[:20]
-        else:
-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+    # Try the default string representation first
+    value_str = str(value)
+    # Check if it fits within 20 characters and contains a decimal point or exponent
+    # If not, or if it's too long, use the .16G format
+    if len(value_str) > 20 or ("." not in value_str and "e" not in value_str.lower()):
+        value_str = f"{value:.16G}"
+        if "." not in value_str and "E" not in value_str:
+            value_str += ".0"
+        elif "E" in value_str:
+            # Normalize exponent format
+            significand, exponent = value_str.split("E")
+            if exponent[0] in ("+", "-"):
+                sign = exponent[0]
+                exponent = exponent[1:]
+            else:
+                sign = ""
+            value_str = f"{significand}E{sign}{int(exponent):02d}"
+
+        # Limit the value string to at most 20 characters if using .16G
+        str_len = len(value_str)
+        if str_len > 20:
+            idx = value_str.find("E")
+            if idx < 0:
+                value_str = value_str[:20]
+            else:
+                value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+    # Ensure exponent 'e' is uppercase 'E' if using str(value) representation
+    elif 'e' in value_str:
+        # Use 8 spaces for indentation within the elif block
+        value_str = value_str.replace('e', 'E')
 
     return value_str
 
diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index a8f4e1160f..cc83e2534f 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -7,6 +7,7 @@ from io import BytesIO, StringIO
 
 import numpy as np
 import pytest
+import warnings
 
 from astropy.io import fits
 from astropy.io.fits.card import _pad
@@ -166,6 +167,40 @@ class TestHeaderFunctions(FitsTestCase):
         """Test that Card constructor raises exceptions on bad arguments"""
 
         pytest.raises(ValueError, fits.Card, ("abc",), {"value": (2, 3)})
+    def test_float_format_precision(self):
+        """
+        Test that float formatting uses the shortest representation possible
+        to avoid unnecessary comment truncation (Issue #14738).
+        """
+        keyword = "HIERARCH ESO IFM CL RADIUS"
+        value = 0.009125
+        comment = "[m] radius arround actuator to avoid"
+        expected_card_str = (
+            "HIERARCH ESO IFM CL RADIUS = 0.009125 / [m] radius arround actuator to avoid"
+        )
+
+        # Create the card - no warning should be issued
+        with warnings.catch_warnings(record=True) as w:
+            warnings.simplefilter("always")
+            c = fits.Card(keyword, value, comment)
+            assert len(w) == 0, f"Unexpected warning: {w[0].message}"
+
+        # Check the string representation
+        assert str(c).strip() == expected_card_str.strip()
+        assert c.value == value
+        assert c.comment == comment
+        assert c.keyword == "ESO IFM CL RADIUS" # HIERARCH is removed automatically
+
+        # Test another float that might have issues
+        value2 = 1.23e-5
+        comment2 = "Another comment"
+        expected_card_str2 = f"HIERARCH TESTFLOAT = {value2:.8G} / {comment2}" # Use .8G for expected short form
+        with warnings.catch_warnings(record=True) as w:
+            # Correct indentation (12 spaces)
+            warnings.simplefilter("always")
+            c2 = fits.Card("HIERARCH TESTFLOAT", value2, comment2)
+            assert len(w) == 0, f"Unexpected warning: {w[0].message}"
+        assert str(c2).strip() == expected_card_str2.strip()
         pytest.raises(ValueError, fits.Card, "key", [], "comment")
 
     def test_keyword_too_long(self):
