diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..f010c7fe64 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -3,6 +3,7 @@ from types import MethodType
 
 from django.apps import apps
 from django.conf import settings
+from django.db.models import UniqueConstraint
 from django.core import checks
 
 from .management import _get_builtin_permissions
@@ -52,7 +53,13 @@ def check_user_model(app_configs=None, **kwargs):
         )
 
     # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)
+    field_is_unique = username_field.unique
+    constraint_is_unique = any(
+        isinstance(c, UniqueConstraint) and len(c.fields) == 1 and c.fields[0] == username_field.name
+        for c in cls._meta.constraints
+    )
+    if not (field_is_unique or constraint_is_unique):
         if (settings.AUTHENTICATION_BACKENDS ==
                 ['django.contrib.auth.backends.ModelBackend']):
             errors.append(
diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py
index cfaa4063f8..d04fad77fc 100644
--- a/tests/auth_tests/test_checks.py
+++ b/tests/auth_tests/test_checks.py
@@ -85,6 +85,28 @@ class UserModelChecksTests(SimpleTestCase):
                 ),
             ])
 
+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintUsername')
+    def test_username_unique_constraint(self):
+        """
+        A USERNAME_FIELD made unique with a UniqueConstraint doesn't raise
+        E003/W004.
+        """
+        class CustomUserUniqueConstraintUsername(AbstractBaseUser):
+            username = models.CharField(max_length=30)
+            date_of_birth = models.DateField()
+
+            USERNAME_FIELD = 'username'
+            REQUIRED_FIELDS = ['date_of_birth']
+
+            class Meta:
+                app_label = 'auth_tests'
+                constraints = [
+                    models.UniqueConstraint(fields=['username'], name='unique_username')
+                ]
+
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        self.assertEqual(errors, [])
+
     @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')
     def test_is_anonymous_authenticated_methods(self):
         """
