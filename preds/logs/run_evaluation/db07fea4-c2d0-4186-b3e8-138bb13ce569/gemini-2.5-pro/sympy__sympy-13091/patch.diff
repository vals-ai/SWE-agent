diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..3a6d14ac80
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,41 @@
+
+import sympy
+
+class Foo():
+    def __init__(self, val):
+        self._coefficient = val
+
+    def __eq__(self, other):
+        print(f"Foo.__eq__ called: self={self}, other={other}")
+        if isinstance(other, sympy.Basic):
+            # Compare Foo's value to the SymPy object
+            # This is a simplified comparison for demonstration
+            try:
+                return self._coefficient == float(other)
+            except (TypeError, ValueError):
+                return NotImplemented # Let other handle if conversion fails
+        print("Foo.__eq__ returning NotImplemented for non-sympy.Basic type")
+        return NotImplemented
+
+    def __hash__(self):
+        # Required if __eq__ is defined
+        return hash(self._coefficient)
+
+# Create instances
+f = Foo(1.0)
+s = sympy.Float(1.0)
+
+print("--- Comparing f == s ---")
+result1 = (f == s)
+print(f"Result of f == s: {result1}\n")
+
+print("--- Comparing s == f ---")
+result2 = (s == f)
+print(f"Result of s == f: {result2}\n")
+
+if result1 == result2:
+    print("Comparison is symmetric.")
+else:
+    print("Comparison is asymmetric! This is the bug.")
+
+print("\nScript completed.")
\ No newline at end of file
diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index db4e971848..1fcb67d29f 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -313,7 +313,7 @@ def __eq__(self, other):
             try:
                 other = _sympify(other)
             except SympifyError:
-                return False    # sympy != other
+                return NotImplemented    # sympy != other
 
             if type(self) != type(other):
                 return False
@@ -329,7 +329,10 @@ def __ne__(self, other):
 
            but faster
         """
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def dummy_eq(self, other, symbol=None):
         """
diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 34e0ecb786..b0e61b889f 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -248,7 +248,7 @@ def __ge__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s >= %s" % (self, other))
+            return NotImplemented
         for me in (self, other):
             if (me.is_complex and me.is_real is False) or \
                     me.has(S.ComplexInfinity):
@@ -270,7 +270,7 @@ def __le__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s <= %s" % (self, other))
+            return NotImplemented
         for me in (self, other):
             if (me.is_complex and me.is_real is False) or \
                     me.has(S.ComplexInfinity):
@@ -292,7 +292,7 @@ def __gt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s > %s" % (self, other))
+            return NotImplemented
         for me in (self, other):
             if (me.is_complex and me.is_real is False) or \
                     me.has(S.ComplexInfinity):
@@ -314,7 +314,7 @@ def __lt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s < %s" % (self, other))
+            return NotImplemented
         for me in (self, other):
             if (me.is_complex and me.is_real is False) or \
                     me.has(S.ComplexInfinity):
diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 864d055087..5025c024ab 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1258,7 +1258,7 @@ def __eq__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            return False    # sympy != other  -->  not ==
+            return NotImplemented    # sympy != other  -->  not ==
         if isinstance(other, NumberSymbol):
             if other.is_irrational:
                 return False
@@ -1273,16 +1273,19 @@ def __eq__(self, other):
             # the mpf tuples
             ompf = other._as_mpf_val(self._prec)
             return bool(mlib.mpf_eq(self._mpf_, ompf))
-        return False    # Float != non-Number
+        return NotImplemented    # Float != non-Number
 
     def __ne__(self, other):
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def __gt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s > %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__le__(self)
         if other.is_comparable:
@@ -1290,13 +1293,13 @@ def __gt__(self, other):
         if isinstance(other, Number) and other is not S.NaN:
             return _sympify(bool(
                 mlib.mpf_gt(self._mpf_, other._as_mpf_val(self._prec))))
-        return Expr.__gt__(self, other)
+        return NotImplemented
 
     def __ge__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s >= %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__lt__(self)
         if other.is_comparable:
@@ -1304,13 +1307,13 @@ def __ge__(self, other):
         if isinstance(other, Number) and other is not S.NaN:
             return _sympify(bool(
                 mlib.mpf_ge(self._mpf_, other._as_mpf_val(self._prec))))
-        return Expr.__ge__(self, other)
+        return NotImplemented
 
     def __lt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s < %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__ge__(self)
         if other.is_real and other.is_number:
@@ -1318,13 +1321,13 @@ def __lt__(self, other):
         if isinstance(other, Number) and other is not S.NaN:
             return _sympify(bool(
                 mlib.mpf_lt(self._mpf_, other._as_mpf_val(self._prec))))
-        return Expr.__lt__(self, other)
+        return NotImplemented
 
     def __le__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s <= %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__gt__(self)
         if other.is_real and other.is_number:
@@ -1332,7 +1335,7 @@ def __le__(self, other):
         if isinstance(other, Number) and other is not S.NaN:
             return _sympify(bool(
                 mlib.mpf_le(self._mpf_, other._as_mpf_val(self._prec))))
-        return Expr.__le__(self, other)
+        return NotImplemented
 
     def __hash__(self):
         return super(Float, self).__hash__()
@@ -1719,7 +1722,7 @@ def __eq__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            return False    # sympy != other  -->  not ==
+            return NotImplemented    # sympy != other  -->  not ==
         if isinstance(other, NumberSymbol):
             if other.is_irrational:
                 return False
@@ -1731,16 +1734,19 @@ def __eq__(self, other):
                 return self.p == other.p and self.q == other.q
             if isinstance(other, Float):
                 return mlib.mpf_eq(self._as_mpf_val(other._prec), other._mpf_)
-        return False
+        return NotImplemented
 
     def __ne__(self, other):
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def __gt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s > %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__le__(self)
         expr = self
@@ -1752,13 +1758,13 @@ def __gt__(self, other):
                     self._as_mpf_val(other._prec), other._mpf_)))
         elif other.is_number and other.is_real:
             expr, other = Integer(self.p), self.q*other
-        return Expr.__gt__(expr, other)
+        return NotImplemented
 
     def __ge__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s >= %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__lt__(self)
         expr = self
@@ -1770,13 +1776,13 @@ def __ge__(self, other):
                     self._as_mpf_val(other._prec), other._mpf_)))
         elif other.is_number and other.is_real:
             expr, other = Integer(self.p), self.q*other
-        return Expr.__ge__(expr, other)
+        return NotImplemented
 
     def __lt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s < %s" % (self, other))
+            return NotImplemented
         if isinstance(other, NumberSymbol):
             return other.__ge__(self)
         expr = self
@@ -1788,13 +1794,13 @@ def __lt__(self, other):
                     self._as_mpf_val(other._prec), other._mpf_)))
         elif other.is_number and other.is_real:
             expr, other = Integer(self.p), self.q*other
-        return Expr.__lt__(expr, other)
+        return NotImplemented
 
     def __le__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            raise TypeError("Invalid comparison %s <= %s" % (self, other))
+            return NotImplemented
         expr = self
         if isinstance(other, NumberSymbol):
             return other.__gt__(self)
@@ -1806,7 +1812,7 @@ def __le__(self, other):
                     self._as_mpf_val(other._prec), other._mpf_)))
         elif other.is_number and other.is_real:
             expr, other = Integer(self.p), self.q*other
-        return Expr.__le__(expr, other)
+        return NotImplemented
 
     def __hash__(self):
         return super(Rational, self).__hash__()
