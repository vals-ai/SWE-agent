diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..0d3d0a0d9 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -19,6 +19,7 @@ from inspect import signature
 
 import numpy as np
 
+from ..utils import check_random_state
 from ..utils import indexable, check_random_state, safe_indexing
 from ..utils.validation import _num_samples, column_or_1d
 from ..utils.validation import check_array
@@ -620,7 +621,7 @@ class StratifiedKFold(_BaseKFold):
         super().__init__(n_splits, shuffle, random_state)
 
     def _make_test_folds(self, X, y=None):
-        rng = self.random_state
+        rng = check_random_state(self.random_state)
         y = np.asarray(y)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
@@ -651,23 +652,24 @@ class StratifiedKFold(_BaseKFold):
         # NOTE: Passing the data corresponding to ith class say X[y==class_i]
         # will break when the data is not 100% stratifiable for all classes.
         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
-
-        test_folds = np.zeros(n_samples, dtype=np.int)
-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
-                # the test split can be too big because we used
-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
-                # stratifiable for all the classes
-                # (we use a warning instead of raising an exception)
-                # If this is the case, let's trim it:
-                test_split = test_split[test_split < len(cls_test_folds)]
-                cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+        test_folds = np.zeros(n_samples, dtype=np.int_)
+        for i, (cls, count) in enumerate(zip(unique_y, y_counts)):
+            # Find indices for current class
+            cls_indices = np.where(y == cls)[0]
+            # Shuffle class indices if needed
+            if self.shuffle:
+                rng.shuffle(cls_indices)
+            # Split class indices into folds
+            # Here we pass an empty array or range to KFold,
+            # otherwise it may issue non-contiguous array warning
+            kf = KFold(self.n_splits)
+            for fold_k, (_, test_indices_in_cls) in enumerate(
+                kf.split(np.arange(count))
+            ):
+                # Select actual test indices from potentially shuffled cls_indices
+                actual_test_indices = cls_indices[test_indices_in_cls]
+                # Assign fold number
+                test_folds[actual_test_indices] = fold_k
 
         return test_folds
 
