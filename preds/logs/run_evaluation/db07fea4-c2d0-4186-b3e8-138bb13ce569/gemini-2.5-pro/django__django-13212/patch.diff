diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..1fe215ab22 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):
 
     def __call__(self, value):
         if not isinstance(value, str):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # Then check full URL
         try:
@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):
                 try:
                     scheme, netloc, path, query, fragment = urlsplit(value)
                 except ValueError:  # for example, "Invalid IPv6 URL"
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
                 try:
                     netloc = punycode(netloc)  # IDN -> ACE
                 except UnicodeError:  # invalid domain part
@@ -132,14 +132,17 @@ class URLValidator(RegexValidator):
                 try:
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
-                    raise ValidationError(self.message, code=self.code)
+                    # Here, the value that failed validation is potential_ip, not the original value.
+                    # However, the original request is about providing the *input* value.
+                    # Let's stick to providing the original 'value' for consistency.
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
 
         # The maximum length of a full host name is 253 characters per RFC 1034
         # section 3.1. It's defined to be 255 bytes or less, but this includes
         # one byte for the length of the name and one byte for the trailing dot
         # that's used to indicate absolute names in DNS.
         if len(urlsplit(value).netloc) > 253:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
 
 integer_validator = RegexValidator(
@@ -208,12 +211,12 @@ class EmailValidator:
 
     def __call__(self, value):
         if not value or '@' not in value:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         user_part, domain_part = value.rsplit('@', 1)
 
         if not self.user_regex.match(user_part):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
         if (domain_part not in self.domain_allowlist and
                 not self.validate_domain_part(domain_part)):
@@ -225,7 +228,7 @@ class EmailValidator:
             else:
                 if self.validate_domain_part(domain_part):
                     return
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def validate_domain_part(self, domain_part):
         if self.domain_regex.match(domain_part):
@@ -272,12 +275,12 @@ def validate_ipv4_address(value):
     try:
         ipaddress.IPv4Address(value)
     except ValueError:
-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')
+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})
 
 
 def validate_ipv6_address(value):
     if not is_valid_ipv6_address(value):
-        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')
+        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})
 
 
 def validate_ipv46_address(value):
@@ -287,7 +290,7 @@ def validate_ipv46_address(value):
         try:
             validate_ipv6_address(value)
         except ValidationError:
-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')
+            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})
 
 
 ip_address_validator_map = {
@@ -438,7 +441,7 @@ class DecimalValidator:
     def __call__(self, value):
         digit_tuple, exponent = value.as_tuple()[1:]
         if exponent in {'F', 'n', 'N'}:
-            raise ValidationError(self.messages['invalid'])
+            raise ValidationError(self.messages['invalid'], params={'value': value})
         if exponent >= 0:
             # A positive exponent adds that many trailing zeros.
             digits = len(digit_tuple) + exponent
@@ -460,20 +463,20 @@ class DecimalValidator:
             raise ValidationError(
                 self.messages['max_digits'],
                 code='max_digits',
-                params={'max': self.max_digits},
+                params={'max': self.max_digits, 'value': value},
             )
         if self.decimal_places is not None and decimals > self.decimal_places:
             raise ValidationError(
                 self.messages['max_decimal_places'],
                 code='max_decimal_places',
-                params={'max': self.decimal_places},
+                params={'max': self.decimal_places, 'value': value},
             )
         if (self.max_digits is not None and self.decimal_places is not None and
                 whole_digits > (self.max_digits - self.decimal_places)):
             raise ValidationError(
                 self.messages['max_whole_digits'],
                 code='max_whole_digits',
-                params={'max': (self.max_digits - self.decimal_places)},
+                params={'max': (self.max_digits - self.decimal_places), 'value': value},
             )
 
     def __eq__(self, other):
@@ -509,7 +512,8 @@ class FileExtensionValidator:
                 code=self.code,
                 params={
                     'extension': extension,
-                    'allowed_extensions': ', '.join(self.allowed_extensions)
+                    'allowed_extensions': ', '.join(self.allowed_extensions),
+                    'value': value,
                 }
             )
 
@@ -550,7 +554,7 @@ class ProhibitNullCharactersValidator:
 
     def __call__(self, value):
         if '\x00' in str(value):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
 
     def __eq__(self, other):
         return (
diff --git a/tests/validators/tests.py b/tests/validators/tests.py
index d6d013c026..02338c1e19 100644
--- a/tests/validators/tests.py
+++ b/tests/validators/tests.py
@@ -354,6 +354,65 @@ class TestValidators(SimpleTestCase):
         with self.assertRaisesMessage(ValidationError, '"djangoproject.com" has more than 16 characters.'):
             v('djangoproject.com')
 
+    def test_validator_error_params_include_value(self):
+        # Imports needed within the test if not already at top level
+        from decimal import Decimal
+        from django.core.files.base import ContentFile
+        from django.utils.translation import gettext_lazy as _
+        import types # Already imported at top level
+
+        invalid_value = 'invalid'
+        # Use a value that FileExtensionValidator can actually receive
+        file_value = ContentFile('content', name='file.jpg')
+        null_char_value = 'abc\x00def'
+
+        validators_data = [
+            # (validator_instance_or_func, value_to_validate, expected_message_format_or_None)
+            # RegexValidator
+            (RegexValidator(r'^[0-9]+$', message='Value "%(value)s" is not numeric.'), invalid_value, 'Value "%(value)s" is not numeric.'),
+            # EmailValidator
+            (EmailValidator(message='Value "%(value)s" is not a valid email.'), invalid_value, 'Value "%(value)s" is not a valid email.'),
+            # URLValidator
+            (URLValidator(message='Value "%(value)s" is not a valid URL.'), invalid_value, 'Value "%(value)s" is not a valid URL.'),
+            # MaxValueValidator
+            (MaxValueValidator(10, message='Value "%(value)s" is too large.'), 11, 'Value "%(value)s" is too large.'),
+            # MinValueValidator
+            (MinValueValidator(10, message='Value "%(value)s" is too small.'), 9, 'Value "%(value)s" is too small.'),
+            # MaxLengthValidator
+            (MaxLengthValidator(5, message='Value "%(value)s" is too long.'), '123456', 'Value "%(value)s" is too long.'),
+            # MinLengthValidator
+            (MinLengthValidator(5, message='Value "%(value)s" is too short.'), '1234', 'Value "%(value)s" is too short.'),
+            # DecimalValidator
+            (DecimalValidator(max_digits=2, decimal_places=1), Decimal('9.99'), _('Ensure that there are no more than %(max)s digits in total.')), # Check default message for max_digits
+            # FileExtensionValidator
+            (FileExtensionValidator(['txt'], message='Value "%(value)s" has wrong extension.'), file_value, 'Value "%(value)s" has wrong extension.'),
+            # ProhibitNullCharactersValidator
+            (ProhibitNullCharactersValidator(message='Value "%(value)s" contains null char.'), null_char_value, 'Value "%(value)s" contains null char.'),
+            # validate_ipv4_address (function validator)
+            (validate_ipv4_address, invalid_value, _('Enter a valid IPv4 address.')),
+            # validate_ipv6_address (function validator)
+            (validate_ipv6_address, invalid_value, _('Enter a valid IPv6 address.')),
+            # validate_ipv46_address (function validator)
+            (validate_ipv46_address, invalid_value, _('Enter a valid IPv4 or IPv6 address.')),
+        ]
+
+        for validator, value, message_format in validators_data:
+            name = validator.__name__ if isinstance(validator, types.FunctionType) else validator.__class__.__name__
+            with self.subTest(name, value=value):
+                with self.assertRaises(ValidationError) as cm:
+                    validator(value)
+
+                e = cm.exception
+                # Check if params contains 'value' and it's the correct input value
+                self.assertIn('value', e.params, f"'value' not in params for {name}")
+                self.assertEqual(e.params['value'], value, f"e.params['value'] incorrect for {name}")
+
+                # Check if the message can be rendered correctly or matches the expected default
+                if message_format:
+                    # For lazy translation objects, compare string representation
+                    expected_message = str(message_format % e.params)
+                    self.assertIn(expected_message, e.messages)
+
 
 class TestValidatorEquality(TestCase):
     """
