diff --git a/bug_app/__init__.py b/bug_app/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/bug_app/__init__.py
@@ -0,0 +1 @@
+
diff --git a/bug_app/migrations/0001_initial.py b/bug_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..fc1e68c817
--- /dev/null
+++ b/bug_app/migrations/0001_initial.py
@@ -0,0 +1,44 @@
+# Generated by Django 4.1.dev20211208193303 on 2025-04-28 22:05
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Baz',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Qux',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('bazes', models.ManyToManyField(related_name='quxes', to='bug_app.Baz')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Foo',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('qux', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foos', to='bug_app.qux')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Bar',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('another_foo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_bars', to='bug_app.foo')),
+                ('baz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bars', to='bug_app.baz')),
+                ('foo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bars', to='bug_app.foo')),
+            ],
+        ),
+    ]
diff --git a/bug_app/migrations/__init__.py b/bug_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bug_app/models.py b/bug_app/models.py
new file mode 100644
index 0000000000..52334ba469
--- /dev/null
+++ b/bug_app/models.py
@@ -0,0 +1,16 @@
+
+from django.db import models
+
+class Foo(models.Model):
+    qux = models.ForeignKey("bug_app.Qux", on_delete=models.CASCADE, related_name="foos")
+
+class Bar(models.Model):
+    foo = models.ForeignKey("bug_app.Foo", on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey("bug_app.Foo", on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey("bug_app.Baz", on_delete=models.CASCADE, related_name="bars")
+
+class Baz(models.Model):
+    pass
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField("bug_app.Baz", related_name="quxes")
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..555cab4914
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..2435db129f 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -604,7 +604,8 @@ class Query(BaseExpression):
             # If the left side of the join was already relabeled, use the
             # updated alias.
             join = join.relabeled_clone(change_map)
-            new_alias = self.join(join, reuse=reuse)
+            new_alias = self.join(join, reuse=reuse, change_map=change_map)
+
             if join.join_type == INNER:
                 rhs_votes.add(new_alias)
             # We can't reuse the same join again in the query. If we have two
@@ -948,7 +949,7 @@ class Query(BaseExpression):
         """
         return len([1 for count in self.alias_refcount.values() if count])
 
-    def join(self, join, reuse=None):
+    def join(self, join, reuse=None, change_map=None):
         """
         Return an alias for the 'join', either reusing an existing alias for
         that join or creating a new one. 'join' is either a base_table_class or
@@ -976,7 +977,7 @@ class Query(BaseExpression):
             return reuse_alias
 
         # No reuse is possible, so we need a new alias.
-        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
+        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation, change_map=change_map)
         if join.join_type:
             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
                 join_type = LOUTER
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..abbab2bdc8
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,16 @@
+
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4af9ac3f0c
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+
+import os
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+import django
+django.setup()
+
+from django.db.models import Q
+from bug_app.models import Foo, Qux
+
+qux = Qux.objects.create()
+qs1 = qux.foos.all()
+qs2 = Foo.objects.filter(
+    Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())
+)
+
+# Works fine.
+print("Running qs2 | qs1")
+(qs2 | qs1).count() # Use count() to trigger the query execution
+print("qs2 | qs1 executed successfully")
+
+# AssertionError
+print("Running qs1 | qs2")
+(qs1 | qs2).count() # Use count() to trigger the query execution
+print("qs1 | qs2 executed successfully")
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..0875a0ae0a
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,12 @@
+
+
+SECRET_KEY = 'fake-key'
+INSTALLED_APPS = [
+    'bug_app',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
\ No newline at end of file
