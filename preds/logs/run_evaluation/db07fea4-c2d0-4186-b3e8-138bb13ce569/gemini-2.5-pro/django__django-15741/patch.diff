diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..7b6edfe7d1 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -105,6 +105,7 @@ def get_format(format_type, lang=None, use_l10n=None):
 
     If use_l10n is provided and is not None, it forces the value to
     be localized (or not), overriding the value of settings.USE_L10N.
+    format_type = str(format_type)
     """
     if use_l10n is None:
         try:
@@ -125,7 +126,7 @@ def get_format(format_type, lang=None, use_l10n=None):
     val = None
     if use_l10n:
         for module in get_format_modules(lang):
-            val = getattr(module, format_type, None)
+            val = getattr(module, str(format_type), None)
             if val is not None:
                 break
     if val is None:
diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py
index 0093181f64..8c49bb73da 100644
--- a/tests/i18n/tests.py
+++ b/tests/i18n/tests.py
@@ -1680,6 +1680,25 @@ class FormattingTests(SimpleTestCase):
                         % (language_code, format_name),
                     )
 
+    def test_date_filter_lazy_format(self):
+        # Regression test for #21882
+        # Ensure date filter works with lazy format strings.
+        from django.utils import translation
+        from django.utils.translation import gettext_lazy
+        from datetime import date
+
+        d = date(2023, 10, 26)
+        lazy_format = gettext_lazy('Y-m-d')
+        # Use a language where DATE_FORMAT is different from 'Y-m-d'
+        # to ensure get_format is actually used. 'fr' uses 'd/m/Y'.
+        with translation.override('fr'):
+            rendered = Template('{% load i18n %}{{ d|date:lazy_format }}').render(Context({'d': d, 'lazy_format': lazy_format}))
+            self.assertEqual(rendered, '2023-10-26')
+        # Also test with a non-predefined format
+        lazy_format_custom = gettext_lazy('j F Y')
+        with translation.override('fr'):
+            rendered = Template('{% load i18n %}{{ d|date:lazy_format_custom }}').render(Context({'d': d, 'lazy_format_custom': lazy_format_custom}))
+            self.assertEqual(rendered, '26 octobre 2023')
 
 class MiscTests(SimpleTestCase):
     rf = RequestFactory()
@@ -1977,7 +1996,6 @@ class MiscTests(SimpleTestCase):
         for path, language in tests:
             with self.subTest(path=path):
                 self.assertEqual(g(path), language)
-
     def test_get_language_from_path_null(self):
         g = trans_null.get_language_from_path
         self.assertIsNone(g("/pl/"))
