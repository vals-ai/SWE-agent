diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index b6594b043b..7432233e97 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -292,7 +292,12 @@ class TruncDate(TruncBase):
     def as_sql(self, compiler, connection):
         # Cast to date rather than truncate to date.
         lhs, lhs_params = compiler.compile(self.lhs)
-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None
+        if self.tzinfo is not None:
+            tzname = self.get_tzname()
+        elif settings.USE_TZ:
+            tzname = timezone.get_current_timezone_name()
+        else:
+            tzname = None
         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)
         return sql, lhs_params
 
@@ -305,7 +310,12 @@ class TruncTime(TruncBase):
     def as_sql(self, compiler, connection):
         # Cast to time rather than truncate to time.
         lhs, lhs_params = compiler.compile(self.lhs)
-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None
+        if self.tzinfo is not None:
+            tzname = self.get_tzname()
+        elif settings.USE_TZ:
+            tzname = timezone.get_current_timezone_name()
+        else:
+            tzname = None
         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)
         return sql, lhs_params
 
diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py
index f8ebb81cb5..4e2f08d42c 100644
--- a/tests/db_functions/datetime/test_extract_trunc.py
+++ b/tests/db_functions/datetime/test_extract_trunc.py
@@ -1,4 +1,4 @@
-from datetime import datetime, timedelta, timezone as datetime_timezone
+from datetime import date, datetime, time, timedelta, timezone as datetime_timezone
 
 import pytz
 
@@ -1224,5 +1224,42 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):
         test_datetime_kind('minute')
         test_datetime_kind('second')
 
+
+
+
+    def test_trunc_date_time_with_tzinfo(self):
+        """
+        TruncDate and TruncTime should respect the tzinfo parameter.
+        """
+        # This datetime is 2023-01-01 02:30:00 UTC
+        # which is 2022-12-31 21:30:00 in America/New_York (UTC-5)
+        start_datetime = datetime(2023, 1, 1, 2, 30, 0, tzinfo=timezone.utc)
+        self.create_model(start_datetime, start_datetime)
+        ny_tz = pytz.timezone("America/New_York")
+
+        # Truncate to date in New York timezone
+        model_trunc_date = DTModel.objects.annotate(
+            start_date_ny=TruncDate('start_datetime', tzinfo=ny_tz)
+        ).get()
+        # Expected date is 2022-12-31 in New York
+        self.assertEqual(model_trunc_date.start_date_ny, date(2022, 12, 31))
+
+        # Truncate to time in New York timezone
+        model_trunc_time = DTModel.objects.annotate(
+            start_time_ny=TruncTime('start_datetime', tzinfo=ny_tz)
+        ).get()
+        # Expected time is 21:30:00 in New York
+        self.assertEqual(model_trunc_time.start_time_ny, time(21, 30, 0))
+
+        # Test without explicit tzinfo (should use current timezone - UTC in tests)
+        model_trunc_date_utc = DTModel.objects.annotate(
+            start_date_utc=TruncDate('start_datetime')
+        ).get()
+        self.assertEqual(model_trunc_date_utc.start_date_utc, date(2023, 1, 1))
+
+        model_trunc_time_utc = DTModel.objects.annotate(
+            start_time_utc=TruncTime('start_datetime')
+        ).get()
+        self.assertEqual(model_trunc_time_utc.start_time_utc, time(2, 30, 0))
         qs = DTModel.objects.filter(start_datetime__date=Trunc('start_datetime', 'day', output_field=DateField()))
         self.assertEqual(qs.count(), 2)
