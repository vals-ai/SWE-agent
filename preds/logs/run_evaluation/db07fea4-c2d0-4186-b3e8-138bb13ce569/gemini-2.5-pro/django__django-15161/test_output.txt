+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/expressions.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 96e7ff5e9ff6362d9a886545869ce4496ca4b0fb
Author: Keryn Knight <keryn@kerynknight.com>
Date:   Fri Jan 7 09:29:22 2022 +0000

    Avoided isinstance(â€¦, Variable) calls in FilterExpression.resolve().
    
    By determining the variable type within __init__() instead of resolve()
    we can skip an isinstance() check at template runtime. Templates are
    executed in production more often than the parse trees themselves,
    assuming the cached Loader is used.

diff --git a/django/template/base.py b/django/template/base.py
index 0dec9940ab..078be8b383 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -694,9 +694,10 @@ class FilterExpression:
 
         self.filters = filters
         self.var = var_obj
+        self.is_var = isinstance(var_obj, Variable)
 
     def resolve(self, context, ignore_failures=False):
-        if isinstance(self.var, Variable):
+        if self.is_var:
             try:
                 obj = self.var.resolve(context)
             except VariableDoesNotExist:
diff --git a/django/templatetags/i18n.py b/django/templatetags/i18n.py
index 8c123c7dd5..607ceb6aea 100644
--- a/django/templatetags/i18n.py
+++ b/django/templatetags/i18n.py
@@ -77,6 +77,7 @@ class TranslateNode(Node):
         self.message_context = message_context
         self.filter_expression = filter_expression
         if isinstance(self.filter_expression.var, str):
+            self.filter_expression.is_var = True
             self.filter_expression.var = Variable("'%s'" %
                                                   self.filter_expression.var)
 
+ git show
+ git -c core.fileMode=false diff 96e7ff5e9ff6362d9a886545869ce4496ca4b0fb
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..958612e29f 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -728,7 +728,12 @@ class Func(SQLiteNumericMixin, Expression):
         copy = super().copy()
         copy.source_expressions = self.source_expressions[:]
         copy.extra = self.extra.copy()
-        return copy
+    def deconstruct(self):
+        path = 'django.db.models.Func'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
+
 
 
 class Value(SQLiteNumericMixin, Expression):
@@ -806,6 +811,12 @@ class Value(SQLiteNumericMixin, Expression):
     def empty_result_set_value(self):
         return self.value
 
+    def deconstruct(self):
+        path = 'django.db.models.Value'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
+
 
 class RawSQL(Expression):
     def __init__(self, sql, params, output_field=None):
@@ -983,6 +994,10 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
 
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
+    def deconstruct(self):
+        path = 'django.db.models.ExpressionWrapper'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class When(Expression):
@@ -1051,6 +1066,11 @@ class When(Expression):
             cols.extend(source.get_group_by_cols())
         return cols
 
+    def deconstruct(self):
+        path = 'django.db.models.When'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
 
 class Case(SQLiteNumericMixin, Expression):
     """
@@ -1131,6 +1151,10 @@ class Case(SQLiteNumericMixin, Expression):
         if not self.cases:
             return self.default.get_group_by_cols(alias)
         return super().get_group_by_cols(alias)
+    def deconstruct(self):
+        path = 'django.db.models.Case'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class Subquery(BaseExpression, Combinable):
@@ -1187,8 +1211,15 @@ class Subquery(BaseExpression, Combinable):
         # references are not grouped against as well.
         if alias:
             return [Ref(alias, self)]
+
         return self.query.get_group_by_cols()
 
+    def deconstruct(self):
+        path = 'django.db.models.Subquery'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
+
 
 class Exists(Subquery):
     template = 'EXISTS(%(subquery)s)'
@@ -1305,6 +1336,10 @@ class OrderBy(Expression):
 
     def desc(self):
         self.descending = True
+    def deconstruct(self):
+        path = 'django.db.models.OrderBy'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class Window(SQLiteNumericMixin, Expression):
@@ -1411,6 +1446,11 @@ class Window(SQLiteNumericMixin, Expression):
     def get_group_by_cols(self, alias=None):
         return []
 
+    def deconstruct(self):
+        path = 'django.db.models.Window'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
 
 class WindowFrame(Expression):
     """
@@ -1469,6 +1509,10 @@ class WindowFrame(Expression):
 
     def window_frame_start_end(self, connection, start, end):
         raise NotImplementedError('Subclasses must implement window_frame_start_end().')
+    def deconstruct(self):
+        path = 'django.db.models.WindowFrame'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class RowRange(WindowFrame):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220107092922) (3.8.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220107092922) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220107092922) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220107092922-0.editable-py3-none-any.whl size=26960 sha256=1eea7edecb521d07e8676daa99c66caf8a582c1996031d74dd00524534122a91
  Stored in directory: /tmp/pip-ephem-wheel-cache-bxejfkwi/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220107092922
    Uninstalling Django-4.1.dev20220107092922:
      Successfully uninstalled Django-4.1.dev20220107092922
Successfully installed Django-4.1.dev20220107092922
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 96e7ff5e9ff6362d9a886545869ce4496ca4b0fb tests/expressions/tests.py tests/migrations/test_writer.py
Updated 0 paths from 8dea06c482
+ git apply -v -
Checking patch tests/expressions/tests.py...
Checking patch tests/migrations/test_writer.py...
Applied patch tests/expressions/tests.py cleanly.
Applied patch tests/migrations/test_writer.py cleanly.
+ : '>>>>> Start Test Output'
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 expressions.tests migrations.test_writer
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application expressions
Importing application migrations
Found 214 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, expressions, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table expressions_manager
    Creating table expressions_employee
    Creating table expressions_remoteemployee
    Creating table expressions_company
    Creating table expressions_number
    Creating table expressions_ExPeRiMeNt
    Creating table expressions_result
    Creating table expressions_time
    Creating table expressions_simulationrun
    Creating table expressions_uuidpk
    Creating table expressions_uuid
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_aggregate_rawsql_annotation (expressions.tests.BasicExpressionsTests) ... ERROR
test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotate_values_count (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotate_values_filter (expressions.tests.BasicExpressionsTests) ... ok
test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotation_with_outerref (expressions.tests.BasicExpressionsTests) ... ok
test_annotations_within_subquery (expressions.tests.BasicExpressionsTests) ... ERROR
test_arithmetic (expressions.tests.BasicExpressionsTests) ... ok
test_boolean_expression_combined (expressions.tests.BasicExpressionsTests) ... ok
test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests) ... ok
test_boolean_expression_in_Q (expressions.tests.BasicExpressionsTests) ... ok
test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests) ... ok
test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests) ... ok
test_exists_in_filter (expressions.tests.BasicExpressionsTests) ... ok
test_explicit_output_field (expressions.tests.BasicExpressionsTests) ... ok
test_filter_inter_attribute (expressions.tests.BasicExpressionsTests) ... ok
test_filter_with_join (expressions.tests.BasicExpressionsTests) ... ok
test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests) ... ERROR
test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests) ... ERROR
test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests) ... ERROR
test_in_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests) ... ok
test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests) ... ok
test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests) ... ERROR
test_nested_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests) ... ok
test_new_object_create (expressions.tests.BasicExpressionsTests) ... ERROR
test_new_object_save (expressions.tests.BasicExpressionsTests) ... ERROR
test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests) ... ERROR
test_object_update (expressions.tests.BasicExpressionsTests) ... ok
test_object_update_fk (expressions.tests.BasicExpressionsTests) ... ok
test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests) ... ERROR
test_order_by_exists (expressions.tests.BasicExpressionsTests) ... ok
test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests) ... ok
test_order_of_operations (expressions.tests.BasicExpressionsTests) ... ok
test_outerref (expressions.tests.BasicExpressionsTests) ... ok
test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests) ... ok
test_outerref_with_operator (expressions.tests.BasicExpressionsTests) ... ok
test_parenthesis_priority (expressions.tests.BasicExpressionsTests) ... ok
test_pickle_expression (expressions.tests.BasicExpressionsTests) ... ok
test_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_eq (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests) ... ERROR
test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests) ... ERROR
test_subquery_in_filter (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests) ... ok
test_update (expressions.tests.BasicExpressionsTests) ... ok
test_update_inherited_field_value (expressions.tests.BasicExpressionsTests) ... ok
test_update_with_fk (expressions.tests.BasicExpressionsTests) ... ok
test_update_with_none (expressions.tests.BasicExpressionsTests) ... ok
test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_optimizations (expressions.tests.ExistsTests) ... ok
test_lefthand_addition (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_xor_not_supported (expressions.tests.ExpressionOperatorTests) ... skipped "Oracle doesn't support bitwise XOR."
test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_xor_right_null (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_division (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_modulo (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_modulo_null (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_power (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_addition (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_division (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_modulo (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests) ... ok
test_righthand_power (expressions.tests.ExpressionOperatorTests) ... ok
test_complex_expressions (expressions.tests.ExpressionsNumericTests)
Complex expressions of different connection types are possible. ... ok
test_decimal_expression (expressions.tests.ExpressionsNumericTests) ... ok
test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)
We can fill a value in all objects with an other value of the ... ok
test_filter_decimal_expression (expressions.tests.ExpressionsNumericTests) ... ok
test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)
We can filter for objects, where a value is not equals the value ... ok
test_increment_value (expressions.tests.ExpressionsNumericTests)
We can increment a value of all objects in a query set. ... ok
test_F_reuse (expressions.tests.ExpressionsTests) ... ok
test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)
Special characters (e.g. %, _ and \) stored in database are ... ok
test_patterns_escape (expressions.tests.ExpressionsTests)
Special characters (e.g. %, _ and \) stored in database are ... ok
test_date_case_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_date_comparison (expressions.tests.FTimeDeltaTests) ... ok
test_date_minus_duration (expressions.tests.FTimeDeltaTests) ... ok
test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_date_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_datetime_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests) ... ok
test_delta_add (expressions.tests.FTimeDeltaTests) ... ok
test_delta_subtract (expressions.tests.FTimeDeltaTests) ... ok
test_delta_update (expressions.tests.FTimeDeltaTests) ... ok
test_duration_expressions (expressions.tests.FTimeDeltaTests) ... ok
test_duration_with_datetime (expressions.tests.FTimeDeltaTests) ... ok
test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests) ... ok
test_durationfield_add (expressions.tests.FTimeDeltaTests) ... ok
test_durationfield_multiply_divide (expressions.tests.FTimeDeltaTests) ... ok
test_exclude (expressions.tests.FTimeDeltaTests) ... ok
test_invalid_operator (expressions.tests.FTimeDeltaTests) ... ok
test_mixed_comparisons1 (expressions.tests.FTimeDeltaTests) ... expected failure
test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests) ... ok
test_multiple_query_compilation (expressions.tests.FTimeDeltaTests) ... ok
test_negative_timedelta_update (expressions.tests.FTimeDeltaTests) ... ok
test_query_clone (expressions.tests.FTimeDeltaTests) ... ok
test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_time_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_month_aggregation (expressions.tests.FieldTransformTests) ... ERROR
test_multiple_transforms_in_values (expressions.tests.FieldTransformTests) ... ok
test_transform_in_values (expressions.tests.FieldTransformTests) ... ok
test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)
This tests that SQL injection isn't possible using compilation of ... ok
test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_compile_unresolved (expressions.tests.ValueTests) ... ok
test_deconstruct (expressions.tests.ValueTests) ... ok
test_deconstruct_output_field (expressions.tests.ValueTests) ... ok
test_equal (expressions.tests.ValueTests) ... ok
test_equal_output_field (expressions.tests.ValueTests) ... ok
test_hash (expressions.tests.ValueTests) ... ok
test_output_field_decimalfield (expressions.tests.ValueTests) ... ok
test_output_field_does_not_create_broken_validators (expressions.tests.ValueTests)
The output field for a given Value doesn't get cleaned & validated, ... ok
test_raise_empty_expressionlist (expressions.tests.ValueTests) ... ok
test_repr (expressions.tests.ValueTests) ... ok
test_resolve_output_field (expressions.tests.ValueTests) ... ok
test_resolve_output_field_failure (expressions.tests.ValueTests) ... ok
test_update_TimeField_using_Value (expressions.tests.ValueTests) ... ok
test_update_UUIDField_using_Value (expressions.tests.ValueTests) ... ok
test_and (expressions.tests.CombinableTests) ... ok
test_negation (expressions.tests.CombinableTests) ... ok
test_or (expressions.tests.CombinableTests) ... ok
test_reversed_and (expressions.tests.CombinableTests) ... ok
test_reversed_or (expressions.tests.CombinableTests) ... ok
test_resolve_output_field (expressions.tests.CombinedExpressionTests) ... ok
test_empty_group_by (expressions.tests.ExpressionWrapperTests) ... ok
test_non_empty_group_by (expressions.tests.ExpressionWrapperTests) ... ERROR
test_deconstruct (expressions.tests.FTests) ... ok
test_deepcopy (expressions.tests.FTests) ... ok
test_equal (expressions.tests.FTests) ... ok
test_hash (expressions.tests.FTests) ... ok
test_not_equal_Value (expressions.tests.FTests) ... ok
test_equal (expressions.tests.OrderByTests) ... ok
test_hash (expressions.tests.OrderByTests) ... ok
test_aggregates (expressions.tests.ReprTests) ... ok
test_distinct_aggregates (expressions.tests.ReprTests) ... ok
test_expressions (expressions.tests.ReprTests) ... ok
test_filtered_aggregates (expressions.tests.ReprTests) ... ok
test_functions (expressions.tests.ReprTests) ... ok
test_equal (expressions.tests.SimpleExpressionTests) ... ok
test_hash (expressions.tests.SimpleExpressionTests) ... ok
test_args_kwargs_signature (migrations.test_writer.OperationWriterTests) ... ok
test_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_empty_signature (migrations.test_writer.OperationWriterTests) ... ok
test_expand_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_kwargs_signature (migrations.test_writer.OperationWriterTests) ... ok
test_multiline_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_nested_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_custom_operation (migrations.test_writer.WriterTests) ... ok
test_deconstruct_class_arguments (migrations.test_writer.WriterTests) ... ok
test_migration_file_header_comments (migrations.test_writer.WriterTests)
Test comments at top of file. ... ok
test_migration_path (migrations.test_writer.WriterTests) ... ok
test_models_import_omitted (migrations.test_writer.WriterTests)
django.db.models shouldn't be imported if unused. ... ok
test_register_non_serializer (migrations.test_writer.WriterTests) ... ok
test_register_serializer (migrations.test_writer.WriterTests) ... ok
test_serialize_builtin_types (migrations.test_writer.WriterTests) ... ok
test_serialize_builtins (migrations.test_writer.WriterTests) ... ok
test_serialize_choices (migrations.test_writer.WriterTests) ... ok
test_serialize_class_based_validators (migrations.test_writer.WriterTests)
Ticket #22943: Test serialization of class-based validators, including ... ok
test_serialize_collections (migrations.test_writer.WriterTests) ... ok
test_serialize_compiled_regex (migrations.test_writer.WriterTests)
Make sure compiled regex can be serialized. ... ok
test_serialize_complex_func_index (migrations.test_writer.WriterTests) ... ok
test_serialize_constants (migrations.test_writer.WriterTests) ... ok
test_serialize_datetime (migrations.test_writer.WriterTests) ... ok
test_serialize_empty_nonempty_tuple (migrations.test_writer.WriterTests)
Ticket #22679: makemigrations generates invalid code for (an empty ... ok
test_serialize_enums (migrations.test_writer.WriterTests) ... ok
test_serialize_fields (migrations.test_writer.WriterTests) ... ok
test_serialize_frozensets (migrations.test_writer.WriterTests) ... ok
test_serialize_functions (migrations.test_writer.WriterTests) ... ok
test_serialize_functools_partial (migrations.test_writer.WriterTests) ... ok
test_serialize_functools_partialmethod (migrations.test_writer.WriterTests) ... ok
test_serialize_iterators (migrations.test_writer.WriterTests) ... ok
test_serialize_lazy_objects (migrations.test_writer.WriterTests) ... ok
test_serialize_local_function_reference (migrations.test_writer.WriterTests)
A reference in a local scope can't be serialized. ... ok
test_serialize_managers (migrations.test_writer.WriterTests) ... ok
test_serialize_multiline_strings (migrations.test_writer.WriterTests) ... ok
test_serialize_nested_class (migrations.test_writer.WriterTests) ... ok
test_serialize_numbers (migrations.test_writer.WriterTests) ... ok
test_serialize_path_like (migrations.test_writer.WriterTests) ... ok
test_serialize_pathlib (migrations.test_writer.WriterTests) ... ok
test_serialize_range (migrations.test_writer.WriterTests) ... ok
test_serialize_set (migrations.test_writer.WriterTests) ... ok
test_serialize_settings (migrations.test_writer.WriterTests) ... ok
test_serialize_strings (migrations.test_writer.WriterTests) ... ok
test_serialize_timedelta (migrations.test_writer.WriterTests) ... ok
test_serialize_type_model (migrations.test_writer.WriterTests) ... ok
test_serialize_type_none (migrations.test_writer.WriterTests) ... ok
test_serialize_unbound_method_reference (migrations.test_writer.WriterTests)
An unbound method used within a class body can be serialized. ... ok
test_serialize_uuid (migrations.test_writer.WriterTests) ... ok
test_simple_migration (migrations.test_writer.WriterTests)
Tests serializing a simple migration. ... ok
test_sorted_imports (migrations.test_writer.WriterTests)
#24155 - Tests ordering of imports. ... ok

======================================================================
ERROR: test_aggregate_rawsql_annotation (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1322, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/expressions/tests.py", line 676, in test_aggregate_rawsql_annotation
    aggregate = Company.objects.annotate(
  File "/testbed/django/db/models/query.py", line 394, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 655, in test_aggregate_subquery_annotation
    aggregate = Company.objects.annotate(
  File "/testbed/django/db/models/query.py", line 394, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 61, in test_annotate_values_aggregate
    companies = Company.objects.annotate(
  File "/testbed/django/db/models/query.py", line 394, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_annotate_values_count (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 82, in test_annotate_values_count
    self.assertEqual(companies.count(), 3)
  File "/testbed/django/db/models/query.py", line 418, in count
    return self.query.get_count(using=self.db)
  File "/testbed/django/db/models/sql/query.py", line 518, in get_count
    obj.add_annotation(Count('*'), alias='__count', is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 735, in test_annotation_with_nested_outerref
    inner = Employee.objects.annotate(
  File "/testbed/django/db/models/query.py", line 979, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 997, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 1004, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1395, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1416, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/testbed/django/db/models/sql/query.py", line 1300, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1094, in resolve_lookup_value
    value = value.resolve_expression(
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 608, in test_annotations_within_subquery
    inner = Company.objects.filter(
  File "/testbed/django/db/models/query.py", line 1127, in annotate
    return self._annotate(args, kwargs, select=True)
  File "/testbed/django/db/models/query.py", line 1166, in _annotate
    clone.query.add_annotation(
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1322, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/expressions/tests.py", line 87, in test_filtering_on_annotate_that_uses_q
    Company.objects.annotate(
  File "/testbed/django/db/models/query.py", line 418, in count
    return self.query.get_count(using=self.db)
  File "/testbed/django/db/models/sql/query.py", line 518, in get_count
    obj.add_annotation(Count('*'), alias='__count', is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 95, in test_filtering_on_q_that_is_boolean
    Company.objects.filter(
  File "/testbed/django/db/models/query.py", line 418, in count
    return self.query.get_count(using=self.db)
  File "/testbed/django/db/models/sql/query.py", line 518, in get_count
    obj.add_annotation(Count('*'), alias='__count', is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 103, in test_filtering_on_rawsql_that_is_boolean
    Company.objects.filter(
  File "/testbed/django/db/models/query.py", line 418, in count
    return self.query.get_count(using=self.db)
  File "/testbed/django/db/models/sql/query.py", line 518, in get_count
    obj.add_annotation(Count('*'), alias='__count', is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 708, in test_nested_outerref_with_function
    inner = Employee.objects.filter(
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 979, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 997, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 1004, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1395, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1416, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/testbed/django/db/models/sql/query.py", line 1300, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1094, in resolve_lookup_value
    value = value.resolve_expression(
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_new_object_create (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 288, in test_new_object_create
    test_co = Company.objects.create(name=Lower(Value('UPPER')), num_employees=32, num_chairs=1, ceo=self.max)
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 459, in create
    obj.save(force_insert=True, using=self.db)
  File "/testbed/django/db/models/base.py", line 762, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/testbed/django/db/models/base.py", line 799, in save_base
    updated = self._save_table(
  File "/testbed/django/db/models/base.py", line 904, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File "/testbed/django/db/models/base.py", line 942, in _do_insert
    return manager._insert(
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1306, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/testbed/django/db/models/sql/compiler.py", line 1449, in execute_sql
    for sql, params in self.as_sql():
  File "/testbed/django/db/models/sql/compiler.py", line 1391, in as_sql
    value_rows = [
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1313, in prepare_value
    value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_new_object_save (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 283, in test_new_object_save
    test_co.save()
  File "/testbed/django/db/models/base.py", line 762, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/testbed/django/db/models/base.py", line 799, in save_base
    updated = self._save_table(
  File "/testbed/django/db/models/base.py", line 904, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File "/testbed/django/db/models/base.py", line 942, in _do_insert
    return manager._insert(
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1306, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/testbed/django/db/models/sql/compiler.py", line 1449, in execute_sql
    for sql, params in self.as_sql():
  File "/testbed/django/db/models/sql/compiler.py", line 1391, in as_sql
    value_rows = [
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1313, in prepare_value
    value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 296, in test_object_create_with_aggregate
    Company.objects.create(
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 459, in create
    obj.save(force_insert=True, using=self.db)
  File "/testbed/django/db/models/base.py", line 762, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/testbed/django/db/models/base.py", line 799, in save_base
    updated = self._save_table(
  File "/testbed/django/db/models/base.py", line 904, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File "/testbed/django/db/models/base.py", line 942, in _do_insert
    return manager._insert(
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1306, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/testbed/django/db/models/sql/compiler.py", line 1449, in execute_sql
    for sql, params in self.as_sql():
  File "/testbed/django/db/models/sql/compiler.py", line 1391, in as_sql
    value_rows = [
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1313, in prepare_value
    value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 343, in test_object_update_unsaved_objects
    acme.save()
  File "/testbed/django/db/models/base.py", line 762, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/testbed/django/db/models/base.py", line 799, in save_base
    updated = self._save_table(
  File "/testbed/django/db/models/base.py", line 904, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File "/testbed/django/db/models/base.py", line 942, in _do_insert
    return manager._insert(
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1306, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/testbed/django/db/models/sql/compiler.py", line 1449, in execute_sql
    for sql, params in self.as_sql():
  File "/testbed/django/db/models/sql/compiler.py", line 1391, in as_sql
    value_rows = [
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1392, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/testbed/django/db/models/sql/compiler.py", line 1313, in prepare_value
    value = value.resolve_expression(self.query, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 631, in test_subquery_filter_by_aggregate
    Employee.objects.filter(
  File "/testbed/django/db/models/query.py", line 1127, in annotate
    return self._annotate(args, kwargs, select=True)
  File "/testbed/django/db/models/query.py", line 1166, in _annotate
    clone.query.add_annotation(
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 777, in test_subquery_group_by_outerref_in_filter
    inner = Company.objects.annotate(
  File "/testbed/django/db/models/query.py", line 1127, in annotate
    return self._annotate(args, kwargs, select=True)
  File "/testbed/django/db/models/query.py", line 1166, in _annotate
    clone.query.add_annotation(
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_month_aggregation (expressions.tests.FieldTransformTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1917, in test_month_aggregation
    Experiment.objects.aggregate(month_count=Count('assigned__month')),
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 394, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1037, in add_annotation
    annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
  File "/testbed/django/db/models/aggregates.py", line 52, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 695, in resolve_expression
    c.is_summary = summarize
AttributeError: 'NoneType' object has no attribute 'is_summary'

======================================================================
ERROR: test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 2060, in test_non_empty_group_by
    group_by_cols = expr.get_group_by_cols(alias=None)
  File "/testbed/django/db/models/expressions.py", line 986, in get_group_by_cols
    expression.output_field = self.output_field
AttributeError: 'NoneType' object has no attribute 'output_field'

----------------------------------------------------------------------
Ran 214 tests in 0.423s

FAILED (errors=18, skipped=1, expected failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ : '>>>>> End Test Output'
+ git checkout 96e7ff5e9ff6362d9a886545869ce4496ca4b0fb tests/expressions/tests.py tests/migrations/test_writer.py
Updated 2 paths from 8dea06c482
