diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..958612e29f 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -728,7 +728,12 @@ class Func(SQLiteNumericMixin, Expression):
         copy = super().copy()
         copy.source_expressions = self.source_expressions[:]
         copy.extra = self.extra.copy()
-        return copy
+    def deconstruct(self):
+        path = 'django.db.models.Func'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
+
 
 
 class Value(SQLiteNumericMixin, Expression):
@@ -806,6 +811,12 @@ class Value(SQLiteNumericMixin, Expression):
     def empty_result_set_value(self):
         return self.value
 
+    def deconstruct(self):
+        path = 'django.db.models.Value'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
+
 
 class RawSQL(Expression):
     def __init__(self, sql, params, output_field=None):
@@ -983,6 +994,10 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
 
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
+    def deconstruct(self):
+        path = 'django.db.models.ExpressionWrapper'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class When(Expression):
@@ -1051,6 +1066,11 @@ class When(Expression):
             cols.extend(source.get_group_by_cols())
         return cols
 
+    def deconstruct(self):
+        path = 'django.db.models.When'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
 
 class Case(SQLiteNumericMixin, Expression):
     """
@@ -1131,6 +1151,10 @@ class Case(SQLiteNumericMixin, Expression):
         if not self.cases:
             return self.default.get_group_by_cols(alias)
         return super().get_group_by_cols(alias)
+    def deconstruct(self):
+        path = 'django.db.models.Case'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class Subquery(BaseExpression, Combinable):
@@ -1187,8 +1211,15 @@ class Subquery(BaseExpression, Combinable):
         # references are not grouped against as well.
         if alias:
             return [Ref(alias, self)]
+
         return self.query.get_group_by_cols()
 
+    def deconstruct(self):
+        path = 'django.db.models.Subquery'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
+
 
 class Exists(Subquery):
     template = 'EXISTS(%(subquery)s)'
@@ -1305,6 +1336,10 @@ class OrderBy(Expression):
 
     def desc(self):
         self.descending = True
+    def deconstruct(self):
+        path = 'django.db.models.OrderBy'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class Window(SQLiteNumericMixin, Expression):
@@ -1411,6 +1446,11 @@ class Window(SQLiteNumericMixin, Expression):
     def get_group_by_cols(self, alias=None):
         return []
 
+    def deconstruct(self):
+        path = 'django.db.models.Window'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
+
 
 class WindowFrame(Expression):
     """
@@ -1469,6 +1509,10 @@ class WindowFrame(Expression):
 
     def window_frame_start_end(self, connection, start, end):
         raise NotImplementedError('Subclasses must implement window_frame_start_end().')
+    def deconstruct(self):
+        path = 'django.db.models.WindowFrame'
+        args, kwargs = self._constructor_args
+        return path, args, kwargs
 
 
 class RowRange(WindowFrame):
