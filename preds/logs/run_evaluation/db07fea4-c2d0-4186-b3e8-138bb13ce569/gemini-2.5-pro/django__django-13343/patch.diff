diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..84a1621d2e 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -226,6 +226,7 @@ class FileField(Field):
 
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
+        self._storage_arg = storage
 
         self.storage = storage or default_storage
         if callable(self.storage):
@@ -278,8 +279,9 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+        storage = self._storage_arg
+        if storage is not None:
+            kwargs['storage'] = storage
         return name, path, args, kwargs
 
     def get_internal_type(self):
diff --git a/tests/model_fields/test_filefield.py b/tests/model_fields/test_filefield.py
index 51e29f6d25..285b3b11e2 100644
--- a/tests/model_fields/test_filefield.py
+++ b/tests/model_fields/test_filefield.py
@@ -1,3 +1,5 @@
+from django.core.files.storage import FileSystemStorage
+from django.test import SimpleTestCase
 import os
 import pickle
 import sys
@@ -166,3 +168,35 @@ class FileFieldTests(TestCase):
 
         document = MyDocument(myfile='test_file.py')
         self.assertEqual(document.myfile.field.model, MyDocument)
+
+
+# A dummy callable storage
+def get_test_storage():
+    return FileSystemStorage(location='/tmp/test_storage')
+
+
+class FileFieldDeconstructTests(SimpleTestCase):
+    def test_deconstruct_callable_storage(self):
+        """
+        FileField.deconstruct() preserves a callable storage.
+        """
+        field = models.FileField(storage=get_test_storage)
+        name, path, args, kwargs = field.deconstruct()
+        self.assertEqual(kwargs['storage'], get_test_storage)
+
+    def test_deconstruct_storage_instance(self):
+        """
+        FileField.deconstruct() preserves a storage instance.
+        """
+        storage_instance = FileSystemStorage(location='/tmp/test_storage_instance')
+        field = models.FileField(storage=storage_instance)
+        name, path, args, kwargs = field.deconstruct()
+        self.assertEqual(kwargs['storage'], storage_instance)
+
+    def test_deconstruct_default_storage(self):
+        """
+        FileField.deconstruct() does not include default storage.
+        """
+        field = models.FileField()
+        name, path, args, kwargs = field.deconstruct()
+        self.assertNotIn('storage', kwargs)
\ No newline at end of file
