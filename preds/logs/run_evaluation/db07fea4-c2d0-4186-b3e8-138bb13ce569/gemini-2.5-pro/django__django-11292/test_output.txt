+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/core/management/base.py
	modified:   tests/admin_scripts/tests.py
	modified:   tests/check_framework/tests.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit eb16c7260e573ec513d84cb586d96bdf508f3173
Author: Tobias Kunze <r@rixx.de>
Date:   Sat Apr 27 18:32:27 2019 +0200

    Fixed #20629 -- Rephrased custom user models admonition.

diff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt
index 5c01067a75..fd723cbb94 100644
--- a/docs/topics/auth/customizing.txt
+++ b/docs/topics/auth/customizing.txt
@@ -511,18 +511,17 @@ different user model.
 Specifying a custom user model
 ------------------------------
 
-.. admonition:: Model design considerations
-
-    Think carefully before handling information not directly related to
-    authentication in your custom user model.
-
-    It may be better to store app-specific user information in a model
-    that has a relation with the user model. That allows each app to specify
-    its own user data requirements without risking conflicts with other
-    apps. On the other hand, queries to retrieve this related information
-    will involve a database join, which may have an effect on performance.
-
-Django expects your custom user model to meet some minimum requirements.
+When you start your project with a custom user model, stop to consider if this
+is the right choice for your project.
+
+Keeping all user related information in one model removes the need for
+additional or more complex database queries to retrieve related models. On the
+other hand, it may be more suitable to store app-specific user information in a
+model that has a relation with your custom user model. That allows each app to
+specify its own user data requirements without potentially conflicting or
+breaking assumptions by other apps. It also means that you would keep your user
+model as simple as possible, focused on authentication, and following the
+minimum requirements Django expects custom user models to meet.
 
 If you use the default authentication backend, then your model must have a
 single unique field that can be used for identification purposes. This can
+ git -c core.fileMode=false diff eb16c7260e573ec513d84cb586d96bdf508f3173
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..006b02dc4f 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -95,7 +95,7 @@ class DjangoHelpFormatter(HelpFormatter):
     """
     show_last = {
         '--version', '--verbosity', '--traceback', '--settings', '--pythonpath',
-        '--no-color', '--force-color',
+        '--no-color', '--force-color', '--skip-checks',
     }
 
     def _reordered_actions(self, actions):
@@ -286,6 +286,9 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true', help='Skip system checks.'
+        )
         self.add_arguments(parser)
         return parser
 
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index d6ea84da7a..b4417829dd 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -33,6 +33,12 @@ from django.test import (
     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,
 )
 
+
+class CheckRequiredCommand(BaseCommand):
+    """A simple command that requires system checks."""
+    def handle(self, *args, **options):
+        self.stdout.write("CheckRequiredCommand executed.")
+
 custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')
 
 SYSTEM_CHECK_MSG = 'System check identified no issues'
@@ -272,6 +278,31 @@ class DjangoAdminDefaultSettings(AdminScriptTestCase):
         self.assertNoOutput(err)
         self.assertOutput(out, "EXECUTE: noargs_command")
 
+    @mock.patch('django.core.management.base.BaseCommand.check')
+    def test_skip_checks_flag(self, mocked_check):
+        """
+        The --skip-checks flag prevents checks from being run via call_command.
+        """
+        # Simulate a check failure
+        mocked_check.side_effect = CommandError
+
+        # Check that the command *runs checks* when skip_checks=False
+        # Use the settings context established by the test class setup
+        with self.settings(SETTINGS_MODULE='test_project.settings'):
+            with self.assertRaises(CommandError):
+                # Pass skip_checks=False explicitly
+                call_command(CheckRequiredCommand(), skip_checks=False)
+            # Ensure the mocked check() method was called
+            mocked_check.assert_called_once()
+
+            # Reset mock and check that the command *skips checks* by default
+            mocked_check.reset_mock()
+            mocked_check.side_effect = CommandError # Re-apply side effect
+            # Call without skip_checks relies on call_command's default True
+            call_command(CheckRequiredCommand())
+            # Ensure the mocked check() method was NOT called
+            mocked_check.assert_not_called()
+
 
 class DjangoAdminFullPathDefaultSettings(AdminScriptTestCase):
     """A series of tests for django-admin.py when using a settings.py file that
@@ -910,8 +941,8 @@ class ManageAlternateSettings(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', False), ('pythonpath', None), ('settings', "
-            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]"
+            "('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', "
+            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertNoOutput(err)
 
@@ -922,8 +953,8 @@ class ManageAlternateSettings(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', False), ('pythonpath', None), ('settings', None), "
-            "('traceback', False), ('verbosity', 1)]"
+            "('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', None), "
+            "('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertNoOutput(err)
 
@@ -934,8 +965,8 @@ class ManageAlternateSettings(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', True), ('pythonpath', None), ('settings', "
-            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]"
+            "('no_color', True), ('pythonpath', None), ('skip_checks', False), ('settings', "
+            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertNoOutput(err)
 
@@ -1612,8 +1643,8 @@ class CommandTypes(AdminScriptTestCase):
             "EXECUTE:BaseCommand labels=%s, "
             "options=[('force_color', False), ('no_color', False), "
             "('option_a', %s), ('option_b', %s), ('option_c', '3'), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]") % (labels, option_a, option_b)
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n") % (labels, option_a, option_b)
         self.assertNoOutput(err)
         self.assertOutput(out, expected_out)
 
@@ -1688,8 +1719,8 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', False), ('pythonpath', None), ('settings', None), "
-            "('traceback', False), ('verbosity', 1)]"
+            "('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', None), "
+            "('traceback', False), ('verbosity', 1)]\\n"
         )
 
     def test_noargs_with_args(self):
@@ -1707,8 +1738,8 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             ", options=[('force_color', False), ('no_color', False), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]"
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n"
         )
 
     def test_app_command_no_apps(self):
@@ -1726,15 +1757,15 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             ", options=[('force_color', False), ('no_color', False), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]"
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n"
         )
         self.assertOutput(out, "EXECUTE:AppCommand name=django.contrib.contenttypes, options=")
         self.assertOutput(
             out,
             ", options=[('force_color', False), ('no_color', False), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]"
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n"
         )
 
     def test_app_command_invalid_app_label(self):
@@ -1757,8 +1788,8 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE:LabelCommand label=testlabel, options=[('force_color', "
-            "False), ('no_color', False), ('pythonpath', None), ('settings', "
-            "None), ('traceback', False), ('verbosity', 1)]"
+            "False), ('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', "
+            "None), ('traceback', False), ('verbosity', 1)]\\n"
         )
 
     def test_label_command_no_label(self):
@@ -1775,14 +1806,14 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE:LabelCommand label=testlabel, options=[('force_color', "
-            "False), ('no_color', False), ('pythonpath', None), "
-            "('settings', None), ('traceback', False), ('verbosity', 1)]"
+            "False), ('no_color', False), ('pythonpath', None), ('skip_checks', False), "
+            "('settings', None), ('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertOutput(
             out,
             "EXECUTE:LabelCommand label=anotherlabel, options=[('force_color', "
-            "False), ('no_color', False), ('pythonpath', None), "
-            "('settings', None), ('traceback', False), ('verbosity', 1)]"
+            "False), ('no_color', False), ('pythonpath', None), ('skip_checks', False), "
+            "('settings', None), ('traceback', False), ('verbosity', 1)]\\n"
         )
 
 
@@ -1855,9 +1886,9 @@ class ArgumentOrder(AdminScriptTestCase):
             out,
             "EXECUTE:BaseCommand labels=('testlabel',), options=["
             "('force_color', False), ('no_color', False), ('option_a', 'x'), "
-            "('option_b', %s), ('option_c', '3'), ('pythonpath', None), "
+            "('option_b', %s), ('option_c', '3'), ('pythonpath', None), ('skip_checks', False), "
             "('settings', 'alternate_settings'), ('traceback', False), "
-            "('verbosity', 1)]" % option_b
+            "('verbosity', 1)]\\n" % option_b
         )
 
 
diff --git a/tests/check_framework/tests.py b/tests/check_framework/tests.py
index 061ead9d23..7b49361450 100644
--- a/tests/check_framework/tests.py
+++ b/tests/check_framework/tests.py
@@ -90,32 +90,38 @@ class MessageTests(SimpleTestCase):
         self.assertEqual(str(e), expected)
 
     def test_printing_field_error(self):
+        from .models import SimpleModel
         field = SimpleModel._meta.get_field('field')
         e = Error("Error", obj=field)
         expected = "check_framework.SimpleModel.field: Error"
         self.assertEqual(str(e), expected)
 
     def test_printing_model_error(self):
+        from .models import SimpleModel
         e = Error("Error", obj=SimpleModel)
         expected = "check_framework.SimpleModel: Error"
         self.assertEqual(str(e), expected)
 
     def test_printing_manager_error(self):
+        from .models import SimpleModel
         manager = SimpleModel.manager
         e = Error("Error", obj=manager)
         expected = "check_framework.SimpleModel.manager: Error"
         self.assertEqual(str(e), expected)
 
     def test_equal_to_self(self):
+        from .models import SimpleModel
         e = Error("Error", obj=SimpleModel)
         self.assertEqual(e, e)
 
     def test_equal_to_same_constructed_check(self):
+        from .models import SimpleModel
         e1 = Error("Error", obj=SimpleModel)
         e2 = Error("Error", obj=SimpleModel)
         self.assertEqual(e1, e2)
 
     def test_not_equal_to_different_constructed_check(self):
+        from .models import SimpleModel
         e1 = Error("Error", obj=SimpleModel)
         e2 = Error("Error2", obj=SimpleModel)
         self.assertNotEqual(e1, e2)
@@ -220,6 +226,7 @@ class CheckCommandTests(SimpleTestCase):
             call_command('check', fail_level='WARNING')
 
 
+
 def custom_error_system_check(app_configs, **kwargs):
     return [Error('Error', id='myerrorcheck.E001')]
 
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190430070916) (2024.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190430070916) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190430070916
    Uninstalling Django-3.0.dev20190430070916:
      Successfully uninstalled Django-3.0.dev20190430070916
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.0.dev20190430070916
+ git checkout eb16c7260e573ec513d84cb586d96bdf508f3173 tests/user_commands/tests.py
Updated 0 paths from 221e587f10
+ git apply -v -
Checking patch tests/user_commands/tests.py...
Applied patch tests/user_commands/tests.py cleanly.
+ : '>>>>> Start Test Output'
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 user_commands.tests
test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests) ... ok
test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests) ... ok
test_skip_checks (user_commands.tests.CommandRunTests) ... ok
test_call_command_no_checks (user_commands.tests.CommandTests) ... ok
test_call_command_option_parsing (user_commands.tests.CommandTests) ... ok
test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests) ... ok
test_call_command_unrecognized_option (user_commands.tests.CommandTests) ... ok
test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests) ... ok
test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests) ... ok
test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests) ... ok
test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests) ... ok
test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests) ... ok
test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests) ... ok
test_check_migrations (user_commands.tests.CommandTests) ... ok
test_command (user_commands.tests.CommandTests) ... ok
test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests) ... ok
test_command_style (user_commands.tests.CommandTests) ... ok
test_create_parser_kwargs (user_commands.tests.CommandTests)
BaseCommand.create_parser() passes kwargs to CommandParser. ... ok
test_discover_commands_in_eggs (user_commands.tests.CommandTests) ... ok
test_explode (user_commands.tests.CommandTests)
An unknown command raises CommandError ... ok
test_find_command_without_PATH (user_commands.tests.CommandTests) ... ok
test_language_preserved (user_commands.tests.CommandTests) ... ok
test_no_translations_deactivate_translations (user_commands.tests.CommandTests) ... ok
test_output_transaction (user_commands.tests.CommandTests) ... ok
test_subparser (user_commands.tests.CommandTests) ... ok
test_subparser_invalid_option (user_commands.tests.CommandTests) ... ok
test_system_exit (user_commands.tests.CommandTests)
Exception raised in a command should raise CommandError with ... ok
test_get_random_secret_key (user_commands.tests.UtilsTests) ... ok
test_is_ignored_path_false (user_commands.tests.UtilsTests) ... ok
test_is_ignored_path_true (user_commands.tests.UtilsTests) ... ok
test_no_existent_external_program (user_commands.tests.UtilsTests) ... ok
test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests) ... ok

----------------------------------------------------------------------
Ran 32 tests in 1.027s

OK
Testing against Django installed in '/testbed/django'
Importing application user_commands
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
+ : '>>>>> End Test Output'
+ git checkout eb16c7260e573ec513d84cb586d96bdf508f3173 tests/user_commands/tests.py
Updated 1 path from 221e587f10
