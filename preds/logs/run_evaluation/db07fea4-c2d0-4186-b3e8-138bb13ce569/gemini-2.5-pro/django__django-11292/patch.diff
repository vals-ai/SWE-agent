diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..006b02dc4f 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -95,7 +95,7 @@ class DjangoHelpFormatter(HelpFormatter):
     """
     show_last = {
         '--version', '--verbosity', '--traceback', '--settings', '--pythonpath',
-        '--no-color', '--force-color',
+        '--no-color', '--force-color', '--skip-checks',
     }
 
     def _reordered_actions(self, actions):
@@ -286,6 +286,9 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true', help='Skip system checks.'
+        )
         self.add_arguments(parser)
         return parser
 
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index d6ea84da7a..b4417829dd 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -33,6 +33,12 @@ from django.test import (
     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,
 )
 
+
+class CheckRequiredCommand(BaseCommand):
+    """A simple command that requires system checks."""
+    def handle(self, *args, **options):
+        self.stdout.write("CheckRequiredCommand executed.")
+
 custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')
 
 SYSTEM_CHECK_MSG = 'System check identified no issues'
@@ -272,6 +278,31 @@ class DjangoAdminDefaultSettings(AdminScriptTestCase):
         self.assertNoOutput(err)
         self.assertOutput(out, "EXECUTE: noargs_command")
 
+    @mock.patch('django.core.management.base.BaseCommand.check')
+    def test_skip_checks_flag(self, mocked_check):
+        """
+        The --skip-checks flag prevents checks from being run via call_command.
+        """
+        # Simulate a check failure
+        mocked_check.side_effect = CommandError
+
+        # Check that the command *runs checks* when skip_checks=False
+        # Use the settings context established by the test class setup
+        with self.settings(SETTINGS_MODULE='test_project.settings'):
+            with self.assertRaises(CommandError):
+                # Pass skip_checks=False explicitly
+                call_command(CheckRequiredCommand(), skip_checks=False)
+            # Ensure the mocked check() method was called
+            mocked_check.assert_called_once()
+
+            # Reset mock and check that the command *skips checks* by default
+            mocked_check.reset_mock()
+            mocked_check.side_effect = CommandError # Re-apply side effect
+            # Call without skip_checks relies on call_command's default True
+            call_command(CheckRequiredCommand())
+            # Ensure the mocked check() method was NOT called
+            mocked_check.assert_not_called()
+
 
 class DjangoAdminFullPathDefaultSettings(AdminScriptTestCase):
     """A series of tests for django-admin.py when using a settings.py file that
@@ -910,8 +941,8 @@ class ManageAlternateSettings(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', False), ('pythonpath', None), ('settings', "
-            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]"
+            "('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', "
+            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertNoOutput(err)
 
@@ -922,8 +953,8 @@ class ManageAlternateSettings(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', False), ('pythonpath', None), ('settings', None), "
-            "('traceback', False), ('verbosity', 1)]"
+            "('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', None), "
+            "('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertNoOutput(err)
 
@@ -934,8 +965,8 @@ class ManageAlternateSettings(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', True), ('pythonpath', None), ('settings', "
-            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]"
+            "('no_color', True), ('pythonpath', None), ('skip_checks', False), ('settings', "
+            "'alternate_settings'), ('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertNoOutput(err)
 
@@ -1612,8 +1643,8 @@ class CommandTypes(AdminScriptTestCase):
             "EXECUTE:BaseCommand labels=%s, "
             "options=[('force_color', False), ('no_color', False), "
             "('option_a', %s), ('option_b', %s), ('option_c', '3'), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]") % (labels, option_a, option_b)
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n") % (labels, option_a, option_b)
         self.assertNoOutput(err)
         self.assertOutput(out, expected_out)
 
@@ -1688,8 +1719,8 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE: noargs_command options=[('force_color', False), "
-            "('no_color', False), ('pythonpath', None), ('settings', None), "
-            "('traceback', False), ('verbosity', 1)]"
+            "('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', None), "
+            "('traceback', False), ('verbosity', 1)]\\n"
         )
 
     def test_noargs_with_args(self):
@@ -1707,8 +1738,8 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             ", options=[('force_color', False), ('no_color', False), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]"
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n"
         )
 
     def test_app_command_no_apps(self):
@@ -1726,15 +1757,15 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             ", options=[('force_color', False), ('no_color', False), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]"
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n"
         )
         self.assertOutput(out, "EXECUTE:AppCommand name=django.contrib.contenttypes, options=")
         self.assertOutput(
             out,
             ", options=[('force_color', False), ('no_color', False), "
-            "('pythonpath', None), ('settings', None), ('traceback', False), "
-            "('verbosity', 1)]"
+            "('pythonpath', None), ('skip_checks', False), ('settings', None), ('traceback', False), "
+            "('verbosity', 1)]\\n"
         )
 
     def test_app_command_invalid_app_label(self):
@@ -1757,8 +1788,8 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE:LabelCommand label=testlabel, options=[('force_color', "
-            "False), ('no_color', False), ('pythonpath', None), ('settings', "
-            "None), ('traceback', False), ('verbosity', 1)]"
+            "False), ('no_color', False), ('pythonpath', None), ('skip_checks', False), ('settings', "
+            "None), ('traceback', False), ('verbosity', 1)]\\n"
         )
 
     def test_label_command_no_label(self):
@@ -1775,14 +1806,14 @@ class CommandTypes(AdminScriptTestCase):
         self.assertOutput(
             out,
             "EXECUTE:LabelCommand label=testlabel, options=[('force_color', "
-            "False), ('no_color', False), ('pythonpath', None), "
-            "('settings', None), ('traceback', False), ('verbosity', 1)]"
+            "False), ('no_color', False), ('pythonpath', None), ('skip_checks', False), "
+            "('settings', None), ('traceback', False), ('verbosity', 1)]\\n"
         )
         self.assertOutput(
             out,
             "EXECUTE:LabelCommand label=anotherlabel, options=[('force_color', "
-            "False), ('no_color', False), ('pythonpath', None), "
-            "('settings', None), ('traceback', False), ('verbosity', 1)]"
+            "False), ('no_color', False), ('pythonpath', None), ('skip_checks', False), "
+            "('settings', None), ('traceback', False), ('verbosity', 1)]\\n"
         )
 
 
@@ -1855,9 +1886,9 @@ class ArgumentOrder(AdminScriptTestCase):
             out,
             "EXECUTE:BaseCommand labels=('testlabel',), options=["
             "('force_color', False), ('no_color', False), ('option_a', 'x'), "
-            "('option_b', %s), ('option_c', '3'), ('pythonpath', None), "
+            "('option_b', %s), ('option_c', '3'), ('pythonpath', None), ('skip_checks', False), "
             "('settings', 'alternate_settings'), ('traceback', False), "
-            "('verbosity', 1)]" % option_b
+            "('verbosity', 1)]\\n" % option_b
         )
 
 
diff --git a/tests/check_framework/tests.py b/tests/check_framework/tests.py
index 061ead9d23..7b49361450 100644
--- a/tests/check_framework/tests.py
+++ b/tests/check_framework/tests.py
@@ -90,32 +90,38 @@ class MessageTests(SimpleTestCase):
         self.assertEqual(str(e), expected)
 
     def test_printing_field_error(self):
+        from .models import SimpleModel
         field = SimpleModel._meta.get_field('field')
         e = Error("Error", obj=field)
         expected = "check_framework.SimpleModel.field: Error"
         self.assertEqual(str(e), expected)
 
     def test_printing_model_error(self):
+        from .models import SimpleModel
         e = Error("Error", obj=SimpleModel)
         expected = "check_framework.SimpleModel: Error"
         self.assertEqual(str(e), expected)
 
     def test_printing_manager_error(self):
+        from .models import SimpleModel
         manager = SimpleModel.manager
         e = Error("Error", obj=manager)
         expected = "check_framework.SimpleModel.manager: Error"
         self.assertEqual(str(e), expected)
 
     def test_equal_to_self(self):
+        from .models import SimpleModel
         e = Error("Error", obj=SimpleModel)
         self.assertEqual(e, e)
 
     def test_equal_to_same_constructed_check(self):
+        from .models import SimpleModel
         e1 = Error("Error", obj=SimpleModel)
         e2 = Error("Error", obj=SimpleModel)
         self.assertEqual(e1, e2)
 
     def test_not_equal_to_different_constructed_check(self):
+        from .models import SimpleModel
         e1 = Error("Error", obj=SimpleModel)
         e2 = Error("Error2", obj=SimpleModel)
         self.assertNotEqual(e1, e2)
@@ -220,6 +226,7 @@ class CheckCommandTests(SimpleTestCase):
             call_command('check', fail_level='WARNING')
 
 
+
 def custom_error_system_check(app_configs, **kwargs):
     return [Error('Error', id='myerrorcheck.E001')]
 
