diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..98533d7e38 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,32 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            return (getattr(self, 'model', None) == getattr(other, 'model', None) and
+                    self.creation_counter == other.creation_counter)
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # Order by creation_counter first, then by model.
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            # Fields without models are defined first.
+            if self_model is None and other_model is None:
+                return self.creation_counter < other.creation_counter
+            elif self_model is None:
+                return True  # self comes first
+            elif other_model is None:
+                return False  # other comes first
+            # Both fields have models.
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # creation_counters are equal, compare by model label.
+            return self_model._meta.label_lower < other_model._meta.label_lower
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((getattr(self, 'model', None), self.creation_counter))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
