diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..448b94f3b3 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -19,6 +19,8 @@
 
 from __future__ import division, print_function
 
+from sympy.core.mul import Mul # Moved this line here
+
 import warnings
 
 from sympy.core import S, sympify, Expr
@@ -213,11 +215,32 @@ def __add__(self, other):
         sympy.geometry.point.Point.translate
 
         """
+        # Handle cases like Number*Point which results in Mul
+        if isinstance(other, Mul):
+            # Check if it's a scalar * Point or Point * scalar
+            point_arg = None
+            scalar_arg = None
+            if len(other.args) == 2:
+                if isinstance(other.args[0], Point) and not isinstance(other.args[1], Point):
+                    point_arg = other.args[0]
+                    scalar_arg = other.args[1]
+                elif isinstance(other.args[1], Point) and not isinstance(other.args[0], Point):
+                    point_arg = other.args[1]
+                    scalar_arg = other.args[0]
+
+            if point_arg is not None and scalar_arg is not None:
+                # Evaluate the multiplication to get the actual Point
+                # This relies on Point.__mul__ or __rmul__ being defined correctly
+                other = point_arg * scalar_arg
+
         try:
+            # Attempt to treat 'other' as a Point or Point-like sequence
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
+            # If it's not Point-like, raise the error
             raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
+        # Perform the addition
         coords = [simplify(a + b) for a, b in zip(s, o)]
         return Point(coords, evaluate=False)
 
@@ -278,6 +301,11 @@ def __mul__(self, factor):
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)
 
+    def __rmul__(self, factor):
+        """Reverse multiplication for Point * factor."""
+        # factor is sympified in __mul__
+        return self.__mul__(factor)
+
     def __neg__(self):
         """Negate the point."""
         coords = [-x for x in self.args]
