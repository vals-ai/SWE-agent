diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..c13ea228c
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,11 @@
+
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingClassifier
+
+X = np.random.randn(100, 10)
+y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)
+gbrt.fit(X, y)
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
index ad6a5a8ca..3170e4000 100644
--- a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
+++ b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
@@ -426,11 +426,15 @@ class BaseHistGradientBoosting(BaseEstimator, ABC):
 
         Scores are computed on validation data or on training data.
         """
+        if hasattr(self, 'classes_'):
+            y_small_train = self.classes_[y_small_train.astype(int)]
         self.train_score_.append(
             self.scorer_(self, X_binned_small_train, y_small_train)
         )
 
         if self._use_validation_data:
+            if hasattr(self, 'classes_'):
+                y_val = self.classes_[y_val.astype(int)]
             self.validation_score_.append(
                 self.scorer_(self, X_binned_val, y_val)
             )
diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py
index 1eebdefd5..3cdda4555 100644
--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py
+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py
@@ -415,3 +415,27 @@ def test_infinite_values_missing_values():
 
     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1
     assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1
+
+
+def test_early_stopping_string_target():
+    # Check that early stopping works with string targets (issue #16034)
+    import numpy as np
+    from sklearn.model_selection import train_test_split
+    from sklearn.ensemble import HistGradientBoostingClassifier
+
+    X = np.random.randn(100, 10)
+    y = np.array(['class_a'] * 50 + ['class_b'] * 50, dtype=object)
+
+    # With validation_fraction
+    gb = HistGradientBoostingClassifier(n_iter_no_change=5, random_state=0)
+    gb.fit(X, y)
+    # Check that early stopping occurred
+    assert gb.n_iter_ > 1
+    assert gb.n_iter_ < gb.max_iter
+
+
+
+
+    # Check that early stopping occurred
+    assert gb.n_iter_ > 1
+    assert gb.n_iter_ < gb.max_iter
\ No newline at end of file
