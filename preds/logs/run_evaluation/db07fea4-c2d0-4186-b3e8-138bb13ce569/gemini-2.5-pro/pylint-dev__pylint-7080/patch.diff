diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index 5cacc0371..a20bb6618 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -43,7 +43,7 @@ def get_python_path(filepath: str) -> str:
 
 def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:
     """Determines if the element is matched in a regex ignore-list."""
-    return any(file_pattern.match(element) for file_pattern in ignore_list_re)
+    return any(file_pattern.search(element) for file_pattern in ignore_list_re)
 
 
 def _is_ignored_file(
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index e2bbf061e..99b6f4ae8 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -601,7 +601,7 @@ class PyLinter(
                         root,
                         self.config.ignore,
                         self.config.ignore_patterns,
-                        self.config.ignore_paths,
+                        self._ignore_paths,
                     ):
                         skip_subtrees.append(root)
                         continue
@@ -624,6 +624,7 @@ class PyLinter(
         files_or_modules is either a string or list of strings presenting modules to check.
         """
         self.initialize()
+        self._ignore_paths = utils.get_global_option(self, "ignore-paths", default=[])
         if not isinstance(files_or_modules, (list, tuple)):
             # TODO: 3.0: Remove deprecated typing and update docstring
             warnings.warn(
@@ -765,9 +766,8 @@ class PyLinter(
         The returned generator yield one item for each Python module that should be linted.
         """
         for descr in self._expand_files(files_or_modules):
-            name, filepath, is_arg = descr["name"], descr["path"], descr["isarg"]
-            if self.should_analyze_file(name, filepath, is_argument=is_arg):
-                yield FileItem(name, filepath, descr["basename"])
+            name, filepath = descr["name"], descr["path"]
+            yield FileItem(name, filepath, descr["basename"])
 
     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:
         """Get modules and errors from a list of modules and handle errors."""
