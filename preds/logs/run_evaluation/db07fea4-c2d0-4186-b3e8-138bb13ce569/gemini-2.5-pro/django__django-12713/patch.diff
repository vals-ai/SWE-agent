diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..db7df891e3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')
 
-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        if 'widget' not in kwargs:
+            autocomplete_fields = self.get_autocomplete_fields(request)
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
 
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/tests/admin_ordering/tests.py b/tests/admin_ordering/tests.py
index f68b64ae70..75fe634db9 100644
--- a/tests/admin_ordering/tests.py
+++ b/tests/admin_ordering/tests.py
@@ -186,4 +186,22 @@ class TestRelatedFieldsAdminOrdering(TestCase):
         site.register(Song, SongAdmin)
         site.register(Band, StaticOrderingBandAdmin)
 
+    def test_formfield_for_manytomany_widget_override(self):
+        """A custom widget can be passed to formfield_for_manytomany."""
+        from django import forms
+
+        class CustomSongAdmin(admin.ModelAdmin):
+            def formfield_for_manytomany(self, db_field, request, **kwargs):
+                if db_field.name == 'other_interpreters':
+                    kwargs['widget'] = forms.SelectMultiple(attrs={'class': 'my-custom-widget'})
+                return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+        site.unregister(Song)
+        site.register(Song, CustomSongAdmin)
+        m2m_field = site._registry[Song].formfield_for_manytomany(
+            Song.other_interpreters.field,
+            request=None,
+        )
+        self.assertIsInstance(m2m_field.widget, forms.SelectMultiple)
+        self.assertEqual(m2m_field.widget.attrs, {'class': 'my-custom-widget'})
         self.check_ordering_of_field_choices([self.b2])
