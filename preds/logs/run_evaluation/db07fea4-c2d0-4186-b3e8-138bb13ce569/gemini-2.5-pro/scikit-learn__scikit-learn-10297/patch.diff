diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..d057dc5c9
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,13 @@
+
+import numpy as np
+from sklearn import linear_model as lm
+
+#test database
+n = 100
+x = np.random.randn(n, 30)
+y = (np.random.normal(size = n) > 0).astype(int)
+
+rr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, 
+                                         store_cv_values = True).fit(x, y)
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index 911c74ae3..2a97a20c7 100644
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -1291,7 +1291,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
         - An iterable yielding train/test splits.
 
         Refer :ref:`User Guide <cross_validation>` for the various
-        cross-validation strategies that can be used here.
+    store_cv_values : boolean, default=False
+        Flag indicating if the cross-validation values corresponding to
+        each alpha should be stored in the `cv_values_` attribute (see
+        below). This flag is only compatible with `cv=None` (i.e.
+        using Generalized Cross-Validation).
 
     class_weight : dict or 'balanced', optional
         Weights associated with classes in the form ``{class_label: weight}``.
@@ -1333,10 +1337,10 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
     advantage of the multi-variate response support in Ridge.
     """
     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,
-                 normalize=False, scoring=None, cv=None, class_weight=None):
+                 normalize=False, scoring=None, cv=None, class_weight=None, store_cv_values=False):
         super(RidgeClassifierCV, self).__init__(
             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,
-            scoring=scoring, cv=cv)
+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)
         self.class_weight = class_weight
 
     def fit(self, X, y, sample_weight=None):
