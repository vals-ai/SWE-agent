diff --git a/django/db/models/query.py b/django/db/models/query.py
index b48d0df9c0..9ab814aec8 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -189,14 +189,21 @@ class QuerySet:
         self._db = using
         self._hints = hints or {}
         self._query = query or sql.Query(self.model)
+        # Restore state from pickled query if available
+        if self._query.iterable_class:
+            self._iterable_class = self._query.iterable_class
+        else:
+            self._iterable_class = ModelIterable
+        if self._query.fields:
+            self._fields = self._query.fields
+        else:
+            self._fields = None
         self._result_cache = None
         self._sticky_filter = False
         self._for_write = False
         self._prefetch_related_lookups = ()
         self._prefetch_done = False
         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
-        self._iterable_class = ModelIterable
-        self._fields = None
         self._defer_next_filter = False
         self._deferred_filter = None
 
@@ -211,6 +218,16 @@ class QuerySet:
     @query.setter
     def query(self, value):
         self._query = value
+        # Update iterable class and fields from the new query object
+        if value and value.iterable_class:
+            self._iterable_class = value.iterable_class
+        else:
+            # Default back to ModelIterable if the new query doesn't specify
+            self._iterable_class = ModelIterable
+        if value and value.fields:
+            self._fields = value.fields
+        else:
+            self._fields = None
 
     def as_manager(cls):
         # Address the circular dependency between `Queryset` and `Manager`.
@@ -822,6 +839,7 @@ class QuerySet:
         if expressions:
             clone = clone.annotate(**expressions)
         clone._fields = fields
+        clone.query.fields = fields
         clone.query.set_values(fields)
         return clone
 
@@ -829,6 +847,7 @@ class QuerySet:
         fields += tuple(expressions)
         clone = self._values(*fields, **expressions)
         clone._iterable_class = ValuesIterable
+        clone.query.iterable_class = ValuesIterable
         return clone
 
     def values_list(self, *fields, flat=False, named=False):
@@ -860,6 +879,7 @@ class QuerySet:
             else FlatValuesListIterable if flat
             else ValuesListIterable
         )
+        clone.query.iterable_class = clone._iterable_class
         return clone
 
     def dates(self, field_name, kind, order='ASC'):
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..5b86f262fe 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -197,6 +197,8 @@ class Query(BaseExpression):
 
         # Holds the selects defined by a call to values() or values_list()
         # excluding annotation_select and extra_select.
+        self.fields = None
+        self.iterable_class = None
         self.values_select = ()
 
         # SQL annotation-related attributes
