diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..dd10e14a68 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -108,10 +108,18 @@ class SessionBase:
 
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
-        return signing.dumps(
-            session_dict, salt=self.key_salt, serializer=self.serializer,
-            compress=True,
-        )
+        # RemovedInDjango40Warning: DEFAULT_HASHING_ALGORITHM will be removed.
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', 'sha256') == 'sha1':
+            # Use legacy format (hash:serialized)
+            serialized = self.serializer().dumps(session_dict)
+            hash_val = self._hash(serialized)
+            return base64.b64encode(hash_val.encode() + b':' + serialized).decode('ascii')
+        else:
+            # Use new format (signing.dumps)
+            return signing.dumps(
+                session_dict, salt=self.key_salt, serializer=self.serializer,
+                compress=True,
+            )
 
     def decode(self, session_data):
         try:
diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py
index 248dae82aa..8ecf61ca47 100644
--- a/tests/sessions_tests/tests.py
+++ b/tests/sessions_tests/tests.py
@@ -323,6 +323,44 @@ class SessionTestsMixin:
             {'a test key': 'a test value'},
         )
 
+    def test_encode_decode_with_sha1_hashing(self):
+        """
+        When DEFAULT_HASHING_ALGORITHM is 'sha1', encode() uses the legacy
+        format and decode() can read it.
+        """
+        # RemovedInDjango40Warning: DEFAULT_HASHING_ALGORITHM will be removed.
+        import base64
+        import warnings
+        from django.core import signing
+        from django.test import override_settings
+        from django.utils.deprecation import RemovedInDjango40Warning
+
+        # Ignore the warning triggered by setting DEFAULT_HASHING_ALGORITHM='sha1'
+        with warnings.catch_warnings():
+            warnings.filterwarnings(
+                'ignore',
+                'The DEFAULT_HASHING_ALGORITHM transitional setting is deprecated.',
+                RemovedInDjango40Warning,
+            )
+            with override_settings(DEFAULT_HASHING_ALGORITHM='sha1', SECRET_KEY='django_tests_secret_key'):
+                # Reinitialize session backend if necessary (depends on backend implementation)
+                # self.session = self.backend() # Example if reinit is needed
+
+                data = {'a test key': 'a test value'}
+                encoded = self.session.encode(data)
+                # Check that the encoded format is the legacy one (hash:data)
+                decoded_b64 = base64.b64decode(encoded.encode('ascii'))
+                self.assertIn(b':', decoded_b64)
+                # Check that decode works
+                self.assertEqual(self.session.decode(encoded), data)
+                # Check that decode also works with the *new* format even when
+                # DEFAULT_HASHING_ALGORITHM is 'sha1', as decode should be robust.
+                new_format_encoded = signing.dumps(
+                    data, salt=self.session.key_salt, serializer=self.session.serializer,
+                    compress=True,
+                )
+                self.assertEqual(self.session.decode(new_format_encoded), data)
+
     def test_decode_failure_logged_to_security(self):
         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')
         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:
