diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..17f4642465 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -49,6 +49,7 @@ from . import icrs_cirs_transforms
 from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
+from . import itrs_observed_transforms
 from . import ecliptic_transforms
 
 # Import this after importing other frames, since this requires various
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..0499f6f071
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,29 @@
+
+# -*- coding: utf-8 -*-
+# Licensed under a 3-clause BSD style license - see LICENSE.rst
+"""Contains the transformation functions for getting between ITRS and AltAz/HADec."""
+
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from astropy.coordinates.builtin_frames import ITRS, AltAz, HADec
+from astropy.coordinates.transformations import itrs_to_observed, observed_to_itrs
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+def itrs_to_altaz(itrs_coo, altaz_frame):
+    return itrs_to_observed(itrs_coo, altaz_frame)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_hadec(itrs_coo, hadec_frame):
+    return itrs_to_observed(itrs_coo, hadec_frame)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+def altaz_to_itrs(altaz_coo, itrs_frame):
+    return observed_to_itrs(altaz_coo, itrs_frame)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def hadec_to_itrs(hadec_coo, itrs_frame):
+    return observed_to_itrs(hadec_coo, itrs_frame)
\ No newline at end of file
diff --git a/astropy/coordinates/builtin_frames/utils.py b/astropy/coordinates/builtin_frames/utils.py
index 6d2546c718..8b84903c4a 100644
--- a/astropy/coordinates/builtin_frames/utils.py
+++ b/astropy/coordinates/builtin_frames/utils.py
@@ -44,7 +44,9 @@ def get_polar_motion(time):
     """
     # Get the polar motion from the IERS table
     iers_table = iers.earth_orientation_table.get()
-    xp, yp, status = iers_table.pm_xy(time, return_status=True)
+        # pm_xy requires UTC MJD, get_jd12 handles IERS warnings
+    jd1, jd2 = get_jd12(time, 'utc')
+    xp, yp, status = iers_table.pm_xy(jd1, jd2, return_status=True)
 
     wmsg = (
         'Tried to get polar motions for times {} IERS data is '
diff --git a/astropy/coordinates/tests/test_transformations.py b/astropy/coordinates/tests/test_transformations.py
index 85b5b8034c..f196682af1 100644
--- a/astropy/coordinates/tests/test_transformations.py
+++ b/astropy/coordinates/tests/test_transformations.py
@@ -417,7 +417,8 @@ def test_vel_transformation_obstime_err():
 
     aa.transform_to(aaf4)
 
-    aa.transform_to(ICRS())
+    with pytest.warns(AstropyWarning, match='leap-second file is expired'):
+        aa.transform_to(ICRS())
 
 
 def test_function_transform_with_differentials():
diff --git a/astropy/coordinates/transformations.py b/astropy/coordinates/transformations.py
index b34f335328..6c00c01dbd 100644
--- a/astropy/coordinates/transformations.py
+++ b/astropy/coordinates/transformations.py
@@ -30,6 +30,7 @@ import numpy as np
 from astropy import units as u
 from astropy.utils.exceptions import AstropyWarning
 
+from .matrix_utilities import rotation_matrix, matrix_transpose
 from .matrix_utilities import matrix_product
 
 __all__ = ['TransformGraph', 'CoordinateTransform', 'FunctionTransform',
@@ -1606,4 +1607,57 @@ trans_to_color[AffineTransform] = '#555555'  # gray
 trans_to_color[FunctionTransform] = '#783001'  # dark red-ish/brown
 trans_to_color[FunctionTransformWithFiniteDifference] = '#d95f02'  # red-ish
 trans_to_color[StaticMatrixTransform] = '#7570b3'  # blue-ish
+
+def itrs_to_observed_mat(observed_frame):
+    from .altaz import AltAz
+
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        from .builtin_frames.utils import PIOVER2
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    else:
+        from .hadec import HADec
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+    from .itrs import ITRS
+def itrs_to_observed(itrs_coo, observed_frame):
+    # Trying to synchronize the obstimes here makes no sense. In fact,
+    # it's a real gotcha as doing an ITRS->ITRS transform references 
+    # ITRS coordinates, which should be tied to the Earth, to the SSB.
+    # Instead, we treat ITRS coordinates as time invariant here.
+
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                             - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+    from .itrs import ITRS
+def observed_to_itrs(observed_coo, itrs_frame):
+                                              
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+        # Make sure the obstime of the result is the same as the input
+    # This is important for subsequent transformations (e.g., back to ICRS)
+    new_frame = itrs_frame.replicate_without_data(obstime=observed_coo.obstime)
+    return new_frame.realize_frame(rep)
 trans_to_color[DynamicMatrixTransform] = '#1b9e77'  # green-ish
