diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..867f81aee0 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -1,3 +1,4 @@
+from django.db import router
 from django.apps.registry import Apps
 from django.db import DatabaseError, models
 from django.utils.functional import classproperty
@@ -63,6 +64,9 @@ class MigrationRecorder:
         if self.has_table():
             return
         # Make the table
+        # Check if the router allows creating this table.
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):
+            return
         try:
             with self.connection.schema_editor() as editor:
                 editor.create_model(self.Migration)
@@ -75,6 +79,9 @@ class MigrationRecorder:
         for all applied migrations.
         """
         if self.has_table():
+            # Check if the router allows reading from this table.
+            if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):
+                return {}
             return {(migration.app, migration.name): migration for migration in self.migration_qs}
         else:
             # If the django_migrations table doesn't exist, then no migrations
@@ -83,14 +90,24 @@ class MigrationRecorder:
 
     def record_applied(self, app, name):
         """Record that a migration was applied."""
+        # Check if the router allows writing to this table.
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):
+            return
         self.ensure_schema()
         self.migration_qs.create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
+        # Check if the router allows writing to this table.
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):
+            return
         self.ensure_schema()
         self.migration_qs.filter(app=app, name=name).delete()
 
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
+        # Check if the router allows writing to this table.
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):
+            return
+        self.migration_qs.all().delete()
         self.migration_qs.all().delete()
