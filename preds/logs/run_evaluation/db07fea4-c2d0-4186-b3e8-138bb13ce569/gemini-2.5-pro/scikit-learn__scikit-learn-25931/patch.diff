diff --git a/reproduce_iforest_warning.py b/reproduce_iforest_warning.py
new file mode 100644
index 000000000..39b47a315
--- /dev/null
+++ b/reproduce_iforest_warning.py
@@ -0,0 +1,8 @@
+
+from sklearn.ensemble import IsolationForest
+import pandas as pd
+
+X = pd.DataFrame({"a": [-1.1, 0.3, 0.5, 100]})
+clf = IsolationForest(random_state=0, contamination=0.05).fit(X)
+
+print("Script completed successfully, no errors.") # Added for confirmation
\ No newline at end of file
diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py
index 4d6c1c3f0..684767571 100644
--- a/sklearn/ensemble/_iforest.py
+++ b/sklearn/ensemble/_iforest.py
@@ -345,7 +345,19 @@ class IsolationForest(OutlierMixin, BaseBagging):
             return self
 
         # else, define offset_ wrt contamination parameter
-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)
+        # Temporarily remove feature_names_in_ to avoid warning when calling
+        # score_samples on the validated X.
+        feature_names_in = getattr(self, "feature_names_in_", None)
+        if hasattr(self, "feature_names_in_"):
+            delattr(self, "feature_names_in_")
+
+        try:
+            scores = self.score_samples(X)
+            self.offset_ = np.percentile(scores, 100.0 * self.contamination)
+        finally:
+            if feature_names_in is not None:
+                # Restore feature names if they existed
+                self.feature_names_in_ = feature_names_in
 
         return self
 
diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py
index 5f046540f..da5948c6f 100644
--- a/sklearn/ensemble/tests/test_iforest.py
+++ b/sklearn/ensemble/tests/test_iforest.py
@@ -326,6 +326,41 @@ def test_iforest_with_n_jobs_does_not_segfault():
     IsolationForest(n_estimators=10, max_samples=256, n_jobs=2).fit(X)
 
 
+def test_iforest_dataframe_contamination_no_warning():
+    """Check that fitting with DataFrame and contamination != 'auto' raises no warning.
+
+    Non-regression test for #24494.
+    """
+    pd = pytest.importorskip("pandas")
+    X = pd.DataFrame({"a": [-1.1, 0.3, 0.5, 100]})
+
+    # Check that fitting with contamination != "auto" does not raise the
+    # "X does not have valid feature names" warning
+    clf = IsolationForest(random_state=0, contamination=0.05)
+    with warnings.catch_warnings():
+        warnings.simplefilter("error", UserWarning)
+        # Filter out the specific warning about max_samples if X is small
+        warnings.filterwarnings(
+            "ignore",
+            message="max_samples will be set to n_samples for estimation",
+            category=UserWarning,
+        )
+        clf.fit(X)
+
+    # Check that fitting with contamination="auto" also does not raise the warning
+    clf = IsolationForest(random_state=0, contamination="auto")
+    with warnings.catch_warnings():
+        warnings.simplefilter("error", UserWarning)
+        # Filter out the specific warning about max_samples if X is small
+        warnings.filterwarnings(
+            "ignore",
+            message="max_samples will be set to n_samples for estimation",
+            category=UserWarning,
+        )
+        clf.fit(X)
+
+
+
 # TODO(1.4): remove in 1.4
 def test_base_estimator_property_deprecated():
     X = np.array([[1, 2], [3, 4]])
