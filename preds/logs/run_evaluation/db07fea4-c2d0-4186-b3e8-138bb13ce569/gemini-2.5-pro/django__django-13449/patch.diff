diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..a560b76a2d 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -6,6 +6,7 @@ from decimal import Decimal
 from uuid import UUID
 
 from django.core.exceptions import EmptyResultSet, FieldError
+from django.db import models
 from django.db import NotSupportedError, connection
 from django.db.models import fields
 from django.db.models.constants import LOOKUP_SEP
@@ -21,6 +22,11 @@ class SQLiteNumericMixin:
     numeric to be properly filtered.
     """
     def as_sqlite(self, compiler, connection, **extra_context):
+        # Don't cast window functions here; Window.as_sql will handle it.
+        # Check if the object has the 'window_compatible' attribute and if it's True.
+        if getattr(self, 'window_compatible', False):
+            return self.as_sql(compiler, connection, **extra_context)
+
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
             if self.output_field.get_internal_type() == 'DecimalField':
@@ -1327,10 +1333,14 @@ class Window(Expression):
         params.extend(window_params)
         template = template or self.template
 
-        return template % {
+        sql = template % {
             'expression': expr_sql,
             'window': ''.join(window_sql).strip()
-        }, params
+        }
+        # Apply SQLite CAST for DecimalField *after* adding the OVER clause.
+        if connection.vendor == 'sqlite' and isinstance(self.output_field, models.DecimalField):
+            sql = 'CAST(%s AS NUMERIC)' % sql
+        return sql, params
 
     def __str__(self):
         return '{} OVER ({}{}{})'.format(
diff --git a/reproduce_lag_bug.py b/reproduce_lag_bug.py
new file mode 100644
index 0000000000..1a45fa1974
--- /dev/null
+++ b/reproduce_lag_bug.py
@@ -0,0 +1,37 @@
+
+
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+import django
+django.setup()
+
+from django.db import connection
+from django.db.models import F, Window
+from django.db.models.functions import Lag
+from test1.models import LagTest
+from datetime import date
+from decimal import Decimal
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(LagTest)
+
+# Insert some data (optional, but good for verification)
+LagTest.objects.create(modified=date(2023, 1, 1), data=1.0, amount=Decimal('10.1234'))
+LagTest.objects.create(modified=date(2023, 1, 1), data=2.0, amount=Decimal('20.5678'))
+LagTest.objects.create(modified=date(2023, 1, 2), data=3.0, amount=Decimal('30.9999'))
+
+# The problematic query
+w = Window(expression=Lag('amount', 1), partition_by=[F('modified')], order_by=F('modified').asc()) # Using lag=1 for simplicity with limited data
+q = LagTest.objects.all().annotate(w=w)
+
+# Try to execute the query
+try:
+    print(list(q))
+    print("Script completed successfully, no errors.")
+except Exception as e:
+    print(f"Error occurred: {e}")
+
+# Clean up the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.delete_model(LagTest)
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..3e21d2f606
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,12 @@
+
+
+SECRET_KEY = 'dummy'
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'test1',
+]
\ No newline at end of file
diff --git a/test1/__init__.py b/test1/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/test1/__init__.py
@@ -0,0 +1 @@
+
diff --git a/test1/models.py b/test1/models.py
new file mode 100644
index 0000000000..79d3297ec9
--- /dev/null
+++ b/test1/models.py
@@ -0,0 +1,7 @@
+
+from django.db import models
+
+class LagTest(models.Model):
+    modified = models.DateField()
+    data = models.FloatField()
+    amount = models.DecimalField(decimal_places=4, max_digits=7)
\ No newline at end of file
diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py
index 30ed64f529..c7d8e5c0f3 100644
--- a/tests/expressions_window/tests.py
+++ b/tests/expressions_window/tests.py
@@ -11,8 +11,8 @@ from django.db.models.functions import (
     CumeDist, DenseRank, ExtractYear, FirstValue, Lag, LastValue, Lead,
     NthValue, Ntile, PercentRank, Rank, RowNumber, Upper,
 )
+from decimal import Decimal
 from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature
-
 from .models import Employee
 
 
@@ -200,7 +200,7 @@ class WindowFunctionTests(TestCase):
             ('Johnson', 40000, 'Marketing', 38000),
             ('Brown', 53000, 'Sales', None),
             ('Smith', 55000, 'Sales', 53000),
-        ], transform=lambda row: (row.name, row.salary, row.department, row.lag))
+        ])
 
     def test_first_value(self):
         qs = Employee.objects.annotate(first_value=Window(
