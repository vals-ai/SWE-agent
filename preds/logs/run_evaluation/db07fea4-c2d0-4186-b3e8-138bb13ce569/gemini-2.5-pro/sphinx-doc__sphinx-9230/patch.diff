diff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py
index 3a3367ebe..4795d6a33 100644
--- a/sphinx/util/docfields.py
+++ b/sphinx/util/docfields.py
@@ -297,14 +297,35 @@ class DocFieldTransformer:
 
             # also support syntax like ``:param type name:``
             if typedesc.is_typed:
-                try:
-                    argtype, argname = fieldarg.split(None, 1)
-                except ValueError:
-                    pass
-                else:
-                    types.setdefault(typename, {})[argname] = \
-                        [nodes.Text(argtype)]
-                    fieldarg = argname
+                # Support syntax like ``:param type name:``
+                # Find the first whitespace character separating the type and the name,
+                # ignoring whitespace inside nested parentheses or brackets.
+                paren_level = 0
+                bracket_level = 0
+                split_point = -1
+                for i, char in enumerate(fieldarg):
+                    if char == '(':
+                        paren_level += 1
+                    elif char == ')':
+                        paren_level -= 1
+                    elif char == '[':
+                        bracket_level += 1
+                    elif char == ']':
+                        bracket_level -= 1
+                    elif char.isspace() and paren_level == 0 and bracket_level == 0:
+                        # Found the split point
+                        split_point = i
+                        break
+                
+                if split_point != -1:
+                    argtype = fieldarg[:split_point].strip()
+                    # Strip trailing colon from name, if present
+                    argname = fieldarg[split_point:].strip().rstrip(':') 
+                    if argtype and argname: # Ensure both parts are non-empty
+                        types.setdefault(typename, {})[argname] = \
+                            [nodes.Text(argtype)]
+                        # Update fieldarg to be just the name (without colon) for later processing
+                        fieldarg = argname
 
             translatable_content = nodes.inline(field_body.rawsource,
                                                 translatable=True)
