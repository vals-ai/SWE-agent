diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 97977d72ef..bf9c2acd26 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -96,7 +96,7 @@ class MigrationAutodetector:
         for name, field in sorted(fields.items()):
             deconstruction = self.deep_deconstruct(field)
             if field.remote_field and field.remote_field.model:
-                del deconstruction[2]['to']
+                deconstruction[2].pop('to', None)
             fields_def.append(deconstruction)
         return fields_def
 
diff --git a/django/repro_test.py b/django/repro_test.py
new file mode 100644
index 0000000000..0255e5dbcc
--- /dev/null
+++ b/django/repro_test.py
@@ -0,0 +1,26 @@
+
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ModelState, ProjectState
+from django.test import TestCase
+
+class CustomFKField(models.ForeignKey):
+    def __init__(self, *args, **kwargs):
+        kwargs['to'] = 'testapp.HardcodedModel'
+        super().__init__(*args, **kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super().deconstruct()
+        del kwargs["to"]
+        return name, path, args, kwargs
+
+class ReproTestCase(TestCase):
+    def test_reprodution(self):
+        before = ProjectState()
+        before.add_model(ModelState('testapp', 'HardcodedModel', []))
+        after = ProjectState()
+        after.add_model(ModelState('testapp', 'HardcodedModel', []))
+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))
+        changes = MigrationAutodetector(before, after)._detect_changes()
+        self.assertEqual(len(changes['testapp']), 1)
+        print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py
index 3b46601145..d9db6f4fcd 100644
--- a/tests/migrations/test_autodetector.py
+++ b/tests/migrations/test_autodetector.py
@@ -2835,6 +2835,35 @@ class AutodetectorTests(TestCase):
                 )
 
 
+    def test_fk_without_to_in_deconstruct(self):
+        """
+        The autodetector should not crash when a ForeignKey subclass removes
+        the 'to' kwarg in its deconstruct() method (#32100).
+        """
+        class CustomFKField(models.ForeignKey):
+            def __init__(self, *args, **kwargs):
+                kwargs['to'] = 'migrations.HardcodedModel'
+                super().__init__(*args, **kwargs)
+
+            def deconstruct(self):
+                name, path, args, kwargs = super().deconstruct()
+                del kwargs["to"]
+                return name, path, args, kwargs
+
+        before = self.make_project_state([
+            ModelState('migrations', 'HardcodedModel', [])
+        ])
+        after = self.make_project_state([
+            ModelState('migrations', 'HardcodedModel', []),
+            ModelState('migrations', 'TestModel', [
+                ('custom', CustomFKField(on_delete=models.CASCADE)),
+            ]),
+        ])
+        changes = self.get_changes(before, after)
+        self.assertNumberMigrations(changes, 'migrations', 1)
+        self.assertOperationTypes(changes, 'migrations', 0, ['CreateModel'])
+        self.assertOperationAttributes(changes, 'migrations', 0, 0, name='TestModel')
+
 class MigrationSuggestNameTests(SimpleTestCase):
     def test_no_operations(self):
         class Migration(migrations.Migration):
