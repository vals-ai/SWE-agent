+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/__main__.py
	modified:   django/contrib/admin/filters.py
	modified:   django/contrib/admin/options.py
	modified:   django/contrib/admin/templatetags/admin_list.py
	modified:   django/contrib/admin/widgets.py
	modified:   django/contrib/auth/base_user.py
	modified:   django/contrib/auth/management/__init__.py
	modified:   django/contrib/auth/management/commands/createsuperuser.py
	modified:   django/contrib/gis/db/backends/oracle/models.py
	modified:   django/contrib/gis/db/backends/oracle/operations.py
	modified:   django/contrib/gis/db/backends/postgis/adapter.py
	modified:   django/contrib/gis/db/backends/postgis/const.py
	modified:   django/contrib/gis/db/backends/postgis/models.py
	modified:   django/contrib/gis/db/backends/spatialite/models.py
	modified:   django/contrib/gis/db/backends/spatialite/operations.py
	modified:   django/contrib/gis/db/models/functions.py
	modified:   django/contrib/gis/db/models/proxy.py
	modified:   django/contrib/gis/db/models/sql/conversion.py
	modified:   django/contrib/gis/gdal/__init__.py
	modified:   django/contrib/gis/gdal/datasource.py
	modified:   django/contrib/gis/gdal/envelope.py
	modified:   django/contrib/gis/gdal/geometries.py
	modified:   django/contrib/gis/gdal/prototypes/ds.py
	modified:   django/contrib/gis/gdal/prototypes/errcheck.py
	modified:   django/contrib/gis/gdal/prototypes/generation.py
	modified:   django/contrib/gis/gdal/prototypes/raster.py
	modified:   django/contrib/gis/gdal/raster/const.py
	modified:   django/contrib/gis/gdal/srs.py
	modified:   django/contrib/gis/geoip2/__init__.py
	modified:   django/contrib/gis/geos/__init__.py
	modified:   django/contrib/gis/geos/collections.py
	modified:   django/contrib/gis/geos/coordseq.py
	modified:   django/contrib/gis/geos/geometry.py
	modified:   django/contrib/gis/geos/io.py
	modified:   django/contrib/gis/geos/libgeos.py
	modified:   django/contrib/gis/geos/prototypes/errcheck.py
	modified:   django/contrib/gis/geos/prototypes/misc.py
	modified:   django/contrib/gis/geos/prototypes/predicates.py
	modified:   django/contrib/gis/geos/prototypes/topology.py
	modified:   django/contrib/gis/utils/__init__.py
	modified:   django/contrib/gis/utils/ogrinspect.py
	modified:   django/contrib/postgres/search.py
	modified:   django/contrib/sessions/base_session.py
	modified:   django/contrib/staticfiles/views.py
	modified:   django/core/cache/__init__.py
	modified:   django/core/exceptions.py
	modified:   django/core/files/images.py
	modified:   django/core/files/locks.py
	modified:   django/core/files/uploadhandler.py
	modified:   django/core/mail/__init__.py
	modified:   django/core/mail/backends/console.py
	modified:   django/core/mail/backends/smtp.py
	modified:   django/core/management/base.py
	modified:   django/core/serializers/base.py
	modified:   django/core/serializers/xml_serializer.py
	modified:   django/db/backends/base/schema.py
	modified:   django/db/backends/ddl_references.py
	modified:   django/db/backends/mysql/base.py
	modified:   django/db/backends/oracle/base.py
	modified:   django/db/backends/oracle/creation.py
	modified:   django/db/backends/postgresql/schema.py
	modified:   django/db/backends/sqlite3/_functions.py
	modified:   django/db/backends/sqlite3/base.py
	modified:   django/db/migrations/autodetector.py
	modified:   django/db/migrations/loader.py
	modified:   django/db/migrations/operations/models.py
	modified:   django/db/migrations/state.py
	modified:   django/db/models/aggregates.py
	modified:   django/db/models/base.py
	modified:   django/db/models/constants.py
	modified:   django/db/models/expressions.py
	modified:   django/db/models/functions/comparison.py
	modified:   django/db/models/functions/datetime.py
	modified:   django/db/models/functions/math.py
	modified:   django/db/models/functions/mixins.py
	modified:   django/db/models/indexes.py
	modified:   django/db/models/lookups.py
	modified:   django/db/models/query.py
	modified:   django/db/models/query_utils.py
	modified:   django/db/models/sql/compiler.py
	modified:   django/db/models/sql/datastructures.py
	modified:   django/db/models/sql/query.py
	modified:   django/db/models/sql/where.py
	modified:   django/forms/models.py
	modified:   django/forms/widgets.py
	modified:   django/http/multipartparser.py
	modified:   django/http/request.py
	modified:   django/middleware/csrf.py
	modified:   django/shortcuts.py
	modified:   django/template/defaultfilters.py
	modified:   django/template/defaulttags.py
	modified:   django/template/engine.py
	modified:   django/template/smartif.py
	modified:   django/test/html.py
	modified:   django/urls/conf.py
	modified:   django/urls/resolvers.py
	modified:   django/utils/archive.py
	modified:   django/utils/cache.py
	modified:   django/utils/crypto.py
	modified:   django/utils/dateformat.py
	modified:   django/utils/deconstruct.py
	modified:   django/utils/feedgenerator.py
	modified:   django/utils/jslex.py
	modified:   django/utils/regex_helper.py
	modified:   django/utils/translation/__init__.py
	modified:   django/utils/translation/trans_real.py
	modified:   django/views/decorators/http.py
	modified:   django/views/static.py
	modified:   docs/_ext/djangodocs.py
	modified:   tests/admin_inlines/models.py
	modified:   tests/admin_scripts/tests.py
	modified:   tests/admin_views/custom_has_permission_admin.py
	modified:   tests/admin_views/customadmin.py
	modified:   tests/auth_tests/models/custom_permissions.py
	modified:   tests/auth_tests/test_forms.py
	modified:   tests/auth_tests/test_views.py
	modified:   tests/backends/test_utils.py
	modified:   tests/backends/tests.py
	modified:   tests/bash_completion/tests.py
	modified:   tests/basic/models.py
	modified:   tests/contenttypes_tests/test_views.py
	modified:   tests/context_processors/tests.py
	modified:   tests/db_functions/comparison/test_nullif.py
	modified:   tests/db_functions/datetime/test_extract_trunc.py
	modified:   tests/db_functions/models.py
	modified:   tests/db_functions/text/test_md5.py
	modified:   tests/db_functions/text/test_sha1.py
	modified:   tests/db_functions/text/test_sha224.py
	modified:   tests/db_functions/text/test_sha256.py
	modified:   tests/db_functions/text/test_sha384.py
	modified:   tests/db_functions/text/test_sha512.py
	modified:   tests/db_utils/tests.py
	modified:   tests/distinct_on_fields/tests.py
	modified:   tests/expressions/models.py
	modified:   tests/file_uploads/uploadhandler.py
	modified:   tests/force_insert_update/models.py
	modified:   tests/forms_tests/field_tests/test_filefield.py
	modified:   tests/gis_tests/geogapp/tests.py
	modified:   tests/gis_tests/test_data.py
	modified:   tests/httpwrappers/tests.py
	modified:   tests/invalid_models_tests/test_models.py
	modified:   tests/m2m_and_m2o/models.py
	modified:   tests/m2m_intermediary/models.py
	modified:   tests/many_to_many/models.py
	modified:   tests/many_to_one/models.py
	modified:   tests/middleware/tests.py
	modified:   tests/migrations/test_commands.py
	modified:   tests/migrations/test_executor.py
	modified:   tests/model_inheritance/models.py
	modified:   tests/model_inheritance_regress/tests.py
	modified:   tests/null_fk_ordering/models.py
	modified:   tests/one_to_one/models.py
	modified:   tests/order_with_respect_to/base_tests.py
	modified:   tests/postgres_tests/fields.py
	modified:   tests/postgres_tests/test_search.py
	modified:   tests/proxy_models/models.py
	modified:   tests/queries/models.py
	modified:   tests/requests_tests/test_accept_header.py
	modified:   tests/save_delete_hooks/models.py
	modified:   tests/schema/fields.py
	modified:   tests/schema/tests.py
	modified:   tests/serializers/models/base.py
	modified:   tests/serializers/models/data.py
	modified:   tests/serializers/models/natural.py
	modified:   tests/serializers/test_data.py
	modified:   tests/servers/tests.py
	modified:   tests/sessions_tests/models.py
	modified:   tests/signals/models.py
	modified:   tests/template_tests/test_parser.py
	modified:   tests/test_client/tests.py
	modified:   tests/test_client_regress/tests.py
	modified:   tests/test_runner/tests.py
	modified:   tests/transactions/models.py
	modified:   tests/urlpatterns_reverse/tests.py
	modified:   tests/urls.py
	modified:   tests/user_commands/tests.py
	modified:   tests/utils_tests/test_datastructures.py
	modified:   tests/utils_tests/test_jslex.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 1250483ebf73f7a82ff820b94092c63ce4238264
Author: skidipap <mad.skidipap@gmail.com>
Date:   Wed Feb 1 17:18:35 2023 +0700

    Fixed #34286 -- Fixed admindocs markups for case-sensitive template/view names.

diff --git a/AUTHORS b/AUTHORS
index 4e91d7b3f3..2cddbf9280 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -808,6 +808,7 @@ answer newbie questions, and generally made Django that much better:
     Radek Švarz <https://www.svarz.cz/translate/>
     Rafael Giebisch <rafael@giebisch-mail.de>
     Raffaele Salmaso <raffaele@salmaso.org>
+    Rahmat Faisal <mad.skidipap@gmail.com>
     Rajesh Dhawan <rajesh.dhawan@gmail.com>
     Ramez Ashraf <ramezashraf@gmail.com>
     Ramil Yanbulatov <rayman1104@gmail.com>
diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 6edff502ec..3708a32813 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -101,6 +101,9 @@ ROLES = {
 
 
 def create_reference_role(rolename, urlbase):
+    # Views and template names are case-sensitive.
+    is_case_sensitive = rolename in ["template", "view"]
+
     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):
         if options is None:
             options = {}
@@ -111,7 +114,7 @@ def create_reference_role(rolename, urlbase):
                 urlbase
                 % (
                     inliner.document.settings.link_base,
-                    text.lower(),
+                    text if is_case_sensitive else text.lower(),
                 )
             ),
             **options,
diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py
index 18c6769fad..8152857263 100644
--- a/tests/admin_docs/test_utils.py
+++ b/tests/admin_docs/test_utils.py
@@ -104,6 +104,22 @@ class TestUtils(AdminDocsSimpleTestCase):
             self.assertEqual(parse_rst(body, ""), "<p>second line</p>\n")
         self.assertEqual(stderr.getvalue(), "")
 
+    def test_parse_rst_view_case_sensitive(self):
+        source = ":view:`myapp.views.Index`"
+        rendered = (
+            '<p><a class="reference external" '
+            'href="/admindocs/views/myapp.views.Index/">myapp.views.Index</a></p>'
+        )
+        self.assertHTMLEqual(parse_rst(source, "view"), rendered)
+
+    def test_parse_rst_template_case_sensitive(self):
+        source = ":template:`Index.html`"
+        rendered = (
+            '<p><a class="reference external" href="/admindocs/templates/Index.html/">'
+            "Index.html</a></p>"
+        )
+        self.assertHTMLEqual(parse_rst(source, "template"), rendered)
+
     def test_publish_parts(self):
         """
         Django shouldn't break the default role for interpreted text
+ git -c core.fileMode=false diff 1250483ebf73f7a82ff820b94092c63ce4238264
diff --git a/django/__main__.py b/django/__main__.py
index 8b96e91ea8..7415143848 100644
--- a/django/__main__.py
+++ b/django/__main__.py
@@ -3,6 +3,7 @@ Invokes django-admin when the django module is run as a script.
 
 Example: python -m django check
 """
+
 from django.core import management
 
 if __name__ == "__main__":
diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index dd6954a065..695fbba2d6 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -5,6 +5,7 @@ Filters are specified in models with the "list_filter" option.
 Each filter subclass knows how to display a filter for a field that passes a
 certain test -- e.g. being a DateField or ForeignKey.
 """
+
 import datetime
 
 from django.contrib.admin.options import IncorrectLookupParameters
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index ed70f93628..9c21e91cb1 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1692,9 +1692,9 @@ class ModelAdmin(BaseModelAdmin):
                 has_delete_permission = inline.has_delete_permission(request, obj)
             else:
                 # Disable all edit-permissions, and override formset settings.
-                has_add_permission = (
-                    has_change_permission
-                ) = has_delete_permission = False
+                has_add_permission = has_change_permission = has_delete_permission = (
+                    False
+                )
                 formset.extra = formset.max_num = 0
             has_view_permission = inline.has_view_permission(request, obj)
             prepopulated = dict(inline.get_prepopulated_fields(request, obj))
@@ -1829,9 +1829,11 @@ class ModelAdmin(BaseModelAdmin):
             form,
             list(fieldsets),
             # Clear prepopulated fields on a view-only form to avoid a crash.
-            self.get_prepopulated_fields(request, obj)
-            if add or self.has_change_permission(request, obj)
-            else {},
+            (
+                self.get_prepopulated_fields(request, obj)
+                if add or self.has_change_permission(request, obj)
+                else {}
+            ),
             readonly_fields,
             model_admin=self,
         )
diff --git a/django/contrib/admin/templatetags/admin_list.py b/django/contrib/admin/templatetags/admin_list.py
index ee6f3a7666..8cafa12f0e 100644
--- a/django/contrib/admin/templatetags/admin_list.py
+++ b/django/contrib/admin/templatetags/admin_list.py
@@ -166,9 +166,9 @@ def result_headers(cl):
             "url_primary": cl.get_query_string({ORDER_VAR: ".".join(o_list_primary)}),
             "url_remove": cl.get_query_string({ORDER_VAR: ".".join(o_list_remove)}),
             "url_toggle": cl.get_query_string({ORDER_VAR: ".".join(o_list_toggle)}),
-            "class_attrib": format_html(' class="{}"', " ".join(th_classes))
-            if th_classes
-            else "",
+            "class_attrib": (
+                format_html(' class="{}"', " ".join(th_classes)) if th_classes else ""
+            ),
         }
 
 
@@ -262,9 +262,11 @@ def items_for_result(cl, result, form):
                 link_or_text = format_html(
                     '<a href="{}"{}>{}</a>',
                     url,
-                    format_html(' data-popup-opener="{}"', value)
-                    if cl.is_popup
-                    else "",
+                    (
+                        format_html(' data-popup-opener="{}"', value)
+                        if cl.is_popup
+                        else ""
+                    ),
                     result_repr,
                 )
 
diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index c7d5db209e..38ef10d65b 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -1,6 +1,7 @@
 """
 Form Widget classes specific to the Django admin site.
 """
+
 import copy
 import json
 
diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..ddcfec18f2 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseUser even when django.contrib.auth is
 not in INSTALLED_APPS.
 """
+
 import unicodedata
 import warnings
 
diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py
index ad31a6e68f..b29a980cb2 100644
--- a/django/contrib/auth/management/__init__.py
+++ b/django/contrib/auth/management/__init__.py
@@ -1,6 +1,7 @@
 """
 Creates permissions for all installed apps that need permissions.
 """
+
 import getpass
 import unicodedata
 
diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py
index 48994e5371..050c0b334d 100644
--- a/django/contrib/auth/management/commands/createsuperuser.py
+++ b/django/contrib/auth/management/commands/createsuperuser.py
@@ -1,6 +1,7 @@
 """
 Management utility to create superusers.
 """
+
 import getpass
 import os
 import sys
@@ -267,15 +268,19 @@ class Command(BaseCommand):
         return "%s%s%s: " % (
             capfirst(field.verbose_name),
             " (leave blank to use '%s')" % default if default else "",
-            " (%s.%s)"
-            % (
-                field.remote_field.model._meta.object_name,
-                field.m2m_target_field_name()
-                if field.many_to_many
-                else field.remote_field.field_name,
-            )
-            if field.remote_field
-            else "",
+            (
+                " (%s.%s)"
+                % (
+                    field.remote_field.model._meta.object_name,
+                    (
+                        field.m2m_target_field_name()
+                        if field.many_to_many
+                        else field.remote_field.field_name
+                    ),
+                )
+                if field.remote_field
+                else ""
+            ),
         )
 
     @cached_property
diff --git a/django/contrib/gis/db/backends/oracle/models.py b/django/contrib/gis/db/backends/oracle/models.py
index f06f73148e..af749c3435 100644
--- a/django/contrib/gis/db/backends/oracle/models.py
+++ b/django/contrib/gis/db/backends/oracle/models.py
@@ -7,6 +7,7 @@
  For example, the `USER_SDO_GEOM_METADATA` is used for the GeometryColumns
  model and the `SDO_COORD_REF_SYS` is used for the SpatialRefSys model.
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 
diff --git a/django/contrib/gis/db/backends/oracle/operations.py b/django/contrib/gis/db/backends/oracle/operations.py
index ed86985cf8..eb86dc39de 100644
--- a/django/contrib/gis/db/backends/oracle/operations.py
+++ b/django/contrib/gis/db/backends/oracle/operations.py
@@ -7,6 +7,7 @@
  support for an internal JVM, and Java libraries are required to use
  the WKT constructors.
 """
+
 import re
 
 from django.contrib.gis.db import models
diff --git a/django/contrib/gis/db/backends/postgis/adapter.py b/django/contrib/gis/db/backends/postgis/adapter.py
index c95f903253..c9715e1756 100644
--- a/django/contrib/gis/db/backends/postgis/adapter.py
+++ b/django/contrib/gis/db/backends/postgis/adapter.py
@@ -1,6 +1,7 @@
 """
  This object provides quoting for GEOS geometries into PostgreSQL/PostGIS.
 """
+
 from django.contrib.gis.db.backends.postgis.pgraster import to_pgraster
 from django.contrib.gis.geos import GEOSGeometry
 from django.db.backends.postgresql.psycopg_any import sql
diff --git a/django/contrib/gis/db/backends/postgis/const.py b/django/contrib/gis/db/backends/postgis/const.py
index 2f4393d25e..8bc16a1abb 100644
--- a/django/contrib/gis/db/backends/postgis/const.py
+++ b/django/contrib/gis/db/backends/postgis/const.py
@@ -1,6 +1,7 @@
 """
 PostGIS to GDAL conversion constant definitions
 """
+
 # Lookup to convert pixel type values from GDAL to PostGIS
 GDAL_TO_POSTGIS = [None, 4, 6, 5, 8, 7, 10, 11, None, None, None, None]
 
diff --git a/django/contrib/gis/db/backends/postgis/models.py b/django/contrib/gis/db/backends/postgis/models.py
index b7b568274a..e35ef75ce9 100644
--- a/django/contrib/gis/db/backends/postgis/models.py
+++ b/django/contrib/gis/db/backends/postgis/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the PostGIS backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models
 
diff --git a/django/contrib/gis/db/backends/spatialite/models.py b/django/contrib/gis/db/backends/spatialite/models.py
index 7cc98ae126..0f5f7b55ef 100644
--- a/django/contrib/gis/db/backends/spatialite/models.py
+++ b/django/contrib/gis/db/backends/spatialite/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the SpatiaLite backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models
 
diff --git a/django/contrib/gis/db/backends/spatialite/operations.py b/django/contrib/gis/db/backends/spatialite/operations.py
index 0b8b26ab6f..d39f7a9e0d 100644
--- a/django/contrib/gis/db/backends/spatialite/operations.py
+++ b/django/contrib/gis/db/backends/spatialite/operations.py
@@ -2,6 +2,7 @@
 SQL functions reference lists:
 https://www.gaia-gis.it/gaia-sins/spatialite-sql-4.3.0.html
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.operations import BaseSpatialOperations
 from django.contrib.gis.db.backends.spatialite.adapter import SpatiaLiteAdapter
diff --git a/django/contrib/gis/db/models/functions.py b/django/contrib/gis/db/models/functions.py
index 19da355d28..3f26f4c6bc 100644
--- a/django/contrib/gis/db/models/functions.py
+++ b/django/contrib/gis/db/models/functions.py
@@ -127,9 +127,11 @@ class SQLiteDecimalToFloatMixin:
         copy = self.copy()
         copy.set_source_expressions(
             [
-                Value(float(expr.value))
-                if hasattr(expr, "value") and isinstance(expr.value, Decimal)
-                else expr
+                (
+                    Value(float(expr.value))
+                    if hasattr(expr, "value") and isinstance(expr.value, Decimal)
+                    else expr
+                )
                 for expr in copy.get_source_expressions()
             ]
         )
@@ -343,9 +345,9 @@ class Distance(DistanceResultMixin, OracleToleranceMixin, GeoFunc):
     def as_sqlite(self, compiler, connection, **extra_context):
         if self.geo_field.geodetic(connection):
             # SpatiaLite returns NULL instead of zero on geodetic coordinates
-            extra_context[
-                "template"
-            ] = "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            extra_context["template"] = (
+                "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            )
             extra_context["spheroid"] = int(bool(self.spheroid))
         return super().as_sql(compiler, connection, **extra_context)
 
diff --git a/django/contrib/gis/db/models/proxy.py b/django/contrib/gis/db/models/proxy.py
index 4db365dc16..b415e147fc 100644
--- a/django/contrib/gis/db/models/proxy.py
+++ b/django/contrib/gis/db/models/proxy.py
@@ -5,6 +5,7 @@ objects corresponding to geographic model fields.
 
 Thanks to Robert Coup for providing this functionality (see #4322).
 """
+
 from django.db.models.query_utils import DeferredAttribute
 
 
diff --git a/django/contrib/gis/db/models/sql/conversion.py b/django/contrib/gis/db/models/sql/conversion.py
index be712319fb..7802b2dd1e 100644
--- a/django/contrib/gis/db/models/sql/conversion.py
+++ b/django/contrib/gis/db/models/sql/conversion.py
@@ -2,6 +2,7 @@
 This module holds simple classes to convert geospatial values from the
 database.
 """
+
 from decimal import Decimal
 
 from django.contrib.gis.measure import Area, Distance
diff --git a/django/contrib/gis/gdal/__init__.py b/django/contrib/gis/gdal/__init__.py
index 9ed6e31156..e63808d39d 100644
--- a/django/contrib/gis/gdal/__init__.py
+++ b/django/contrib/gis/gdal/__init__.py
@@ -25,6 +25,7 @@
  by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C
  library on your system.
 """
+
 from django.contrib.gis.gdal.datasource import DataSource
 from django.contrib.gis.gdal.driver import Driver
 from django.contrib.gis.gdal.envelope import Envelope
diff --git a/django/contrib/gis/gdal/datasource.py b/django/contrib/gis/gdal/datasource.py
index dfd043ab0c..c7ff48b8f1 100644
--- a/django/contrib/gis/gdal/datasource.py
+++ b/django/contrib/gis/gdal/datasource.py
@@ -33,6 +33,7 @@
               #  OFTReal returns floats, all else returns string.
               val = field.value
 """
+
 from ctypes import byref
 from pathlib import Path
 
diff --git a/django/contrib/gis/gdal/envelope.py b/django/contrib/gis/gdal/envelope.py
index 4c2c1e4a1a..05832bd7cc 100644
--- a/django/contrib/gis/gdal/envelope.py
+++ b/django/contrib/gis/gdal/envelope.py
@@ -10,6 +10,7 @@
                            |          |
  Lower left (min_x, min_y) o----------+
 """
+
 from ctypes import Structure, c_double
 
 from django.contrib.gis.gdal.error import GDALException
diff --git a/django/contrib/gis/gdal/geometries.py b/django/contrib/gis/gdal/geometries.py
index f74dc688b3..8ea6b5ffc4 100644
--- a/django/contrib/gis/gdal/geometries.py
+++ b/django/contrib/gis/gdal/geometries.py
@@ -38,6 +38,7 @@
   >>> print(gt1 == 3, gt1 == 'Polygon') # Equivalence works w/non-OGRGeomType objects
   True True
 """
+
 import sys
 from binascii import b2a_hex
 from ctypes import byref, c_char_p, c_double, c_ubyte, c_void_p, string_at
diff --git a/django/contrib/gis/gdal/prototypes/ds.py b/django/contrib/gis/gdal/prototypes/ds.py
index bc5250e2db..b6e9d4a0b8 100644
--- a/django/contrib/gis/gdal/prototypes/ds.py
+++ b/django/contrib/gis/gdal/prototypes/ds.py
@@ -3,6 +3,7 @@
  related data structures. OGR_Dr_*, OGR_DS_*, OGR_L_*, OGR_F_*,
  OGR_Fld_* routines are relevant here.
 """
+
 from ctypes import POINTER, c_char_p, c_double, c_int, c_long, c_void_p
 
 from django.contrib.gis.gdal.envelope import OGREnvelope
diff --git a/django/contrib/gis/gdal/prototypes/errcheck.py b/django/contrib/gis/gdal/prototypes/errcheck.py
index 52bb7cb083..d37e81cdf6 100644
--- a/django/contrib/gis/gdal/prototypes/errcheck.py
+++ b/django/contrib/gis/gdal/prototypes/errcheck.py
@@ -2,6 +2,7 @@
  This module houses the error-checking routines used by the GDAL
  ctypes prototypes.
 """
+
 from ctypes import c_void_p, string_at
 
 from django.contrib.gis.gdal.error import GDALException, SRSException, check_err
diff --git a/django/contrib/gis/gdal/prototypes/generation.py b/django/contrib/gis/gdal/prototypes/generation.py
index 230e56f665..4d34a96e70 100644
--- a/django/contrib/gis/gdal/prototypes/generation.py
+++ b/django/contrib/gis/gdal/prototypes/generation.py
@@ -2,6 +2,7 @@
  This module contains functions that generate ctypes prototypes for the
  GDAL routines.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_int64, c_void_p
 from functools import partial
 
diff --git a/django/contrib/gis/gdal/prototypes/raster.py b/django/contrib/gis/gdal/prototypes/raster.py
index 59b930cb02..b7871d1969 100644
--- a/django/contrib/gis/gdal/prototypes/raster.py
+++ b/django/contrib/gis/gdal/prototypes/raster.py
@@ -2,6 +2,7 @@
 This module houses the ctypes function prototypes for GDAL DataSource (raster)
 related data structures.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_void_p
 from functools import partial
 
diff --git a/django/contrib/gis/gdal/raster/const.py b/django/contrib/gis/gdal/raster/const.py
index 6d3761d9fb..87670facec 100644
--- a/django/contrib/gis/gdal/raster/const.py
+++ b/django/contrib/gis/gdal/raster/const.py
@@ -1,6 +1,7 @@
 """
 GDAL - Constant definitions
 """
+
 from ctypes import c_double, c_float, c_int16, c_int32, c_ubyte, c_uint16, c_uint32
 
 # See https://gdal.org/api/raster_c_api.html#_CPPv412GDALDataType
diff --git a/django/contrib/gis/gdal/srs.py b/django/contrib/gis/gdal/srs.py
index c8877753fd..f54ab04692 100644
--- a/django/contrib/gis/gdal/srs.py
+++ b/django/contrib/gis/gdal/srs.py
@@ -26,6 +26,7 @@
   >>> print(srs.name)
   NAD83 / Texas South Central
 """
+
 from ctypes import byref, c_char_p, c_int
 from enum import IntEnum
 from types import NoneType
diff --git a/django/contrib/gis/geoip2/__init__.py b/django/contrib/gis/geoip2/__init__.py
index 71b71f68db..0df5827c25 100644
--- a/django/contrib/gis/geoip2/__init__.py
+++ b/django/contrib/gis/geoip2/__init__.py
@@ -11,6 +11,7 @@ downloaded from MaxMind at https://dev.maxmind.com/geoip/geoip2/geolite2/.
 Grab GeoLite2-Country.mmdb.gz and GeoLite2-City.mmdb.gz, and unzip them in the
 directory corresponding to settings.GEOIP_PATH.
 """
+
 __all__ = ["HAS_GEOIP2"]
 
 try:
diff --git a/django/contrib/gis/geos/__init__.py b/django/contrib/gis/geos/__init__.py
index 27de1ca8e6..f50cd19856 100644
--- a/django/contrib/gis/geos/__init__.py
+++ b/django/contrib/gis/geos/__init__.py
@@ -2,6 +2,7 @@
 The GeoDjango GEOS module.  Please consult the GeoDjango documentation
 for more details: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geos/
 """
+
 from .collections import (  # NOQA
     GeometryCollection,
     MultiLineString,
diff --git a/django/contrib/gis/geos/collections.py b/django/contrib/gis/geos/collections.py
index abfec8af3d..35262a5622 100644
--- a/django/contrib/gis/geos/collections.py
+++ b/django/contrib/gis/geos/collections.py
@@ -2,6 +2,7 @@
  This module houses the Geometry Collection objects:
  GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon
 """
+
 from django.contrib.gis.geos import prototypes as capi
 from django.contrib.gis.geos.geometry import GEOSGeometry, LinearGeometryMixin
 from django.contrib.gis.geos.libgeos import GEOM_PTR
diff --git a/django/contrib/gis/geos/coordseq.py b/django/contrib/gis/geos/coordseq.py
index 07a3b7d213..671b1b0c95 100644
--- a/django/contrib/gis/geos/coordseq.py
+++ b/django/contrib/gis/geos/coordseq.py
@@ -3,6 +3,7 @@
  by GEOSGeometry to house the actual coordinates of the Point,
  LineString, and LinearRing geometries.
 """
+
 from ctypes import byref, c_byte, c_double, c_uint
 
 from django.contrib.gis.geos import prototypes as capi
diff --git a/django/contrib/gis/geos/geometry.py b/django/contrib/gis/geos/geometry.py
index 63e47aa130..5719a9df1f 100644
--- a/django/contrib/gis/geos/geometry.py
+++ b/django/contrib/gis/geos/geometry.py
@@ -2,6 +2,7 @@
  This module contains the 'base' GEOSGeometry object -- all GEOS Geometries
  inherit from this object.
 """
+
 import re
 from ctypes import addressof, byref, c_double
 
diff --git a/django/contrib/gis/geos/io.py b/django/contrib/gis/geos/io.py
index d7898065f0..8dd3f289e6 100644
--- a/django/contrib/gis/geos/io.py
+++ b/django/contrib/gis/geos/io.py
@@ -3,6 +3,7 @@ Module that holds classes for performing I/O operations on GEOS geometry
 objects.  Specifically, this has Python implementations of WKB/WKT
 reader and writer classes.
 """
+
 from django.contrib.gis.geos.geometry import GEOSGeometry
 from django.contrib.gis.geos.prototypes.io import (
     WKBWriter,
diff --git a/django/contrib/gis/geos/libgeos.py b/django/contrib/gis/geos/libgeos.py
index 1121b4f715..b883c6c090 100644
--- a/django/contrib/gis/geos/libgeos.py
+++ b/django/contrib/gis/geos/libgeos.py
@@ -6,6 +6,7 @@
  This module also houses GEOS Pointer utilities, including
  get_pointer_arr(), and GEOM_PTR.
 """
+
 import logging
 import os
 from ctypes import CDLL, CFUNCTYPE, POINTER, Structure, c_char_p
diff --git a/django/contrib/gis/geos/prototypes/errcheck.py b/django/contrib/gis/geos/prototypes/errcheck.py
index a527f513a7..42b24c2891 100644
--- a/django/contrib/gis/geos/prototypes/errcheck.py
+++ b/django/contrib/gis/geos/prototypes/errcheck.py
@@ -1,6 +1,7 @@
 """
  Error checking functions for GEOS ctypes prototype functions.
 """
+
 from ctypes import c_void_p, string_at
 
 from django.contrib.gis.geos.error import GEOSException
diff --git a/django/contrib/gis/geos/prototypes/misc.py b/django/contrib/gis/geos/prototypes/misc.py
index fccd0ecc9e..bd5859e79b 100644
--- a/django/contrib/gis/geos/prototypes/misc.py
+++ b/django/contrib/gis/geos/prototypes/misc.py
@@ -2,6 +2,7 @@
  This module is for the miscellaneous GEOS routines, particularly the
  ones that return the area, distance, and length.
 """
+
 from ctypes import POINTER, c_double, c_int
 
 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/predicates.py b/django/contrib/gis/geos/prototypes/predicates.py
index d2e113a734..a79d4e3187 100644
--- a/django/contrib/gis/geos/prototypes/predicates.py
+++ b/django/contrib/gis/geos/prototypes/predicates.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  unary and binary predicate operations on geometries.
 """
+
 from ctypes import c_byte, c_char_p, c_double
 
 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/topology.py b/django/contrib/gis/geos/prototypes/topology.py
index e61eae964a..9323bb2d16 100644
--- a/django/contrib/gis/geos/prototypes/topology.py
+++ b/django/contrib/gis/geos/prototypes/topology.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  topological operations on geometries.
 """
+
 from ctypes import c_double, c_int
 
 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/utils/__init__.py b/django/contrib/gis/utils/__init__.py
index 26334fb6a4..c88f789fb7 100644
--- a/django/contrib/gis/utils/__init__.py
+++ b/django/contrib/gis/utils/__init__.py
@@ -1,6 +1,7 @@
 """
  This module contains useful utilities for GeoDjango.
 """
+
 from django.contrib.gis.utils.ogrinfo import ogrinfo  # NOQA
 from django.contrib.gis.utils.ogrinspect import mapping, ogrinspect  # NOQA
 from django.contrib.gis.utils.srs import add_srs_entry  # NOQA
diff --git a/django/contrib/gis/utils/ogrinspect.py b/django/contrib/gis/utils/ogrinspect.py
index 40ca0cb461..76c8bfbcfa 100644
--- a/django/contrib/gis/utils/ogrinspect.py
+++ b/django/contrib/gis/utils/ogrinspect.py
@@ -3,6 +3,7 @@ This module is for inspecting OGR data sources and generating either
 models for GeoDjango and/or mapping dictionaries for use with the
 `LayerMapping` utility.
 """
+
 from django.contrib.gis.gdal import DataSource
 from django.contrib.gis.gdal.field import (
     OFTDate,
diff --git a/django/contrib/postgres/search.py b/django/contrib/postgres/search.py
index 4e370aa167..e0fcd84132 100644
--- a/django/contrib/postgres/search.py
+++ b/django/contrib/postgres/search.py
@@ -116,9 +116,11 @@ class SearchVector(SearchVectorCombinable, Func):
         clone.set_source_expressions(
             [
                 Coalesce(
-                    expression
-                    if isinstance(expression.output_field, (CharField, TextField))
-                    else Cast(expression, TextField()),
+                    (
+                        expression
+                        if isinstance(expression.output_field, (CharField, TextField))
+                        else Cast(expression, TextField())
+                    ),
                     Value(""),
                 )
                 for expression in clone.get_source_expressions()
diff --git a/django/contrib/sessions/base_session.py b/django/contrib/sessions/base_session.py
index 603d2fe12c..8809dd36f7 100644
--- a/django/contrib/sessions/base_session.py
+++ b/django/contrib/sessions/base_session.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseSession even
 when django.contrib.sessions is not in INSTALLED_APPS.
 """
+
 from django.db import models
 from django.utils.translation import gettext_lazy as _
 
diff --git a/django/contrib/staticfiles/views.py b/django/contrib/staticfiles/views.py
index 83d04d4cec..3fb2677322 100644
--- a/django/contrib/staticfiles/views.py
+++ b/django/contrib/staticfiles/views.py
@@ -3,6 +3,7 @@ Views and functions for serving static files. These are only to be used during
 development, and SHOULD NOT be used in a production setting.
 
 """
+
 import os
 import posixpath
 
diff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py
index eb7fa5b2e9..444d958e68 100644
--- a/django/core/cache/__init__.py
+++ b/django/core/cache/__init__.py
@@ -12,6 +12,7 @@ object.
 
 See docs/topics/cache.txt for information on the public API.
 """
+
 from django.core import signals
 from django.core.cache.backends.base import (
     BaseCache,
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index 646644f3e0..0a4d34463e 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -1,6 +1,7 @@
 """
 Global Django exception and warning classes.
 """
+
 import operator
 
 from django.utils.hashable import make_hashable
diff --git a/django/core/files/images.py b/django/core/files/images.py
index 6a603f24fc..7c1532ac8f 100644
--- a/django/core/files/images.py
+++ b/django/core/files/images.py
@@ -3,6 +3,7 @@ Utility functions for handling images.
 
 Requires Pillow as you might imagine.
 """
+
 import struct
 import zlib
 
diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c0f471f87d..a7a7a22dce 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -16,6 +16,7 @@ Example Usage::
     ...     locks.lock(f, locks.LOCK_EX)
     ...     f.write('Django')
 """
+
 import os
 
 __all__ = ("LOCK_EX", "LOCK_SH", "LOCK_NB", "lock", "unlock")
diff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py
index b6c185e8fc..ab86f7fede 100644
--- a/django/core/files/uploadhandler.py
+++ b/django/core/files/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Base file upload handler classes, and the built-in concrete subclasses
 """
+
 import os
 from io import BytesIO
 
diff --git a/django/core/mail/__init__.py b/django/core/mail/__init__.py
index dc63e8702c..676326697b 100644
--- a/django/core/mail/__init__.py
+++ b/django/core/mail/__init__.py
@@ -1,6 +1,7 @@
 """
 Tools for sending email.
 """
+
 from django.conf import settings
 
 # Imported for backwards compatibility and for the sake
diff --git a/django/core/mail/backends/console.py b/django/core/mail/backends/console.py
index ee5dd28504..2d7c778cc1 100644
--- a/django/core/mail/backends/console.py
+++ b/django/core/mail/backends/console.py
@@ -1,6 +1,7 @@
 """
 Email backend that writes messages to console instead of sending them.
 """
+
 import sys
 import threading
 
diff --git a/django/core/mail/backends/smtp.py b/django/core/mail/backends/smtp.py
index 7ce29d27fd..04b6ee3246 100644
--- a/django/core/mail/backends/smtp.py
+++ b/django/core/mail/backends/smtp.py
@@ -1,4 +1,5 @@
 """SMTP email backend class."""
+
 import smtplib
 import ssl
 import threading
diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..241944beb3 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -2,6 +2,7 @@
 Base classes for writing management commands (named commands which can
 be executed through ``django-admin`` or ``manage.py``).
 """
+
 import argparse
 import os
 import sys
@@ -71,6 +72,33 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        # Ensure subparsers are instances of CommandParser.
+        kwargs.setdefault("parser_class", type(self))
+        action = super().add_subparsers(**kwargs)
+
+        # Copy missing_args_message and called_from_command_line from the
+        # parent parser to the subparsers.
+        if hasattr(self, "missing_args_message"):
+            action.missing_args_message = self.missing_args_message
+        if hasattr(self, "called_from_command_line"):
+            action.called_from_command_line = self.called_from_command_line
+
+        # Override the add_parser method of the action to pass the copied
+        # arguments to the subparser constructor.
+        original_add_parser = action.add_parser
+
+        def add_parser_wrapper(*args, **kwargs):
+            parser = original_add_parser(*args, **kwargs)
+            if hasattr(action, "missing_args_message"):
+                parser.missing_args_message = action.missing_args_message
+            if hasattr(action, "called_from_command_line"):
+                parser.called_from_command_line = action.called_from_command_line
+            return parser
+
+        action.add_parser = add_parser_wrapper
+        return action
+
 
 def handle_default_options(options):
     """
@@ -518,9 +546,11 @@ class BaseCommand:
                 if issues:
                     visible_issue_count += len(issues)
                     formatted = (
-                        self.style.ERROR(str(e))
-                        if e.is_serious()
-                        else self.style.WARNING(str(e))
+                        (
+                            self.style.ERROR(str(e))
+                            if e.is_serious()
+                            else self.style.WARNING(str(e))
+                        )
                         for e in issues
                     )
                     formatted = "\n".join(sorted(formatted))
@@ -533,11 +563,15 @@ class BaseCommand:
             if visible_issue_count:
                 footer += "\n"
             footer += "System check identified %s (%s silenced)." % (
-                "no issues"
-                if visible_issue_count == 0
-                else "1 issue"
-                if visible_issue_count == 1
-                else "%s issues" % visible_issue_count,
+                (
+                    "no issues"
+                    if visible_issue_count == 0
+                    else (
+                        "1 issue"
+                        if visible_issue_count == 1
+                        else "%s issues" % visible_issue_count
+                    )
+                ),
                 len(all_issues) - visible_issue_count,
             )
 
diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index 20dffac05f..1fbca9244b 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -1,6 +1,7 @@
 """
 Module for abstract serializer/unserializer base classes.
 """
+
 from io import StringIO
 
 from django.core.exceptions import ObjectDoesNotExist
diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py
index 1d3269c41a..e2b9aa0949 100644
--- a/django/core/serializers/xml_serializer.py
+++ b/django/core/serializers/xml_serializer.py
@@ -1,6 +1,7 @@
 """
 XML serializer.
 """
+
 import json
 from xml.dom import pulldom
 from xml.sax import handler
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 3a83e14be9..35d6541691 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -690,9 +690,9 @@ class BaseDatabaseSchemaEditor:
                 namespace, _ = split_identifier(model._meta.db_table)
                 definition += " " + self.sql_create_column_inline_fk % {
                     "name": self._fk_constraint_name(model, field, constraint_suffix),
-                    "namespace": "%s." % self.quote_name(namespace)
-                    if namespace
-                    else "",
+                    "namespace": (
+                        "%s." % self.quote_name(namespace) if namespace else ""
+                    ),
                     "column": self.quote_name(field.column),
                     "to_table": self.quote_name(to_table),
                     "to_column": self.quote_name(to_column),
diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 412d07a993..75787ef8ab 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -2,6 +2,7 @@
 Helpers to manipulate deferred DDL statements that might need to be adjusted or
 discarded within when executing a migration.
 """
+
 from copy import deepcopy
 
 
diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 6811b10abb..521187d2d4 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -3,6 +3,7 @@ MySQL database backend for Django.
 
 Requires mysqlclient: https://pypi.org/project/mysqlclient/
 """
+
 from django.core.exceptions import ImproperlyConfigured
 from django.db import IntegrityError
 from django.db.backends import utils as backend_utils
diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py
index 845ab8ccf5..611a3ea75a 100644
--- a/django/db/backends/oracle/base.py
+++ b/django/db/backends/oracle/base.py
@@ -3,6 +3,7 @@ Oracle database backend for Django.
 
 Requires cx_Oracle: https://oracle.github.io/python-cx_Oracle/
 """
+
 import datetime
 import decimal
 import os
diff --git a/django/db/backends/oracle/creation.py b/django/db/backends/oracle/creation.py
index df773bff8c..b0a5177728 100644
--- a/django/db/backends/oracle/creation.py
+++ b/django/db/backends/oracle/creation.py
@@ -133,20 +133,20 @@ class DatabaseCreation(BaseDatabaseCreation):
         credentials in the SAVED_USER/SAVED_PASSWORD key in the settings dict.
         """
         real_settings = settings.DATABASES[self.connection.alias]
-        real_settings["SAVED_USER"] = self.connection.settings_dict[
-            "SAVED_USER"
-        ] = self.connection.settings_dict["USER"]
+        real_settings["SAVED_USER"] = self.connection.settings_dict["SAVED_USER"] = (
+            self.connection.settings_dict["USER"]
+        )
         real_settings["SAVED_PASSWORD"] = self.connection.settings_dict[
             "SAVED_PASSWORD"
         ] = self.connection.settings_dict["PASSWORD"]
         real_test_settings = real_settings["TEST"]
         test_settings = self.connection.settings_dict["TEST"]
-        real_test_settings["USER"] = real_settings["USER"] = test_settings[
-            "USER"
-        ] = self.connection.settings_dict["USER"] = parameters["user"]
-        real_settings["PASSWORD"] = self.connection.settings_dict[
-            "PASSWORD"
-        ] = parameters["password"]
+        real_test_settings["USER"] = real_settings["USER"] = test_settings["USER"] = (
+            self.connection.settings_dict["USER"]
+        ) = parameters["user"]
+        real_settings["PASSWORD"] = self.connection.settings_dict["PASSWORD"] = (
+            parameters["password"]
+        )
 
     def set_as_test_mirror(self, primary_settings_dict):
         """
diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 321fa530aa..52374ba6c8 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -266,9 +266,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             % {
                 "column": self.quote_name(new_field.column),
                 "type": new_type,
-                "collation": " " + self._collate_sql(new_collation)
-                if new_collation
-                else "",
+                "collation": (
+                    " " + self._collate_sql(new_collation) if new_collation else ""
+                ),
             },
             [],
         )
diff --git a/django/db/backends/sqlite3/_functions.py b/django/db/backends/sqlite3/_functions.py
index 7e86950f7d..0171b60f38 100644
--- a/django/db/backends/sqlite3/_functions.py
+++ b/django/db/backends/sqlite3/_functions.py
@@ -1,6 +1,7 @@
 """
 Implementations of SQL functions for SQLite.
 """
+
 import functools
 import random
 import statistics
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index a3a382a56b..e7205cefc9 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -1,6 +1,7 @@
 """
 SQLite backend for the sqlite3 module in the standard library.
 """
+
 import datetime
 import decimal
 import warnings
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 5a5f5a14fb..d9a8ed16ed 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -566,11 +566,12 @@ class MigrationAutodetector:
                                 rem_model_state.app_label,
                                 rem_model_state.name_lower,
                             )
-                            self.renamed_models_rel[
-                                renamed_models_rel_key
-                            ] = "%s.%s" % (
-                                model_state.app_label,
-                                model_state.name_lower,
+                            self.renamed_models_rel[renamed_models_rel_key] = (
+                                "%s.%s"
+                                % (
+                                    model_state.app_label,
+                                    model_state.name_lower,
+                                )
                             )
                             self.old_model_keys.remove((rem_app_label, rem_model_name))
                             self.old_model_keys.add((app_label, model_name))
@@ -971,9 +972,9 @@ class MigrationAutodetector:
                                 (rem_app_label, rem_model_name, rem_field_name)
                             )
                             old_field_keys.add((app_label, model_name, field_name))
-                            self.renamed_fields[
-                                app_label, model_name, field_name
-                            ] = rem_field_name
+                            self.renamed_fields[app_label, model_name, field_name] = (
+                                rem_field_name
+                            )
                             break
 
     def generate_renamed_fields(self):
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 81dcd06e04..50445f3101 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -131,11 +131,11 @@ class MigrationLoader:
                         "Migration %s in app %s has no Migration class"
                         % (migration_name, app_config.label)
                     )
-                self.disk_migrations[
-                    app_config.label, migration_name
-                ] = migration_module.Migration(
-                    migration_name,
-                    app_config.label,
+                self.disk_migrations[app_config.label, migration_name] = (
+                    migration_module.Migration(
+                        migration_name,
+                        app_config.label,
+                    )
                 )
 
     def get_migration(self, app_label, name_prefix):
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 8847441a03..ee9d0d6117 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -55,11 +55,11 @@ class CreateModel(ModelOperation):
         _check_for_duplicates(
             "bases",
             (
-                base._meta.label_lower
-                if hasattr(base, "_meta")
-                else base.lower()
-                if isinstance(base, str)
-                else base
+                (
+                    base._meta.label_lower
+                    if hasattr(base, "_meta")
+                    else base.lower() if isinstance(base, str) else base
+                )
                 for base in self.bases
             ),
         )
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..bb2a19edbb 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -525,11 +525,11 @@ class ProjectState:
             if model_state.options.get("proxy"):
                 proxy_models[model_key] = model_state
                 # Find a concrete model for the proxy.
-                concrete_models_mapping[
-                    model_key
-                ] = self._find_concrete_model_from_proxy(
-                    proxy_models,
-                    model_state,
+                concrete_models_mapping[model_key] = (
+                    self._find_concrete_model_from_proxy(
+                        proxy_models,
+                        model_state,
+                    )
                 )
             else:
                 concrete_models_mapping[model_key] = model_key
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index e672f0aeb0..c0cb2d6f1a 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -1,6 +1,7 @@
 """
 Classes to represent the definitions of aggregate functions.
 """
+
 from django.core.exceptions import FieldError, FullResultSet
 from django.db.models.expressions import Case, Func, Star, Value, When
 from django.db.models.fields import IntegerField
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 06bab385a3..4441b76ecc 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -2161,9 +2161,11 @@ class Model(AltersData, metaclass=ModelBase):
         opts = cls._meta
         valid_fields = set(
             chain.from_iterable(
-                (f.name, f.attname)
-                if not (f.auto_created and not f.concrete)
-                else (f.field.related_query_name(),)
+                (
+                    (f.name, f.attname)
+                    if not (f.auto_created and not f.concrete)
+                    else (f.field.related_query_name(),)
+                )
                 for f in chain(opts.fields, opts.related_objects)
             )
         )
diff --git a/django/db/models/constants.py b/django/db/models/constants.py
index a0c99c95fc..cec1b9b90f 100644
--- a/django/db/models/constants.py
+++ b/django/db/models/constants.py
@@ -1,6 +1,7 @@
 """
 Constants used across the ORM in general.
 """
+
 from enum import Enum
 
 # Separator used to split filter strings apart.
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2d8a5c5919..980db8e542 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -201,9 +201,11 @@ class BaseExpression:
 
     def _parse_expressions(self, *expressions):
         return [
-            arg
-            if hasattr(arg, "resolve_expression")
-            else (F(arg) if isinstance(arg, str) else Value(arg))
+            (
+                arg
+                if hasattr(arg, "resolve_expression")
+                else (F(arg) if isinstance(arg, str) else Value(arg))
+            )
             for arg in expressions
         ]
 
@@ -275,9 +277,11 @@ class BaseExpression:
         c.is_summary = summarize
         c.set_source_expressions(
             [
-                expr.resolve_expression(query, allow_joins, reuse, summarize)
-                if expr
-                else None
+                (
+                    expr.resolve_expression(query, allow_joins, reuse, summarize)
+                    if expr
+                    else None
+                )
                 for expr in c.get_source_expressions()
             ]
         )
@@ -356,22 +360,16 @@ class BaseExpression:
         field = self.output_field
         internal_type = field.get_internal_type()
         if internal_type == "FloatField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else float(value)
+            return lambda value, expression, connection: (
+                None if value is None else float(value)
             )
         elif internal_type.endswith("IntegerField"):
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else int(value)
+            return lambda value, expression, connection: (
+                None if value is None else int(value)
             )
         elif internal_type == "DecimalField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else Decimal(value)
+            return lambda value, expression, connection: (
+                None if value is None else Decimal(value)
             )
         return self._convert_value_noop
 
@@ -417,9 +415,11 @@ class BaseExpression:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                F(f"{prefix}{expr.name}")
-                if isinstance(expr, F)
-                else expr.prefix_references(prefix)
+                (
+                    F(f"{prefix}{expr.name}")
+                    if isinstance(expr, F)
+                    else expr.prefix_references(prefix)
+                )
                 for expr in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py
index de7eef4cdc..0bf1416215 100644
--- a/django/db/models/functions/comparison.py
+++ b/django/db/models/functions/comparison.py
@@ -1,4 +1,5 @@
 """Database functions that do comparisons or type conversions."""
+
 from django.db import NotSupportedError
 from django.db.models.expressions import Func, Value
 from django.db.models.fields import TextField
diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index baed94227a..5e5019e63a 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -313,9 +313,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate DateField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         elif isinstance(field, TimeField) and (
@@ -326,9 +328,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate TimeField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         return copy
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 460143ba5a..5fa4654a84 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -47,9 +47,11 @@ class ATan2(NumericOutputFieldMixin, Func):
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, FloatField())
-                if isinstance(expression.output_field, IntegerField)
-                else expression
+                (
+                    Cast(expression, FloatField())
+                    if isinstance(expression.output_field, IntegerField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()[::-1]
             ]
         )
diff --git a/django/db/models/functions/mixins.py b/django/db/models/functions/mixins.py
index caf20e131d..d983df7725 100644
--- a/django/db/models/functions/mixins.py
+++ b/django/db/models/functions/mixins.py
@@ -14,9 +14,11 @@ class FixDecimalInputMixin:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, output_field)
-                if isinstance(expression.output_field, FloatField)
-                else expression
+                (
+                    Cast(expression, output_field)
+                    if isinstance(expression.output_field, FloatField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/indexes.py b/django/db/models/indexes.py
index b5451f9e24..0ddfefec38 100644
--- a/django/db/models/indexes.py
+++ b/django/db/models/indexes.py
@@ -196,9 +196,11 @@ class Index:
             "" if not self.fields else " fields=%s" % repr(self.fields),
             "" if not self.expressions else " expressions=%s" % repr(self.expressions),
             "" if not self.name else " name=%s" % repr(self.name),
-            ""
-            if self.db_tablespace is None
-            else " db_tablespace=%s" % repr(self.db_tablespace),
+            (
+                ""
+                if self.db_tablespace is None
+                else " db_tablespace=%s" % repr(self.db_tablespace)
+            ),
             "" if self.condition is None else " condition=%s" % self.condition,
             "" if not self.include else " include=%s" % repr(self.include),
             "" if not self.opclasses else " opclasses=%s" % repr(self.opclasses),
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 9e2d9373e6..21d9fa7f26 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -249,9 +249,11 @@ class FieldGetDbPrepValueMixin:
         )
         return (
             "%s",
-            [get_db_prep_value(v, connection, prepared=True) for v in value]
-            if self.get_db_prep_lookup_value_is_iterable
-            else [get_db_prep_value(value, connection, prepared=True)],
+            (
+                [get_db_prep_value(v, connection, prepared=True) for v in value]
+                if self.get_db_prep_lookup_value_is_iterable
+                else [get_db_prep_value(value, connection, prepared=True)]
+            ),
         )
 
 
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 9d621c4f69..0a9d72d7b9 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -108,9 +108,11 @@ class ModelIterable(BaseIterable):
                 related_objs,
                 operator.attrgetter(
                     *[
-                        field.attname
-                        if from_field == "self"
-                        else queryset.model._meta.get_field(from_field).attname
+                        (
+                            field.attname
+                            if from_field == "self"
+                            else queryset.model._meta.get_field(from_field).attname
+                        )
                         for from_field in field.from_fields
                     ]
                 ),
@@ -1338,9 +1340,7 @@ class QuerySet(AltersData):
         clone._iterable_class = (
             NamedValuesListIterable
             if named
-            else FlatValuesListIterable
-            if flat
-            else ValuesListIterable
+            else FlatValuesListIterable if flat else ValuesListIterable
         )
         return clone
 
@@ -1606,9 +1606,11 @@ class QuerySet(AltersData):
         if names is None:
             names = set(
                 chain.from_iterable(
-                    (field.name, field.attname)
-                    if hasattr(field, "attname")
-                    else (field.name,)
+                    (
+                        (field.name, field.attname)
+                        if hasattr(field, "attname")
+                        else (field.name,)
+                    )
                     for field in self.model._meta.get_fields()
                 )
             )
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index a82ed23dbb..f50c755bec 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -5,6 +5,7 @@ Factored out from django.db.models.query to avoid making the main module very
 large and/or so that they can be used by other modules without getting into
 circular import difficulties.
 """
+
 import functools
 import inspect
 import logging
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index c07076d54a..7939c59356 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1185,9 +1185,9 @@ class SQLCompiler:
                 "field": f,
                 "reverse": False,
                 "local_setter": f.set_cached_value,
-                "remote_setter": f.remote_field.set_cached_value
-                if f.unique
-                else lambda x, y: None,
+                "remote_setter": (
+                    f.remote_field.set_cached_value if f.unique else lambda x, y: None
+                ),
                 "from_parent": False,
             }
             related_klass_infos.append(klass_info)
diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py
index 069eb1a301..3b3b306c74 100644
--- a/django/db/models/sql/datastructures.py
+++ b/django/db/models/sql/datastructures.py
@@ -2,6 +2,7 @@
 Useful auxiliary data structures for query construction. Not useful outside
 the SQL domain.
 """
+
 from django.core.exceptions import FullResultSet
 from django.db.models.sql.constants import INNER, LOUTER
 
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 0aa07e0b99..bca78171b7 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -6,6 +6,7 @@ themselves do not have to (and could be backed by things other than SQL
 databases). The abstraction barrier only works one way: this module has to know
 all about the internals of models in order to get the information it needs.
 """
+
 import copy
 import difflib
 import functools
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..3b159233a0 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -1,6 +1,7 @@
 """
 Code to manage the creation and SQL rendering of 'where' constraints.
 """
+
 import operator
 from functools import reduce
 
diff --git a/django/forms/models.py b/django/forms/models.py
index 35ecdc1c0d..b45622b31b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -2,6 +2,7 @@
 Helper functions for creating Form classes from Django models
 and database field objects.
 """
+
 from itertools import chain
 
 from django.core.exceptions import (
@@ -821,9 +822,12 @@ class BaseModelFormSet(BaseFormSet, AltersData):
                 )
                 # Reduce Model instances to their primary key values
                 row_data = tuple(
-                    d._get_pk_val() if hasattr(d, "_get_pk_val")
-                    # Prevent "unhashable type: list" errors later on.
-                    else tuple(d) if isinstance(d, list) else d
+                    (
+                        d._get_pk_val()
+                        if hasattr(d, "_get_pk_val")
+                        # Prevent "unhashable type: list" errors later on.
+                        else tuple(d) if isinstance(d, list) else d
+                    )
                     for d in row_data
                 )
                 if row_data and None not in row_data:
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..5bd05b41f4 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -100,9 +100,11 @@ class Media:
 
     def render_js(self):
         return [
-            path.__html__()
-            if hasattr(path, "__html__")
-            else format_html('<script src="{}"></script>', self.absolute_path(path))
+            (
+                path.__html__()
+                if hasattr(path, "__html__")
+                else format_html('<script src="{}"></script>', self.absolute_path(path))
+            )
             for path in self._js
         ]
 
@@ -112,12 +114,14 @@ class Media:
         media = sorted(self._css)
         return chain.from_iterable(
             [
-                path.__html__()
-                if hasattr(path, "__html__")
-                else format_html(
-                    '<link href="{}" media="{}" rel="stylesheet">',
-                    self.absolute_path(path),
-                    medium,
+                (
+                    path.__html__()
+                    if hasattr(path, "__html__")
+                    else format_html(
+                        '<link href="{}" media="{}" rel="stylesheet">',
+                        self.absolute_path(path),
+                        medium,
+                    )
                 )
                 for path in self._css[medium]
             ]
diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py
index 8f0d85c3d8..eddb08f53e 100644
--- a/django/http/multipartparser.py
+++ b/django/http/multipartparser.py
@@ -4,6 +4,7 @@ Multi-part parsing for file uploads.
 Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
 file upload handlers for processing.
 """
+
 import base64
 import binascii
 import collections
diff --git a/django/http/request.py b/django/http/request.py
index d451147bc1..db4a81287f 100644
--- a/django/http/request.py
+++ b/django/http/request.py
@@ -182,9 +182,11 @@ class HttpRequest:
         return "%s%s%s" % (
             escape_uri_path(path),
             "/" if force_append_slash and not path.endswith("/") else "",
-            ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
-            if self.META.get("QUERY_STRING", "")
-            else "",
+            (
+                ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
+                if self.META.get("QUERY_STRING", "")
+                else ""
+            ),
         )
 
     def get_signed_cookie(self, key, default=RAISE_ERROR, salt="", max_age=None):
diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py
index 2c0d2cc120..f7943494ba 100644
--- a/django/middleware/csrf.py
+++ b/django/middleware/csrf.py
@@ -4,6 +4,7 @@ Cross Site Request Forgery Middleware.
 This module provides a middleware that implements protection
 against request forgeries from other sites.
 """
+
 import logging
 import string
 from collections import defaultdict
diff --git a/django/shortcuts.py b/django/shortcuts.py
index 90ec1bedc5..4783612bba 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -3,6 +3,7 @@ This module collects helper functions and classes that "span" multiple levels
 of MVC. In other words, these functions/classes introduce controlled coupling
 for convenience's sake.
 """
+
 from django.http import (
     Http404,
     HttpResponse,
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 78881987fc..1104bfa4bc 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -1,4 +1,5 @@
 """Default variable filters."""
+
 import random as random_module
 import re
 import types
diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py
index b10a811c7c..f6261964e1 100644
--- a/django/template/defaulttags.py
+++ b/django/template/defaulttags.py
@@ -1,4 +1,5 @@
 """Default tags used by the template system, available to all templates."""
+
 import re
 import sys
 import warnings
diff --git a/django/template/engine.py b/django/template/engine.py
index f2215c0e4e..9882d3a16d 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -70,9 +70,11 @@ class Engine:
             self.__class__.__qualname__,
             "" if not self.dirs else " dirs=%s" % repr(self.dirs),
             self.app_dirs,
-            ""
-            if not self.context_processors
-            else " context_processors=%s" % repr(self.context_processors),
+            (
+                ""
+                if not self.context_processors
+                else " context_processors=%s" % repr(self.context_processors)
+            ),
             self.debug,
             repr(self.loaders),
             repr(self.string_if_invalid),
diff --git a/django/template/smartif.py b/django/template/smartif.py
index 5b15a5a476..0a917c2aaa 100644
--- a/django/template/smartif.py
+++ b/django/template/smartif.py
@@ -1,6 +1,7 @@
 """
 Parser and utilities for the smart 'if' tag
 """
+
 # Using a simple top down parser, as described here:
 #    http://effbot.org/zone/simple-top-down-parsing.htm.
 # 'led' = left denotation
diff --git a/django/test/html.py b/django/test/html.py
index 87e213d651..f70796494b 100644
--- a/django/test/html.py
+++ b/django/test/html.py
@@ -1,4 +1,5 @@
 """Compare two HTML documents."""
+
 import html
 from html.parser import HTMLParser
 
diff --git a/django/urls/conf.py b/django/urls/conf.py
index 40708028a3..bb61063d77 100644
--- a/django/urls/conf.py
+++ b/django/urls/conf.py
@@ -1,4 +1,5 @@
 """Functions for use in URLsconfs."""
+
 from functools import partial
 from importlib import import_module
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index b021673772..8b03c5801e 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -5,6 +5,7 @@ URLResolver is the main class here. Its resolve() method takes a URL (as
 a string) and returns a ResolverMatch object which provides access to all
 attributes of the resolved URL match.
 """
+
 import functools
 import inspect
 import re
@@ -91,9 +92,11 @@ class ResolverMatch:
                 self.app_names,
                 self.namespaces,
                 self.route,
-                f", captured_kwargs={self.captured_kwargs!r}"
-                if self.captured_kwargs
-                else "",
+                (
+                    f", captured_kwargs={self.captured_kwargs!r}"
+                    if self.captured_kwargs
+                    else ""
+                ),
                 f", extra_kwargs={self.extra_kwargs!r}" if self.extra_kwargs else "",
             )
         )
diff --git a/django/utils/archive.py b/django/utils/archive.py
index 71ec2d0015..56f34c0038 100644
--- a/django/utils/archive.py
+++ b/django/utils/archive.py
@@ -21,6 +21,7 @@ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 """
+
 import os
 import shutil
 import stat
diff --git a/django/utils/cache.py b/django/utils/cache.py
index cf797d0279..3b014fbe51 100644
--- a/django/utils/cache.py
+++ b/django/utils/cache.py
@@ -14,6 +14,7 @@ cache keys to prevent delivery of wrong content.
 An example: i18n middleware would need to distinguish caches by the
 "Accept-language" header.
 """
+
 import time
 from collections import defaultdict
 from hashlib import md5
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..5134b854d6 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -1,6 +1,7 @@
 """
 Django's standard crypto functions and utilities.
 """
+
 import hashlib
 import hmac
 import secrets
diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index a6c315e4cf..a3274b901c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -10,6 +10,7 @@ Usage:
 7th October 2003 11:39
 >>>
 """
+
 import calendar
 from datetime import date, datetime, time
 from email.utils import format_datetime as format_datetime_rfc5322
diff --git a/django/utils/deconstruct.py b/django/utils/deconstruct.py
index f8754c1974..2e5463a651 100644
--- a/django/utils/deconstruct.py
+++ b/django/utils/deconstruct.py
@@ -42,9 +42,11 @@ def deconstructible(*args, path=None):
                     "#serializing-values" % (name, module_name, get_docs_version())
                 )
             return (
-                path
-                if path and type(obj) is klass
-                else f"{obj.__class__.__module__}.{name}",
+                (
+                    path
+                    if path and type(obj) is klass
+                    else f"{obj.__class__.__module__}.{name}"
+                ),
                 obj._constructor_args[0],
                 obj._constructor_args[1],
             )
diff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py
index 31ca9a2db9..3bd456ca68 100644
--- a/django/utils/feedgenerator.py
+++ b/django/utils/feedgenerator.py
@@ -21,6 +21,7 @@ Sample usage:
 For definitions of the different versions of RSS, see:
 https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss
 """
+
 import datetime
 import email
 from io import StringIO
diff --git a/django/utils/jslex.py b/django/utils/jslex.py
index 93a1a2e972..fc46a686c7 100644
--- a/django/utils/jslex.py
+++ b/django/utils/jslex.py
@@ -1,4 +1,5 @@
 """JsLex: a lexer for JavaScript"""
+
 # Originally from https://bitbucket.org/ned/jslex
 import re
 
diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py
index 9ee82e1a9b..b71298e399 100644
--- a/django/utils/regex_helper.py
+++ b/django/utils/regex_helper.py
@@ -5,6 +5,7 @@ Used internally by Django and not intended for external use.
 This is not, and is not intended to be, a complete reg-exp decompiler. It
 should be good enough for a large class of URLS, however.
 """
+
 import re
 
 from django.utils.functional import SimpleLazyObject
diff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py
index 0b3f78e486..0618f02159 100644
--- a/django/utils/translation/__init__.py
+++ b/django/utils/translation/__init__.py
@@ -1,6 +1,7 @@
 """
 Internationalization support.
 """
+
 from contextlib import ContextDecorator
 from decimal import ROUND_UP, Decimal
 
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 46a94b99ff..51b06a13fd 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -1,4 +1,5 @@
 """Translation helper functions."""
+
 import functools
 import gettext as gettext_module
 import os
diff --git a/django/views/decorators/http.py b/django/views/decorators/http.py
index 6d88a633eb..1ae89a10d9 100644
--- a/django/views/decorators/http.py
+++ b/django/views/decorators/http.py
@@ -1,6 +1,7 @@
 """
 Decorators for views based on HTTP headers.
 """
+
 import datetime
 from functools import wraps
 
diff --git a/django/views/static.py b/django/views/static.py
index f75b86f970..34bb1fe758 100644
--- a/django/views/static.py
+++ b/django/views/static.py
@@ -2,6 +2,7 @@
 Views and functions for serving static files. These are only to be used
 during development, and SHOULD NOT be used in a production setting.
 """
+
 import mimetypes
 import posixpath
 from pathlib import Path
diff --git a/docs/_ext/djangodocs.py b/docs/_ext/djangodocs.py
index 5e99f9f5e0..c74a5aab74 100644
--- a/docs/_ext/djangodocs.py
+++ b/docs/_ext/djangodocs.py
@@ -1,6 +1,7 @@
 """
 Sphinx plugins for Django documentation.
 """
+
 import json
 import os
 import re
diff --git a/tests/admin_inlines/models.py b/tests/admin_inlines/models.py
index a8d2ee02e1..eca5bae422 100644
--- a/tests/admin_inlines/models.py
+++ b/tests/admin_inlines/models.py
@@ -1,6 +1,7 @@
 """
 Testing of admin inline formsets.
 """
+
 import random
 
 from django.contrib.contenttypes.fields import GenericForeignKey
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index c70adf2509..84d287cb32 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -3,6 +3,7 @@ A series of tests to establish that the command-line management tools work as
 advertised - especially with regards to the handling of the
 DJANGO_SETTINGS_MODULE and default settings.py files.
 """
+
 import os
 import re
 import shutil
@@ -757,7 +758,9 @@ class DjangoAdminSettingsDirectory(AdminScriptTestCase):
         with open(os.path.join(app_path, "apps.py"), encoding="utf8") as f:
             content = f.read()
             self.assertIn("class こんにちはConfig(AppConfig)", content)
-            self.assertIn('name = "こんにちは"' if HAS_BLACK else "name = 'こんにちは'", content)
+            self.assertIn(
+                'name = "こんにちは"' if HAS_BLACK else "name = 'こんにちは'", content
+            )
 
     def test_builtin_command(self):
         """
diff --git a/tests/admin_views/custom_has_permission_admin.py b/tests/admin_views/custom_has_permission_admin.py
index 6dc2011b24..17b6498aab 100644
--- a/tests/admin_views/custom_has_permission_admin.py
+++ b/tests/admin_views/custom_has_permission_admin.py
@@ -1,6 +1,7 @@
 """
 A custom AdminSite for AdminViewPermissionsTest.test_login_has_permission().
 """
+
 from django.contrib import admin
 from django.contrib.auth import get_permission_codename
 from django.contrib.auth.forms import AuthenticationForm
diff --git a/tests/admin_views/customadmin.py b/tests/admin_views/customadmin.py
index e3429ec4bc..4b30c5c30f 100644
--- a/tests/admin_views/customadmin.py
+++ b/tests/admin_views/customadmin.py
@@ -1,6 +1,7 @@
 """
 A second, custom AdminSite -- see tests.CustomAdminSiteTests.
 """
+
 from django.contrib import admin
 from django.contrib.auth.admin import UserAdmin
 from django.contrib.auth.models import User
diff --git a/tests/auth_tests/models/custom_permissions.py b/tests/auth_tests/models/custom_permissions.py
index 52d28bd276..385de4e846 100644
--- a/tests/auth_tests/models/custom_permissions.py
+++ b/tests/auth_tests/models/custom_permissions.py
@@ -3,6 +3,7 @@ The CustomPermissionsUser users email as the identifier, but uses the normal
 Django permissions model. This allows us to check that the PermissionsMixin
 includes everything that is needed to interact with the ModelBackend.
 """
+
 from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
 from django.db import models
 
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index c3ce1f570f..1ef7b60490 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -870,9 +870,9 @@ class UserChangeFormTest(TestDataMixin, TestCase):
         class MyUserForm(UserChangeForm):
             def __init__(self, *args, **kwargs):
                 super().__init__(*args, **kwargs)
-                self.fields[
-                    "groups"
-                ].help_text = "These groups give users different permissions"
+                self.fields["groups"].help_text = (
+                    "These groups give users different permissions"
+                )
 
             class Meta(UserChangeForm.Meta):
                 fields = ("groups",)
diff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py
index d15a166c98..0897046c1f 100644
--- a/tests/auth_tests/test_views.py
+++ b/tests/auth_tests/test_views.py
@@ -818,9 +818,9 @@ class LoginTest(AuthViewsTestCase):
         # Use POST request to log in
         SessionMiddleware(get_response).process_request(req)
         CsrfViewMiddleware(get_response).process_view(req, LoginView.as_view(), (), {})
-        req.META[
-            "SERVER_NAME"
-        ] = "testserver"  # Required to have redirect work in login view
+        req.META["SERVER_NAME"] = (
+            "testserver"  # Required to have redirect work in login view
+        )
         req.META["SERVER_PORT"] = 80
         resp = CsrfViewMiddleware(LoginView.as_view())(req)
         csrf_cookie = resp.cookies.get(settings.CSRF_COOKIE_NAME, None)
diff --git a/tests/backends/test_utils.py b/tests/backends/test_utils.py
index 03d4b036fd..704498836e 100644
--- a/tests/backends/test_utils.py
+++ b/tests/backends/test_utils.py
@@ -1,4 +1,5 @@
 """Tests for django.db.backends.utils"""
+
 from decimal import Decimal, Rounded
 
 from django.db import NotSupportedError, connection
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index bfdf5ed4b4..40a41a2f29 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -1,4 +1,5 @@
 """Tests related to django.db.backends that haven't been organized."""
+
 import datetime
 import threading
 import unittest
diff --git a/tests/bash_completion/tests.py b/tests/bash_completion/tests.py
index 856e351dfa..324e980937 100644
--- a/tests/bash_completion/tests.py
+++ b/tests/bash_completion/tests.py
@@ -1,6 +1,7 @@
 """
 A series of tests to establish that the command-line bash completion works.
 """
+
 import os
 import sys
 import unittest
diff --git a/tests/basic/models.py b/tests/basic/models.py
index 59a6a8d67f..36efc1f730 100644
--- a/tests/basic/models.py
+++ b/tests/basic/models.py
@@ -3,6 +3,7 @@ Bare-bones model
 
 This is a basic model with only two non-primary-key fields.
 """
+
 import uuid
 
 from django.db import models
diff --git a/tests/contenttypes_tests/test_views.py b/tests/contenttypes_tests/test_views.py
index 4d85d15065..75f39a7bab 100644
--- a/tests/contenttypes_tests/test_views.py
+++ b/tests/contenttypes_tests/test_views.py
@@ -150,10 +150,8 @@ class ContentTypesViewsSiteRelTests(TestCase):
         """
         The shortcut view works if a model's ForeignKey to site is None.
         """
-        get_model.side_effect = (
-            lambda *args, **kwargs: MockSite
-            if args[0] == "sites.Site"
-            else ModelWithNullFKToSite
+        get_model.side_effect = lambda *args, **kwargs: (
+            MockSite if args[0] == "sites.Site" else ModelWithNullFKToSite
         )
 
         obj = ModelWithNullFKToSite.objects.create(title="title")
@@ -172,10 +170,8 @@ class ContentTypesViewsSiteRelTests(TestCase):
         site if it's attached to the object or to the domain of the first site
         found in the m2m relationship.
         """
-        get_model.side_effect = (
-            lambda *args, **kwargs: MockSite
-            if args[0] == "sites.Site"
-            else ModelWithM2MToSite
+        get_model.side_effect = lambda *args, **kwargs: (
+            MockSite if args[0] == "sites.Site" else ModelWithM2MToSite
         )
 
         # get_current_site() will lookup a Site object, so these must match the
diff --git a/tests/context_processors/tests.py b/tests/context_processors/tests.py
index 23f9d59149..ba92ff8b05 100644
--- a/tests/context_processors/tests.py
+++ b/tests/context_processors/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for Django's bundled context processors.
 """
+
 from django.test import SimpleTestCase, TestCase, override_settings
 
 
diff --git a/tests/db_functions/comparison/test_nullif.py b/tests/db_functions/comparison/test_nullif.py
index 9839e6b4c5..cdbc3d6960 100644
--- a/tests/db_functions/comparison/test_nullif.py
+++ b/tests/db_functions/comparison/test_nullif.py
@@ -23,9 +23,11 @@ class NullIfTests(TestCase):
             [
                 ("smithj",),
                 (
-                    ""
-                    if connection.features.interprets_empty_strings_as_nulls
-                    else None,
+                    (
+                        ""
+                        if connection.features.interprets_empty_strings_as_nulls
+                        else None
+                    ),
                 ),
             ],
         )
diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py
index 29212b6e24..e576e6e464 100644
--- a/tests/db_functions/datetime/test_extract_trunc.py
+++ b/tests/db_functions/datetime/test_extract_trunc.py
@@ -113,9 +113,11 @@ class DateFunctionTests(TestCase):
             end_date=end_datetime.date() if end_datetime else None,
             start_time=start_datetime.time() if start_datetime else None,
             end_time=end_datetime.time() if end_datetime else None,
-            duration=(end_datetime - start_datetime)
-            if start_datetime and end_datetime
-            else None,
+            duration=(
+                (end_datetime - start_datetime)
+                if start_datetime and end_datetime
+                else None
+            ),
         )
 
     def test_extract_year_exact_lookup(self):
diff --git a/tests/db_functions/models.py b/tests/db_functions/models.py
index d6a06511bc..c126f1bae1 100644
--- a/tests/db_functions/models.py
+++ b/tests/db_functions/models.py
@@ -1,6 +1,7 @@
 """
 Tests for built in Function expressions.
 """
+
 from django.db import models
 
 
diff --git a/tests/db_functions/text/test_md5.py b/tests/db_functions/text/test_md5.py
index fd0aec58f2..4fd66f0397 100644
--- a/tests/db_functions/text/test_md5.py
+++ b/tests/db_functions/text/test_md5.py
@@ -35,9 +35,11 @@ class MD5Tests(TestCase):
                 "ca6d48f6772000141e66591aee49d56c",
                 "bf2c13bc1154e3d2e7df848cbc8be73d",
                 "d41d8cd98f00b204e9800998ecf8427e",
-                "d41d8cd98f00b204e9800998ecf8427e"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "d41d8cd98f00b204e9800998ecf8427e"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )
 
diff --git a/tests/db_functions/text/test_sha1.py b/tests/db_functions/text/test_sha1.py
index 175c5727ff..ef846d07aa 100644
--- a/tests/db_functions/text/test_sha1.py
+++ b/tests/db_functions/text/test_sha1.py
@@ -35,9 +35,11 @@ class SHA1Tests(TestCase):
                 "0781e0745a2503e6ded05ed5bc554c421d781b0c",
                 "198d15ea139de04060caf95bc3e0ec5883cba881",
                 "da39a3ee5e6b4b0d3255bfef95601890afd80709",
-                "da39a3ee5e6b4b0d3255bfef95601890afd80709"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "da39a3ee5e6b4b0d3255bfef95601890afd80709"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )
 
diff --git a/tests/db_functions/text/test_sha224.py b/tests/db_functions/text/test_sha224.py
index a6254f43e3..60d9e378a6 100644
--- a/tests/db_functions/text/test_sha224.py
+++ b/tests/db_functions/text/test_sha224.py
@@ -37,9 +37,11 @@ class SHA224Tests(TestCase):
                 "2297904883e78183cb118fc3dc21a610d60daada7b6ebdbc85139f4d",
                 "eba942746e5855121d9d8f79e27dfdebed81adc85b6bf41591203080",
                 "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
-                "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )
 
diff --git a/tests/db_functions/text/test_sha256.py b/tests/db_functions/text/test_sha256.py
index b399dbecd3..0cf72783e7 100644
--- a/tests/db_functions/text/test_sha256.py
+++ b/tests/db_functions/text/test_sha256.py
@@ -35,9 +35,11 @@ class SHA256Tests(TestCase):
                 "6e4cce20cd83fc7c202f21a8b2452a68509cf24d1c272a045b5e0cfc43f0d94e",
                 "3ad2039e3ec0c88973ae1c0fce5a3dbafdd5a1627da0a92312c54ebfcf43988e",
                 "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
-                "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )
 
diff --git a/tests/db_functions/text/test_sha384.py b/tests/db_functions/text/test_sha384.py
index 250cadda4a..313f6e6d78 100644
--- a/tests/db_functions/text/test_sha384.py
+++ b/tests/db_functions/text/test_sha384.py
@@ -39,10 +39,12 @@ class SHA384Tests(TestCase):
                 "26676a43c7ba378621175853b0",
                 "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
                 "bfe76f65fbd51ad2f14898b95b",
-                "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
-                "bfe76f65fbd51ad2f14898b95b"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
+                    "bfe76f65fbd51ad2f14898b95b"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )
 
diff --git a/tests/db_functions/text/test_sha512.py b/tests/db_functions/text/test_sha512.py
index f5a7ad4ae5..b4c7a4bbd8 100644
--- a/tests/db_functions/text/test_sha512.py
+++ b/tests/db_functions/text/test_sha512.py
@@ -39,10 +39,12 @@ class SHA512Tests(TestCase):
                 "172d88798345a3a7666faf5f35a144c60812d3234dcd35f444624f2faee16857",
                 "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
                 "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
-                "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
-                "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
+                    "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )
 
diff --git a/tests/db_utils/tests.py b/tests/db_utils/tests.py
index a2d9cc7b5e..4028a8acdf 100644
--- a/tests/db_utils/tests.py
+++ b/tests/db_utils/tests.py
@@ -1,4 +1,5 @@
 """Tests for django.db.utils."""
+
 import unittest
 
 from django.core.exceptions import ImproperlyConfigured
diff --git a/tests/distinct_on_fields/tests.py b/tests/distinct_on_fields/tests.py
index b80878bbf2..93b3f27aec 100644
--- a/tests/distinct_on_fields/tests.py
+++ b/tests/distinct_on_fields/tests.py
@@ -76,9 +76,11 @@ class DistinctOnTests(TestCase):
             (StaffTag.objects.distinct("staff", "tag"), [self.st1]),
             (
                 Tag.objects.order_by("parent__pk", "pk").distinct("parent"),
-                [self.t2, self.t4, self.t1]
-                if connection.features.nulls_order_largest
-                else [self.t1, self.t2, self.t4],
+                (
+                    [self.t2, self.t4, self.t1]
+                    if connection.features.nulls_order_largest
+                    else [self.t1, self.t2, self.t4]
+                ),
             ),
             (
                 StaffTag.objects.select_related("staff")
diff --git a/tests/expressions/models.py b/tests/expressions/models.py
index 35985dc5f0..aa9dba3ebe 100644
--- a/tests/expressions/models.py
+++ b/tests/expressions/models.py
@@ -1,6 +1,7 @@
 """
 Tests for F() query expression syntax.
 """
+
 import uuid
 
 from django.db import models
diff --git a/tests/file_uploads/uploadhandler.py b/tests/file_uploads/uploadhandler.py
index a1e1a5af05..d3c88ac305 100644
--- a/tests/file_uploads/uploadhandler.py
+++ b/tests/file_uploads/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Upload handlers to test the upload API.
 """
+
 import os
 from tempfile import NamedTemporaryFile
 
diff --git a/tests/force_insert_update/models.py b/tests/force_insert_update/models.py
index a98eadb4f9..36cdbeb675 100644
--- a/tests/force_insert_update/models.py
+++ b/tests/force_insert_update/models.py
@@ -2,6 +2,7 @@
 Tests for forcing insert and update queries (instead of Django's normal
 automatic behavior).
 """
+
 from django.db import models
 
 
diff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py
index 56aaa311e0..4a561038ee 100644
--- a/tests/forms_tests/field_tests/test_filefield.py
+++ b/tests/forms_tests/field_tests/test_filefield.py
@@ -44,7 +44,8 @@ class FileFieldTest(SimpleTestCase):
         self.assertIsInstance(
             f.clean(
                 SimpleUploadedFile(
-                    "我隻氣墊船裝滿晒鱔.txt", "मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".encode()
+                    "我隻氣墊船裝滿晒鱔.txt",
+                    "मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".encode(),
                 )
             ),
             SimpleUploadedFile,
diff --git a/tests/gis_tests/geogapp/tests.py b/tests/gis_tests/geogapp/tests.py
index ae12d26706..55227ab860 100644
--- a/tests/gis_tests/geogapp/tests.py
+++ b/tests/gis_tests/geogapp/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for geography support in PostGIS
 """
+
 import os
 
 from django.contrib.gis.db import models
diff --git a/tests/gis_tests/test_data.py b/tests/gis_tests/test_data.py
index 0a94907320..8dd6042175 100644
--- a/tests/gis_tests/test_data.py
+++ b/tests/gis_tests/test_data.py
@@ -2,6 +2,7 @@
 This module has the mock object definitions used to hold reference geometry
 for the GEOS and GDAL tests.
 """
+
 import json
 import os
 
diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py
index 0a41ea5ec6..5f3f195c78 100644
--- a/tests/httpwrappers/tests.py
+++ b/tests/httpwrappers/tests.py
@@ -352,9 +352,9 @@ class HttpResponseTests(SimpleTestCase):
         h.headers["Content-Disposition"] = 'attachment; filename="%s"' % f
         # This one is triggering https://bugs.python.org/issue20747, that is Python
         # will itself insert a newline in the header
-        h.headers[
-            "Content-Disposition"
-        ] = 'attachment; filename="EdelRot_Blu\u0308te (3)-0.JPG"'
+        h.headers["Content-Disposition"] = (
+            'attachment; filename="EdelRot_Blu\u0308te (3)-0.JPG"'
+        )
 
     def test_newlines_in_headers(self):
         # Bug #10188: Do not allow newlines in headers (CR or LF)
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index ffc7579e10..ec1ff51e89 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -2002,15 +2002,17 @@ class ConstraintsTests(TestCase):
 
         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'missing_field'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_table_check_constraints
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'missing_field'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_table_check_constraints
+                else []
+            ),
         )
 
     @skipUnlessDBFeature("supports_table_check_constraints")
@@ -2356,15 +2358,17 @@ class ConstraintsTests(TestCase):
 
         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'missing_field'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'missing_field'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )
 
     def test_unique_constraint_condition_pointing_to_joined_fields(self):
@@ -2384,15 +2388,17 @@ class ConstraintsTests(TestCase):
 
         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the joined field 'parent__age__lt'.",
-                    obj=Model,
-                    id="models.E041",
-                )
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the joined field 'parent__age__lt'.",
+                        obj=Model,
+                        id="models.E041",
+                    )
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )
 
     def test_unique_constraint_pointing_to_reverse_o2o(self):
@@ -2411,15 +2417,17 @@ class ConstraintsTests(TestCase):
 
         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'model'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'model'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )
 
     def test_deferrable_unique_constraint(self):
diff --git a/tests/m2m_and_m2o/models.py b/tests/m2m_and_m2o/models.py
index 6a5b0b29c9..4cbd1eb4e8 100644
--- a/tests/m2m_and_m2o/models.py
+++ b/tests/m2m_and_m2o/models.py
@@ -3,6 +3,7 @@ Many-to-many and many-to-one relationships to the same table
 
 Make sure to set ``related_name`` if you use relationships to the same table.
 """
+
 from django.db import models
 
 
diff --git a/tests/m2m_intermediary/models.py b/tests/m2m_intermediary/models.py
index 1333d14b41..f82498651f 100644
--- a/tests/m2m_intermediary/models.py
+++ b/tests/m2m_intermediary/models.py
@@ -9,6 +9,7 @@ each ``Article``-``Reporter`` combination (a ``Writer``) has a ``position``
 field, which specifies the ``Reporter``'s position for the given article
 (e.g. "Staff writer").
 """
+
 from django.db import models
 
 
diff --git a/tests/many_to_many/models.py b/tests/many_to_many/models.py
index 541928e94d..42fc426990 100644
--- a/tests/many_to_many/models.py
+++ b/tests/many_to_many/models.py
@@ -6,6 +6,7 @@ To define a many-to-many relationship, use ``ManyToManyField()``.
 In this example, an ``Article`` can be published in multiple ``Publication``
 objects, and a ``Publication`` has multiple ``Article`` objects.
 """
+
 from django.db import models
 
 
diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py
index cca7e79817..56e660592a 100644
--- a/tests/many_to_one/models.py
+++ b/tests/many_to_one/models.py
@@ -3,6 +3,7 @@ Many-to-one relationships
 
 To define a many-to-one relationship, use ``ForeignKey()``.
 """
+
 from django.db import models
 
 
diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py
index 2153a0bb5a..4771bbe49a 100644
--- a/tests/middleware/tests.py
+++ b/tests/middleware/tests.py
@@ -851,9 +851,9 @@ class GZipMiddlewareTest(SimpleTestCase):
     def setUp(self):
         self.req = self.request_factory.get("/")
         self.req.META["HTTP_ACCEPT_ENCODING"] = "gzip, deflate"
-        self.req.META[
-            "HTTP_USER_AGENT"
-        ] = "Mozilla/5.0 (Windows NT 5.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
+        self.req.META["HTTP_USER_AGENT"] = (
+            "Mozilla/5.0 (Windows NT 5.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
+        )
         self.resp = HttpResponse()
         self.resp.status_code = 200
         self.resp.content = self.compressible_string
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 0117d1e4aa..3a8c174e8c 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -3055,9 +3055,11 @@ class OptimizeMigrationTests(MigrationTestBase):
             with open(initial_migration_file) as fp:
                 content = fp.read()
                 self.assertIn(
-                    '("bool", models.BooleanField'
-                    if HAS_BLACK
-                    else "('bool', models.BooleanField",
+                    (
+                        '("bool", models.BooleanField'
+                        if HAS_BLACK
+                        else "('bool', models.BooleanField"
+                    ),
                     content,
                 )
         self.assertEqual(
@@ -3084,9 +3086,11 @@ class OptimizeMigrationTests(MigrationTestBase):
             with open(initial_migration_file) as fp:
                 content = fp.read()
                 self.assertIn(
-                    '("bool", models.BooleanField'
-                    if HAS_BLACK
-                    else "('bool', models.BooleanField",
+                    (
+                        '("bool", models.BooleanField'
+                        if HAS_BLACK
+                        else "('bool', models.BooleanField"
+                    ),
                     content,
                 )
         self.assertEqual(out.getvalue(), "")
diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py
index 6232b44b98..571cb3e1a2 100644
--- a/tests/migrations/test_executor.py
+++ b/tests/migrations/test_executor.py
@@ -405,9 +405,9 @@ class ExecutorTests(MigrationTestBase):
             migrations_apps = executor.loader.project_state(
                 ("migrations", "0001_initial"),
             ).apps
-            global_apps.get_app_config("migrations").models[
-                "author"
-            ] = migrations_apps.get_model("migrations", "author")
+            global_apps.get_app_config("migrations").models["author"] = (
+                migrations_apps.get_model("migrations", "author")
+            )
             try:
                 migration = executor.loader.get_migration("auth", "0001_initial")
                 self.assertIs(executor.detect_soft_applied(None, migration)[0], True)
diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py
index dc0e238f7e..0541006cf5 100644
--- a/tests/model_inheritance/models.py
+++ b/tests/model_inheritance/models.py
@@ -11,6 +11,7 @@ Model inheritance exists in two varieties:
 
 Both styles are demonstrated here.
 """
+
 from django.db import models
 
 #
diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py
index 1a9f953d6f..ba31048ac2 100644
--- a/tests/model_inheritance_regress/tests.py
+++ b/tests/model_inheritance_regress/tests.py
@@ -1,6 +1,7 @@
 """
 Regression tests for Model inheritance behavior.
 """
+
 import datetime
 from operator import attrgetter
 from unittest import expectedFailure
diff --git a/tests/null_fk_ordering/models.py b/tests/null_fk_ordering/models.py
index adfdbf3bea..d7b6ad8238 100644
--- a/tests/null_fk_ordering/models.py
+++ b/tests/null_fk_ordering/models.py
@@ -5,6 +5,7 @@ Regression tests for proper working of ForeignKey(null=True). Tests these bugs:
 unexpected results
 
 """
+
 from django.db import models
 
 
diff --git a/tests/one_to_one/models.py b/tests/one_to_one/models.py
index ca459e9edf..20b2eeec7d 100644
--- a/tests/one_to_one/models.py
+++ b/tests/one_to_one/models.py
@@ -5,6 +5,7 @@ To define a one-to-one relationship, use ``OneToOneField()``.
 
 In this example, a ``Place`` optionally can be a ``Restaurant``.
 """
+
 from django.db import models
 
 
diff --git a/tests/order_with_respect_to/base_tests.py b/tests/order_with_respect_to/base_tests.py
index ea548ca076..676469aaa3 100644
--- a/tests/order_with_respect_to/base_tests.py
+++ b/tests/order_with_respect_to/base_tests.py
@@ -2,6 +2,7 @@
 The tests are shared with contenttypes_tests and so shouldn't import or
 reference any models directly. Subclasses should inherit django.test.TestCase.
 """
+
 from operator import attrgetter
 
 
diff --git a/tests/postgres_tests/fields.py b/tests/postgres_tests/fields.py
index 1565b5ed43..7c93d2039e 100644
--- a/tests/postgres_tests/fields.py
+++ b/tests/postgres_tests/fields.py
@@ -2,6 +2,7 @@
 Indirection layer for PostgreSQL-specific fields, so the tests don't fail when
 run with a backend other than PostgreSQL.
 """
+
 import enum
 
 from django.db import models
diff --git a/tests/postgres_tests/test_search.py b/tests/postgres_tests/test_search.py
index 6ec20c0654..802997deb3 100644
--- a/tests/postgres_tests/test_search.py
+++ b/tests/postgres_tests/test_search.py
@@ -5,6 +5,7 @@ These tests use dialogue from the 1975 film Monty Python and the Holy Grail.
 All text copyright Python (Monty) Pictures. Thanks to sacred-texts.com for the
 transcript.
 """
+
 from django.db import connection
 from django.db.models import F, Value
 
diff --git a/tests/proxy_models/models.py b/tests/proxy_models/models.py
index 604136b5ac..c0277e093f 100644
--- a/tests/proxy_models/models.py
+++ b/tests/proxy_models/models.py
@@ -4,6 +4,7 @@ they will take data directly from the table of their base class table rather
 than using a new table of their own. This allows them to act as simple proxies,
 providing a modified interface to the data from the base class.
 """
+
 from django.db import models
 
 # A couple of managers for testing managing overriding in proxy model cases.
diff --git a/tests/queries/models.py b/tests/queries/models.py
index 23c41e3374..9f4cf040b6 100644
--- a/tests/queries/models.py
+++ b/tests/queries/models.py
@@ -1,6 +1,7 @@
 """
 Various complex queries that have been problematic in the past.
 """
+
 import datetime
 
 from django.db import models
diff --git a/tests/requests_tests/test_accept_header.py b/tests/requests_tests/test_accept_header.py
index c6eed0e479..5afb9e9993 100644
--- a/tests/requests_tests/test_accept_header.py
+++ b/tests/requests_tests/test_accept_header.py
@@ -68,9 +68,9 @@ class AcceptHeaderTests(TestCase):
 
     def test_accept_headers(self):
         request = HttpRequest()
-        request.META[
-            "HTTP_ACCEPT"
-        ] = "text/html, application/xhtml+xml,application/xml ;q=0.9,*/*;q=0.8"
+        request.META["HTTP_ACCEPT"] = (
+            "text/html, application/xhtml+xml,application/xml ;q=0.9,*/*;q=0.8"
+        )
         self.assertEqual(
             [str(accepted_type) for accepted_type in request.accepted_types],
             [
@@ -94,9 +94,9 @@ class AcceptHeaderTests(TestCase):
 
     def test_request_accepts_some(self):
         request = HttpRequest()
-        request.META[
-            "HTTP_ACCEPT"
-        ] = "text/html,application/xhtml+xml,application/xml;q=0.9"
+        request.META["HTTP_ACCEPT"] = (
+            "text/html,application/xhtml+xml,application/xml;q=0.9"
+        )
         self.assertIs(request.accepts("text/html"), True)
         self.assertIs(request.accepts("application/xhtml+xml"), True)
         self.assertIs(request.accepts("application/xml"), True)
diff --git a/tests/save_delete_hooks/models.py b/tests/save_delete_hooks/models.py
index e7c598aeae..8b9826eb14 100644
--- a/tests/save_delete_hooks/models.py
+++ b/tests/save_delete_hooks/models.py
@@ -4,6 +4,7 @@ Adding hooks before/after saving and deleting
 To execute arbitrary code around ``save()`` and ``delete()``, just subclass
 the methods.
 """
+
 from django.db import models
 
 
diff --git a/tests/schema/fields.py b/tests/schema/fields.py
index 998cb28b8c..24a26b2c2c 100644
--- a/tests/schema/fields.py
+++ b/tests/schema/fields.py
@@ -41,9 +41,11 @@ class CustomManyToManyField(RelatedField):
             related_name=related_name,
             related_query_name=related_query_name,
             limit_choices_to=limit_choices_to,
-            symmetrical=symmetrical
-            if symmetrical is not None
-            else (to == RECURSIVE_RELATIONSHIP_CONSTANT),
+            symmetrical=(
+                symmetrical
+                if symmetrical is not None
+                else (to == RECURSIVE_RELATIONSHIP_CONSTANT)
+            ),
             through=through,
             through_fields=through_fields,
             db_constraint=db_constraint,
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index bc603cb772..3456002a18 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -2700,9 +2700,11 @@ class SchemaTests(TransactionTestCase):
         )
         # Redundant foreign key index is not added.
         self.assertEqual(
-            len(old_constraints) - 1
-            if connection.features.supports_partial_indexes
-            else len(old_constraints),
+            (
+                len(old_constraints) - 1
+                if connection.features.supports_partial_indexes
+                else len(old_constraints)
+            ),
             len(new_constraints),
         )
 
diff --git a/tests/serializers/models/base.py b/tests/serializers/models/base.py
index af9ca2b20a..5f4767b185 100644
--- a/tests/serializers/models/base.py
+++ b/tests/serializers/models/base.py
@@ -4,6 +4,7 @@ Serialization
 ``django.core.serializers`` provides interfaces to converting Django
 ``QuerySet`` objects to and from "flat" data (i.e. strings).
 """
+
 from decimal import Decimal
 
 from django.db import models
diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py
index 3d863a3fb2..a0e8751461 100644
--- a/tests/serializers/models/data.py
+++ b/tests/serializers/models/data.py
@@ -4,6 +4,7 @@ The following classes are for testing basic data marshalling, including
 NULL values, where allowed.
 The basic idea is to have a model for each Django data type.
 """
+
 import uuid
 
 from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
diff --git a/tests/serializers/models/natural.py b/tests/serializers/models/natural.py
index 1e439b34eb..cfc57b1127 100644
--- a/tests/serializers/models/natural.py
+++ b/tests/serializers/models/natural.py
@@ -1,4 +1,5 @@
 """Models for test_natural.py"""
+
 import uuid
 
 from django.db import models
diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py
index e1cb776d83..6361dc0c05 100644
--- a/tests/serializers/test_data.py
+++ b/tests/serializers/test_data.py
@@ -6,6 +6,7 @@ test case that is capable of testing the capabilities of
 the serializers. This includes all valid data values, plus
 forward, backwards and self references.
 """
+
 import datetime
 import decimal
 import uuid
diff --git a/tests/servers/tests.py b/tests/servers/tests.py
index 4dece98ce9..0a6b5508ff 100644
--- a/tests/servers/tests.py
+++ b/tests/servers/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for django.core.servers.
 """
+
 import errno
 import os
 import socket
diff --git a/tests/sessions_tests/models.py b/tests/sessions_tests/models.py
index 6eda26f22a..93f80b347d 100644
--- a/tests/sessions_tests/models.py
+++ b/tests/sessions_tests/models.py
@@ -3,6 +3,7 @@ This custom Session model adds an extra column to store an account ID. In
 real-world applications, it gives you the option of querying the database for
 all active sessions for a particular account.
 """
+
 from django.contrib.sessions.backends.db import SessionStore as DBStore
 from django.contrib.sessions.base_session import AbstractBaseSession
 from django.db import models
diff --git a/tests/signals/models.py b/tests/signals/models.py
index b758244749..5fb9f9f772 100644
--- a/tests/signals/models.py
+++ b/tests/signals/models.py
@@ -1,6 +1,7 @@
 """
 Testing signals before/after saving and deleting.
 """
+
 from django.db import models
 
 
diff --git a/tests/template_tests/test_parser.py b/tests/template_tests/test_parser.py
index e40a5611e2..eb3bb49113 100644
--- a/tests/template_tests/test_parser.py
+++ b/tests/template_tests/test_parser.py
@@ -2,6 +2,7 @@
 Testing some internals of the template processing.
 These are *not* examples to be copied in user code.
 """
+
 from django.template import Library, TemplateSyntaxError
 from django.template.base import (
     FilterExpression,
diff --git a/tests/test_client/tests.py b/tests/test_client/tests.py
index 127cc61606..d01cfd8a0d 100644
--- a/tests/test_client/tests.py
+++ b/tests/test_client/tests.py
@@ -19,6 +19,7 @@ testing against the contexts and templates produced by a view,
 rather than the HTML rendered to the end-user.
 
 """
+
 import itertools
 import pickle
 import tempfile
diff --git a/tests/test_client_regress/tests.py b/tests/test_client_regress/tests.py
index 726d1dcf8f..bd5239ce24 100644
--- a/tests/test_client_regress/tests.py
+++ b/tests/test_client_regress/tests.py
@@ -1,6 +1,7 @@
 """
 Regression tests for the Test Client, especially the customized assertions.
 """
+
 import itertools
 import os
 
diff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py
index 28145be3db..ac8fc66124 100644
--- a/tests/test_runner/tests.py
+++ b/tests/test_runner/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for django test runner
 """
+
 import collections.abc
 import multiprocessing
 import os
diff --git a/tests/transactions/models.py b/tests/transactions/models.py
index 9506bace35..3d4c7d7e44 100644
--- a/tests/transactions+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
/models.py
+++ b/tests/transactions/models.py
@@ -6,6 +6,7 @@ each transaction upon a write, but you can decorate a function to get
 commit-on-success behavior. Alternatively, you can manage the transaction
 manually.
 """
+
 from django.db import models
 
 
diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index 89dfd0deba..8384f55b3c 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -1,6 +1,7 @@
 """
 Unit tests for reverse URL lookups.
 """
+
 import pickle
 import sys
 import threading
diff --git a/tests/urls.py b/tests/urls.py
index 7d3a3a790a..67c4d4091b 100644
--- a/tests/urls.py
+++ b/tests/urls.py
@@ -3,5 +3,4 @@ should be added within the test folders, and use TestCase.urls to set them.
 This helps the tests remain isolated.
 """
 
-
 urlpatterns = []
diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py
index e40632385c..9ba1c2f6fb 100644
--- a/tests/user_commands/tests.py
+++ b/tests/user_commands/tests.py
@@ -468,6 +468,43 @@ class CommandRunTests(AdminScriptTestCase):
         self.assertNoOutput(err)
         self.assertEqual(out.strip(), "Set foo")
 
+class SubparserErrorTests(SimpleTestCase):
+    @mock.patch("django.core.management.get_commands")
+    def test_subparser_missing_required_argument(self, mocked_get_commands):
+        """
+        Subparsers inherit CommandParser error handling.
+        """
+        # Define a command with a subparser that has a required argument.
+        class Command(BaseCommand):
+            def add_arguments(self, parser):
+                subparsers = parser.add_subparsers(dest="subcommand", required=True)
+                create_parser = subparsers.add_parser("create")
+                create_parser.add_argument("name", help="The name to create.")
+
+            def handle(self, *args, **options):
+                pass
+
+        # Mock get_commands to make our test command discoverable.
+        mocked_get_commands.return_value = {"test_subparser_cmd": Command()}
+
+        # Call the command with the subparser but missing the required arg.
+        stderr = StringIO()
+        # Use assertRaises(CommandError) context manager for cleaner checking
+        with self.assertRaises(CommandError), captured_stderr(stderr):
+            management.call_command("test_subparser_cmd", "create")
+
+        # Check that the error message is formatted correctly, not a traceback.
+        output = stderr.getvalue()
+        # Check for usage string (might vary slightly based on terminal width, focus on key parts)
+        self.assertIn("usage: manage.py test_subparser_cmd create", output)
+        self.assertIn("required: name", output)
+        # Check for the specific error message
+        self.assertIn(
+            "manage.py test_subparser_cmd create: error: the following arguments are required: name",
+            output,
+        )
+
+
 
 class UtilsTests(SimpleTestCase):
     def test_no_existent_external_program(self):
diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py
index cfa3d8f05c..bde3616ccf 100644
--- a/tests/utils_tests/test_datastructures.py
+++ b/tests/utils_tests/test_datastructures.py
@@ -1,6 +1,7 @@
 """
 Tests for stuff in django.utils.datastructures.
 """
+
 import collections.abc
 import copy
 import pickle
diff --git a/tests/utils_tests/test_jslex.py b/tests/utils_tests/test_jslex.py
index ee13eb4d64..59551930c6 100644
--- a/tests/utils_tests/test_jslex.py
+++ b/tests/utils_tests/test_jslex.py
@@ -1,4 +1,5 @@
 """Tests for jslex."""
+
 # originally from https://bitbucket.org/ned/jslex
 
 from django.test import SimpleTestCase
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.6.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230202122108) (3.8.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230202122108) (0.5.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-5.0.dev20230202122108-0.editable-py3-none-any.whl size=27411 sha256=870618288e91ea3aa730c41c143aa26af8f4b8f0566b9d585cbca719d293f853
  Stored in directory: /tmp/pip-ephem-wheel-cache-4lsgktdj/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 5.0.dev20230202122108
    Uninstalling Django-5.0.dev20230202122108:
      Successfully uninstalled Django-5.0.dev20230202122108
Successfully installed Django-5.0.dev20230202122108
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 1250483ebf73f7a82ff820b94092c63ce4238264 tests/user_commands/tests.py
Updated 1 path from 5c4bf71a54
+ git apply -v -
Checking patch tests/user_commands/management/commands/subparser_vanilla.py...
Checking patch tests/user_commands/tests.py...
Applied patch tests/user_commands/management/commands/subparser_vanilla.py cleanly.
Applied patch tests/user_commands/tests.py cleanly.
+ : '>>>>> Start Test Output'
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 user_commands.management.commands.subparser_vanilla user_commands.tests
Testing against Django installed in '/testbed/django'
Importing application user_commands
Found 46 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_disallowed_abbreviated_options (user_commands.tests.CommandRunTests.test_disallowed_abbreviated_options)
To avoid conflicts with custom options, commands don't allow ... ok
test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests.test_script_prefix_set_in_commands) ... ok
test_skip_checks (user_commands.tests.CommandRunTests.test_skip_checks) ... ok
test_subparser_error_formatting (user_commands.tests.CommandRunTests.test_subparser_error_formatting) ... ok
test_subparser_non_django_error_formatting (user_commands.tests.CommandRunTests.test_subparser_non_django_error_formatting) ... ok
test_call_command_no_checks (user_commands.tests.CommandTests.test_call_command_no_checks)
By default, call_command should not trigger the check framework, unless ... ok
test_call_command_option_parsing (user_commands.tests.CommandTests.test_call_command_option_parsing)
When passing the long option name to call_command, the available option ... ok
test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests.test_call_command_option_parsing_non_string_arg)
It should be possible to pass non-string arguments to call_command. ... ok
test_call_command_unrecognized_option (user_commands.tests.CommandTests.test_call_command_unrecognized_option) ... ok
test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests.test_call_command_with_required_parameters_in_mixed_options) ... ok
test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests.test_call_command_with_required_parameters_in_options) ... ok
test_calling_a_command_with_no_app_labels_and_parameters_raise_command_error (user_commands.tests.CommandTests.test_calling_a_command_with_no_app_labels_and_parameters_raise_command_error) ... ok
test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests.test_calling_a_command_with_only_empty_parameter_should_ends_gracefully) ... ok
test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests.test_calling_command_with_app_labels_and_parameters_should_be_ok) ... ok
test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests.test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok) ... ok
test_check_migrations (user_commands.tests.CommandTests.test_check_migrations) ... ok
test_command (user_commands.tests.CommandTests.test_command) ... ok
test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests.test_command_add_arguments_after_common_arguments) ... ok
test_command_style (user_commands.tests.CommandTests.test_command_style) ... ok
test_create_parser_kwargs (user_commands.tests.CommandTests.test_create_parser_kwargs)
BaseCommand.create_parser() passes kwargs to CommandParser. ... ok
test_discover_commands_in_eggs (user_commands.tests.CommandTests.test_discover_commands_in_eggs)
Management commands can also be loaded from Python eggs. ... ok
test_explode (user_commands.tests.CommandTests.test_explode)
An unknown command raises CommandError ... ok
test_find_command_without_PATH (user_commands.tests.CommandTests.test_find_command_without_PATH)
find_command should still work when the PATH environment variable ... ok
test_language_preserved (user_commands.tests.CommandTests.test_language_preserved) ... ok
test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_const_options) ... ok
test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_options) ... ok
test_mutually_exclusive_group_required_with_same_dest_args (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_with_same_dest_args) ... ok
test_mutually_exclusive_group_required_with_same_dest_options (user_commands.tests.CommandTests.test_mutually_exclusive_group_required_with_same_dest_options) ... ok
test_no_translations_deactivate_translations (user_commands.tests.CommandTests.test_no_translations_deactivate_translations)
When the Command handle method is decorated with @no_translations, ... ok
test_output_transaction (user_commands.tests.CommandTests.test_output_transaction) ... ok
test_outputwrapper_flush (user_commands.tests.CommandTests.test_outputwrapper_flush) ... ok
test_required_const_options (user_commands.tests.CommandTests.test_required_const_options) ... ok
test_required_list_option (user_commands.tests.CommandTests.test_required_list_option) ... ok
test_requires_system_checks_empty (user_commands.tests.CommandTests.test_requires_system_checks_empty) ... ok
test_requires_system_checks_invalid (user_commands.tests.CommandTests.test_requires_system_checks_invalid) ... ok
test_requires_system_checks_specific (user_commands.tests.CommandTests.test_requires_system_checks_specific) ... ok
test_subparser (user_commands.tests.CommandTests.test_subparser) ... ok
test_subparser_dest_args (user_commands.tests.CommandTests.test_subparser_dest_args) ... ok
test_subparser_dest_required_args (user_commands.tests.CommandTests.test_subparser_dest_required_args) ... ok
test_subparser_invalid_option (user_commands.tests.CommandTests.test_subparser_invalid_option) ... ok
test_system_exit (user_commands.tests.CommandTests.test_system_exit)
Exception raised in a command should raise CommandError with ... ok
test_get_random_secret_key (user_commands.tests.UtilsTests.test_get_random_secret_key) ... ok
test_is_ignored_path_false (user_commands.tests.UtilsTests.test_is_ignored_path_false) ... ok
test_is_ignored_path_true (user_commands.tests.UtilsTests.test_is_ignored_path_true) ... ok
test_no_existent_external_program (user_commands.tests.UtilsTests.test_no_existent_external_program) ... ok
test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests.test_normalize_path_patterns_truncates_wildcard_base) ... ok

----------------------------------------------------------------------
Ran 46 tests in 1.084s

OK
+ : '>>>>> End Test Output'
+ git checkout 1250483ebf73f7a82ff820b94092c63ce4238264 tests/user_commands/tests.py
Updated 1 path from 5c4bf71a54
