diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py
index 1edf040e82..d19920a80a 100644
--- a/django/db/models/sql/datastructures.py
+++ b/django/db/models/sql/datastructures.py
@@ -163,7 +163,7 @@ class Join:
 
     def equals(self, other):
         # Ignore filtered_relation in equality check.
-        return self.identity[:-1] == other.identity[:-1]
+        return self.identity == other.identity
 
     def demote(self):
         new = self.relabeled_clone({})
diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py
index 790a90d9e2..bda45894b7 100644
--- a/tests/filtered_relation/tests.py
+++ b/tests/filtered_relation/tests.py
@@ -765,6 +765,28 @@ class FilteredRelationAggregationTests(TestCase):
             qs.annotate(total=Count("pk")).values("total"), [{"total": 1}]
         )
 
+    def test_multiple_filtered_relation_same_relation(self):
+        # Test that multiple FilteredRelation on the same relation path but
+        # with different aliases and conditions work correctly.
+        # See #34202
+        qs = Book.objects.annotate(
+            editor_a=FilteredRelation(
+                "editor", condition=Q(editor__name="a")
+            ),
+            editor_b=FilteredRelation(
+                "editor", condition=Q(editor__name="b")
+            ),
+        ).values("title", "editor_a__name", "editor_b__name").order_by("title")
+        self.assertSequenceEqual(
+            qs,
+            [
+                {"title": "Poem by Alice", "editor_a__name": "a", "editor_b__name": None},
+                {"title": "The book by Alice", "editor_a__name": "a", "editor_b__name": None},
+                {"title": "The book by Jane A", "editor_a__name": None, "editor_b__name": "b"},
+                {"title": "The book by Jane B", "editor_a__name": None, "editor_b__name": "b"},
+            ],
+        )
+
 
 class FilteredRelationAnalyticalAggregationTests(TestCase):
     @classmethod
