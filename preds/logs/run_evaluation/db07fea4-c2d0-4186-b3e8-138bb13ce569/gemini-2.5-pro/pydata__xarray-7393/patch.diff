diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py
index f3f03c94..de7e3540 100644
--- a/xarray/core/indexes.py
+++ b/xarray/core/indexes.py
@@ -706,12 +706,21 @@ class PandasMultiIndex(PandasIndex):
                     f"from variable {name!r} that wraps a multi-index"
                 )
 
-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])
+        level_coords_dtype = {k: var.dtype for k, var in variables.items()} # Calculate dtypes first
+
+        # Factorize and potentially cast levels back
+        factorized = [lev.factorize() for lev in level_indexes]
+        split_labels = [f[0] for f in factorized]
+        original_levels = [f[1] for f in factorized]
+        levels = [
+            pd.Index(lvl_val, dtype=level_coords_dtype[lvl_name])
+            for lvl_name, lvl_val in zip(variables.keys(), original_levels)
+        ]
+
         labels_mesh = np.meshgrid(*split_labels, indexing="ij")
         labels = [x.ravel() for x in labels_mesh]
 
         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())
-        level_coords_dtype = {k: var.dtype for k, var in variables.items()}
 
         return cls(index, dim, level_coords_dtype=level_coords_dtype)
 
@@ -840,7 +849,16 @@ class PandasMultiIndex(PandasIndex):
                 attrs = {}
                 encoding = {}
 
-            data = PandasMultiIndexingAdapter(self.index, dtype=dtype, level=level)
+            if name == self.dim:
+                # For the main multi-index coordinate, use the full index
+                adapter_data = self.index
+                adapter_dtype = None # Let adapter infer dtype (likely object)
+            else:
+                # For a level coordinate, use the specific level's values
+                adapter_data = self.index.get_level_values(name)
+                adapter_dtype = dtype # Use the stored original dtype
+
+            data = PandasMultiIndexingAdapter(adapter_data, dtype=adapter_dtype)
             index_vars[name] = IndexVariable(
                 self.dim,
                 data,
