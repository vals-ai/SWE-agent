diff --git a/django/forms/models.py b/django/forms/models.py
index ab611afca7..a580064d5b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1323,7 +1323,7 @@ class ModelMultipleChoiceField(ModelChoiceField):
         if self.required and not value:
             raise ValidationError(self.error_messages['required'], code='required')
         elif not self.required and not value:
-            return self.queryset.none()
+            return self.queryset.model._default_manager.none()
         if not isinstance(value, (list, tuple)):
             raise ValidationError(
                 self.error_messages['invalid_list'],
diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py
index 103ed71b44..7605b74003 100644
--- a/tests/model_forms/models.py
+++ b/tests/model_forms/models.py
@@ -471,4 +471,10 @@ class Award(models.Model):
 
 
 class NullableUniqueCharFieldModel(models.Model):
+    pass
     codename = models.CharField(max_length=50, blank=True, null=True, unique=True)
+
+
+
+
+    publications = models.ManyToManyField(to=Publication, blank=True)
\ No newline at end of file
diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index 914defe5e7..2c05928b50 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -15,7 +15,8 @@ from django.forms.models import (
     modelform_factory,
 )
 from django.template import Context, Template
-from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature
+from django.conf import settings
+from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature, override_settings
 
 from .models import (
     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,
@@ -3018,3 +3019,83 @@ class ModelToDictTests(TestCase):
         # If data were a QuerySet, it would be reevaluated here and give "red"
         # instead of the original value.
         self.assertEqual(data, [blue])
+
+
+# Tests for #33183
+class CombinedQuerySetTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        from model_forms_regress_33183.models import Article, Publication
+        cls.p1 = Publication.objects.create(id=1)
+        cls.p2 = Publication.objects.create(id=2)
+        cls.p3 = Publication.objects.create(id=3)
+        cls.p4 = Publication.objects.create(id=4)
+        cls.p5 = Publication.objects.create(id=5)
+        cls.p6 = Publication.objects.create(id=6)
+        cls.article = Article.objects.create()
+
+
+
+    def test_union_queryset_empty_submission(self):
+        from model_forms_regress_33183.models import Article, Publication
+        class ArticleForm(forms.ModelForm):
+            publications = forms.ModelMultipleChoiceField(
+                Publication.objects.filter(id__lt=2).union(
+                    Publication.objects.filter(id__gt=5)
+                ),
+                required=False,
+            )
+
+            class Meta:
+                model = Article
+                fields = ["publications"]
+
+        # Submit an empty form
+        form = ArticleForm({}, instance=self.article)
+        self.assertTrue(form.is_valid())
+        form.save()
+        self.article.refresh_from_db()
+        # Expected: No publications should be added
+        self.assertCountEqual(self.article.publications.all(), [])
+
+    def test_or_queryset_empty_submission(self):
+        from model_forms_regress_33183.models import Article, Publication
+        class ArticleForm(forms.ModelForm):
+            publications = forms.ModelMultipleChoiceField(
+                Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),
+                required=False,
+            )
+
+            class Meta:
+                model = Article
+                fields = ["publications"]
+
+        # Submit an empty form
+        form = ArticleForm({}, instance=self.article)
+        self.assertTrue(form.is_valid())
+        form.save()
+        self.article.refresh_from_db()
+        # Expected: No publications should be added
+
+    def test_difference_queryset_empty_submission(self):
+        from model_forms_regress_33183.models import Article, Publication
+        class ArticleForm(forms.ModelForm):
+            publications = forms.ModelMultipleChoiceField(
+                Publication.objects.filter(id__lt=2).difference(
+                    Publication.objects.filter(id__gt=5)
+                ),
+                required=False,
+            )
+
+            class Meta:
+                model = Article
+                fields = ["publications"]
+
+        # Submit an empty form
+        form = ArticleForm({}, instance=self.article)
+        self.assertTrue(form.is_valid())
+        form.save()
+        self.article.refresh_from_db()
+        # Expected: No publications should be added
+        self.assertCountEqual(self.article.publications.all(), [])
+        self.assertCountEqual(self.article.publications.all(), [])
\ No newline at end of file
diff --git a/tests/model_forms_regress_33183/__init__.py b/tests/model_forms_regress_33183/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/tests/model_forms_regress_33183/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tests/model_forms_regress_33183/models.py b/tests/model_forms_regress_33183/models.py
new file mode 100644
index 0000000000..aefd9f27c0
--- /dev/null
+++ b/tests/model_forms_regress_33183/models.py
@@ -0,0 +1,10 @@
+
+from django.db import models
+
+# Models for #33183
+class Publication(models.Model):
+    pass
+
+
+class Article(models.Model):
+    publications = models.ManyToManyField(to=Publication, blank=True)
\ No newline at end of file
diff --git a/tests/runtests.py b/tests/runtests.py
index d79b4b393e..5b6cba891f 100755
--- a/tests/runtests.py
+++ b/tests/runtests.py
@@ -76,6 +76,7 @@ ALWAYS_INSTALLED_APPS = [
     'django.contrib.messages',
     'django.contrib.admin.apps.SimpleAdminConfig',
     'django.contrib.staticfiles',
+    'model_forms_regress_33183',
 ]
 
 ALWAYS_MIDDLEWARE = [
