diff --git a/sklearn/base.py b/sklearn/base.py
index 56ffb18bf..34998270c 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -48,7 +48,7 @@ def clone(estimator, safe=True):
     # XXX: not handling dictionaries
     if estimator_type in (list, tuple, set, frozenset):
         return estimator_type([clone(e, safe=safe) for e in estimator])
-    elif not hasattr(estimator, 'get_params'):
+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):
         if not safe:
             return copy.deepcopy(estimator)
         else:
diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py
index ebcb38925..8266a1f14 100644
--- a/sklearn/tests/test_base.py
+++ b/sklearn/tests/test_base.py
@@ -105,6 +105,30 @@ def test_clone():
     assert selector is not new_selector
 
 
+def test_clone_estimator_types():
+    """ Test that clone works for parameters that are types/classes. """
+    from sklearn.preprocessing import StandardScaler
+    from sklearn.naive_bayes import GaussianNB  # Another estimator class
+
+    # Test with a single class type parameter
+    estimator = StandardScaler(with_mean=StandardScaler)
+    cloned_estimator = clone(estimator)
+    assert cloned_estimator.with_mean is StandardScaler
+    assert type(cloned_estimator) is StandardScaler
+
+    # Test with multiple class type parameters and nested structure
+    estimator = Pipeline([
+        ('scaler', StandardScaler(with_std=GaussianNB)),
+        ('svc', SVC(C=StandardScaler))
+    ])
+    cloned_estimator = clone(estimator)
+    assert cloned_estimator.steps[0][1].with_std is GaussianNB
+    assert cloned_estimator.steps[1][1].C is StandardScaler
+    assert type(cloned_estimator) is Pipeline
+    assert type(cloned_estimator.steps[0][1]) is StandardScaler
+    assert type(cloned_estimator.steps[1][1]) is SVC
+
+
 def test_clone_2():
     # Tests that clone doesn't copy everything.
     # We first create an estimator, give it an own attribute, and
