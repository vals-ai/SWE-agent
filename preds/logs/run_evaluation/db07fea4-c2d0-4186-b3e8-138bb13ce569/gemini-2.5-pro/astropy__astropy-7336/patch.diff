diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..57c884fa9e 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -220,7 +220,8 @@ class QuantityInput:
             # Call the original function with any equivalencies in force.
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
-            if wrapped_signature.return_annotation is not inspect.Signature.empty:
+            if (wrapped_signature.return_annotation is not inspect.Signature.empty and
+                    wrapped_signature.return_annotation is not None):
                 return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
diff --git a/astropy/units/tests/py3_test_quantity_annotations.py b/astropy/units/tests/py3_test_quantity_annotations.py
index 4956b0ec19..33fb89079b 100644
--- a/astropy/units/tests/py3_test_quantity_annotations.py
+++ b/astropy/units/tests/py3_test_quantity_annotations.py
@@ -285,3 +285,32 @@ def test_return_annotation():
     assert solarx.unit is u.deg
     """
     return src
+
+
+@py3only
+def test_init_return_annotation_none():
+    """Test that quantity_input works on __init__ with None return annotation."""
+    src = """
+import astropy.units as u
+
+class MyClass:
+    @u.quantity_input
+    def __init__(self, val: u.m) -> None:
+        self.val = val
+
+# This should execute without error
+instance = MyClass(10 * u.m)
+assert instance.val.value == 10
+assert instance.val.unit == u.m
+
+# Check that incorrect units still raise an error
+import pytest
+with pytest.raises(u.UnitsError):
+    MyClass(5 * u.s)
+"""
+    # We just need to ensure this executes without error
+    # The exec environment needs u and pytest
+    import astropy.units as u
+    import pytest
+    exec(src, {'u': u, 'pytest': pytest})
+    return src
