diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..71b3a3129e 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -8,6 +8,7 @@
 from sympy.core.function import (Derivative, Function)
 from sympy.core.mul import Mul
 from sympy.core.power import Pow
+from sympy.functions.elementary.exponential import exp
 from sympy.core.singleton import S
 from sympy.physics.units.dimensions import _QuantityMapper
 from sympy.physics.units.quantities import Quantity
@@ -190,10 +191,21 @@ def _collect_factor_and_dimension(self, expr):
                 dim /= idim**count
             return factor, dim
         elif isinstance(expr, Function):
-            fds = [self._collect_factor_and_dimension(
-                arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]
+            factors = [f[0] for f in fds]
+            dims = [d[1] for d in fds]
+            # Check if all arguments are dimensionless
+            if not all(self.get_dimension_system().is_dimensionless(d) for d in dims):
+                # Find the first non-dimensionless argument for the error message
+                for i, d in enumerate(dims):
+                    if not self.get_dimension_system().is_dimensionless(d):
+                        raise ValueError(
+                            f"Argument '{expr.args[i]}' to function "
+                            f"'{expr.func.__name__}' has dimension {d}, "
+                            f"but functions require dimensionless arguments."
+                        )
+            # If all arguments are dimensionless, the result is dimensionless
+            return expr.func(*factors), Dimension(1)
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
