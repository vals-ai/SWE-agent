diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee26..1a65604544 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -277,7 +277,12 @@ class BoundWidget:
 
     @property
     def id_for_label(self):
-        return 'id_%s_%s' % (self.data['name'], self.data['index'])
+        # Use the 'id' from attrs if it exists, otherwise fallback
+        # to the old behavior for compatibility.
+        id_ = self.data['attrs'].get('id')
+        if id_ is None:
+            id_ = 'id_%s_%s' % (self.data['name'], self.data['index'])
+        return id_
 
     @property
     def choice_label(self):
diff --git a/tests/forms_tests/widget_tests/test_checkboxselectmultiple.py b/tests/forms_tests/widget_tests/test_checkboxselectmultiple.py
index 42555d98a6..4420ac65c9 100644
--- a/tests/forms_tests/widget_tests/test_checkboxselectmultiple.py
+++ b/tests/forms_tests/widget_tests/test_checkboxselectmultiple.py
@@ -1,6 +1,5 @@
-import datetime
-
 from django import forms
+import datetime
 from django.forms import CheckboxSelectMultiple
 from django.test import override_settings
 
@@ -205,4 +204,24 @@ class CheckboxSelectMultipleTest(WidgetTest):
 
         bound_field = TestForm()['f']
         self.assertEqual(bound_field.field.widget.id_for_label('id'), '')
+
+    def test_bound_widget_id_for_label_custom_auto_id(self):
+        """
+        BoundWidget.id_for_label uses the ID generated by the widget
+        when a custom auto_id is used.
+        """
+        class TestForm(forms.Form):
+            field = forms.MultipleChoiceField(
+                choices=[('a', 'A'), ('b', 'B')],
+                widget=CheckboxSelectMultiple,
+            )
+
+        form = TestForm(auto_id='custom_%s')
+        bound_field = form['field']
+        # Check the first subwidget
+        subwidget_a = bound_field.subwidgets[0]
+        self.assertEqual(subwidget_a.id_for_label, 'custom_field_0')
+        # Check the second subwidget
+        subwidget_b = bound_field.subwidgets[1]
+        self.assertEqual(subwidget_b.id_for_label, 'custom_field_1')
         self.assertEqual(bound_field.label_tag(), '<label>F:</label>')
