diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index f4b1722757..a3765ae0f1 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):
     def authenticate(self, request, username=None, password=None, **kwargs):
         if username is None:
             username = kwargs.get(UserModel.USERNAME_FIELD)
+        if username is None or password is None:
+            return
         try:
             user = UserModel._default_manager.get_by_natural_key(username)
         except UserModel.DoesNotExist:
diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py
index 6447edefc9..c182943f5b 100644
--- a/tests/auth_tests/test_auth_backends.py
+++ b/tests/auth_tests/test_auth_backends.py
@@ -259,7 +259,32 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):
         user = CustomUserWithoutIsActiveField.objects._create_user(
             username='test', email='test@example.com', password='test',
         )
-        self.assertEqual(authenticate(username='test', password='test'), user)
+
+
+    def test_authenticate_username_none_no_query(self):
+        """
+        ModelBackend.authenticate() doesn't query the database when username
+        is None.
+        """
+        # Simulate another backend potentially handling authentication
+        with self.settings(AUTHENTICATION_BACKENDS=[
+            'django.contrib.auth.backends.ModelBackend',
+            'auth_tests.test_auth_backends.SimpleBackend', # Dummy backend
+        ]):
+            with self.assertNumQueries(0):
+                user = authenticate(request=None, username=None, password='test')
+                self.assertIsNone(user)
+            # Also check with password=None
+            with self.assertNumQueries(0):
+                user = authenticate(request=None, username='test', password=None)
+                # This case is handled by the existing logic, should return None
+                # without querying if password check fails early.
+                # Let's confirm it still doesn't query.
+                self.assertIsNone(user)
+            # Check case where username=None and password=None
+            with self.assertNumQueries(0):
+                user = authenticate(request=None, username=None, password=None)
+                self.assertIsNone(user)
 
 
 @override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')
