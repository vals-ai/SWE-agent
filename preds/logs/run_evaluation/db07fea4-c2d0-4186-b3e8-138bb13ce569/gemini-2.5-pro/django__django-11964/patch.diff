diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..e266c76284 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -66,10 +66,14 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):
 class IntegerChoices(int, Choices):
     """Class for creating enumerated integer choices."""
     pass
+    def __str__(self):
+        return str(self.value)
 
 
 class TextChoices(str, Choices):
     """Class for creating enumerated string choices."""
+    def __str__(self):
+        return str(self.value)
 
     def _generate_next_value_(name, start, count, last_values):
         return name
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..1fe06c4a1e 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1,3 +1,4 @@
+import enum
 import collections.abc
 import copy
 import datetime
@@ -914,6 +915,17 @@ class Field(RegisterLookupMixin):
             form_class = forms.CharField
         return form_class(**defaults)
 
+    def __set__(self, instance, value):
+        # If choices are defined and the value is an enum member, store its value.
+        # This ensures consistency between newly assigned values and values loaded from DB.
+        if self.choices and isinstance(value, enum.Enum):
+            # We assume the user intends to store the enum's underlying value.
+            # Further validation (e.g., checking if the enum member is valid for
+            # self.choices) happens elsewhere (e.g., during clean() or save()).
+            instance.__dict__[self.attname] = value.value
+        else:
+            # Default behavior: store the value directly
+            instance.__dict__[self.attname] = value
     def value_from_object(self, obj):
         """Return the value of this field in the given model instance."""
         return getattr(obj, self.attname)
