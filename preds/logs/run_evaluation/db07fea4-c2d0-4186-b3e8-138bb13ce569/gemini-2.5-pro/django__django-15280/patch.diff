diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index d5aa968400..470f8f6ca4 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -400,6 +400,13 @@ class ReverseOneToOneDescriptor:
         # by the forward accessor (ForwardManyToOneDescriptor).
         try:
             rel_obj = self.related.get_cached_value(instance)
+            # === Bugfix attempt ===
+            # If the cached object is the instance itself, ignore the cache
+            # to prevent using the wrong object with incorrect deferred fields.
+            # This happens in nested prefetches involving the same model.
+            if rel_obj is instance:
+                raise KeyError # Force re-fetch from DB
+            # === End Bugfix attempt ===
         except KeyError:
             related_pk = instance.pk
             if related_pk is None:
diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..5fb5d50f20 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1943,7 +1943,17 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
             elif is_descriptor:
                 # cache_name points to a field name in obj.
                 # This field is a descriptor for a related object.
-                setattr(obj, cache_name, val)
+                # Directly set the cache using the field's method,
+                # bypassing potential descriptor __set__ issues.
+                descriptor = getattr(obj.__class__, cache_name)
+                field = descriptor.field if hasattr(descriptor, 'field') else descriptor.related.field
+                field.set_cached_value(obj, val)
+                # Also set the reverse cache if applicable (for consistency)
+                remote_field = field.remote_field
+                # Ensure val is not None before setting reverse cache
+                if val is not None and hasattr(remote_field, 'set_cached_value'):
+                    remote_field.set_cached_value(val, obj)
+
             else:
                 # No to_attr has been given for this prefetch operation and the
                 # cache_name does not point to a descriptor. Store the value of
diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py
index 0ded7e8b4a..0d7376a472 100644
--- a/tests/prefetch_related/models.py
+++ b/tests/prefetch_related/models.py
@@ -16,6 +16,7 @@ class Author(models.Model):
         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
     def __str__(self):
@@ -26,12 +27,15 @@ class AuthorWithAge(Author):
     author = models.OneToOneField(Author, models.CASCADE, parent_link=True)
     age = models.IntegerField()
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 class FavoriteAuthors(models.Model):
     author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')
     likes_author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='likes_me')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -40,6 +44,7 @@ class AuthorAddress(models.Model):
     address = models.TextField()
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -48,6 +53,7 @@ class Book(models.Model):
     authors = models.ManyToManyField(Author, related_name='books')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -57,6 +63,8 @@ class BookWithYear(Book):
     aged_authors = models.ManyToManyField(
         AuthorWithAge, related_name='books_with_year')
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 class Bio(models.Model):
     author = models.OneToOneField(
@@ -67,12 +75,15 @@ class Bio(models.Model):
     )
     books = models.ManyToManyField(Book, blank=True)
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 class Reader(models.Model):
     name = models.CharField(max_length=50)
     books_read = models.ManyToManyField(Book, related_name='read_by')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
     def __str__(self):
@@ -84,6 +95,8 @@ class BookReview(models.Model):
     book = models.ForeignKey(BookWithYear, models.CASCADE, null=True)
     notes = models.TextField(null=True, blank=True)
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 # Models for default manager tests
 
@@ -91,6 +104,7 @@ class Qualification(models.Model):
     name = models.CharField(max_length=10)
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -117,6 +131,7 @@ class Teacher(models.Model):
     objects_custom = TeacherQuerySet.as_manager()
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
     def __str__(self):
@@ -128,6 +143,7 @@ class Department(models.Model):
     teachers = models.ManyToManyField(Teacher)
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -160,6 +176,7 @@ class TaggedItem(models.Model):
     favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -167,6 +184,8 @@ class Article(models.Model):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
     name = models.CharField(max_length=20)
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 class Bookmark(models.Model):
     url = models.URLField()
@@ -177,6 +196,7 @@ class Bookmark(models.Model):
                                     related_query_name='favorite_bookmarks')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -192,6 +212,7 @@ class Comment(models.Model):
     content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -204,6 +225,7 @@ class House(models.Model):
     main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -212,6 +234,7 @@ class Room(models.Model):
     house = models.ForeignKey(House, models.CASCADE, related_name='rooms')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -233,6 +256,7 @@ class Person(models.Model):
         return self.all_houses
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -243,6 +267,7 @@ class Employee(models.Model):
     boss = models.ForeignKey('self', models.SET_NULL, null=True, related_name='serfs')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -252,11 +277,15 @@ class LessonEntry(models.Model):
     name1 = models.CharField(max_length=200)
     name2 = models.CharField(max_length=200)
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 class WordEntry(models.Model):
     lesson_entry = models.ForeignKey(LessonEntry, models.CASCADE)
     name = models.CharField(max_length=200)
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 # Ticket #21410: Regression when related_name="+"
 
@@ -266,6 +295,7 @@ class Author2(models.Model):
     favorite_books = models.ManyToManyField('Book', related_name='+')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
 
@@ -276,9 +306,31 @@ class Pet(models.Model):
     name = models.CharField(max_length=20)
     people = models.ManyToManyField(Person, related_name='pets')
 
+    class Meta:
+        app_label = 'prefetch_related'
 
 class Flea(models.Model):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
     current_room = models.ForeignKey(Room, models.SET_NULL, related_name='fleas', null=True)
     pets_visited = models.ManyToManyField(Pet, related_name='fleas_hosted')
+
+    class Meta:
+        app_label = 'prefetch_related'
     people_visited = models.ManyToManyField(Person, related_name='fleas_hosted')
+
+
+class User(models.Model):
+    email = models.EmailField()
+    kind = models.CharField(
+        max_length=10, choices=[("ADMIN", "Admin"), ("REGULAR", "Regular")]
+    )
+
+    class Meta:
+        app_label = 'prefetch_related'
+
+class Profile(models.Model):
+    full_name = models.CharField(max_length=255)
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'prefetch_related'
\ No newline at end of file
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index 4ea7fccd5e..a58e369a74 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -13,7 +13,7 @@ from .models import (
     Article, Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book,
     Bookmark, BookReview, BookWithYear, Comment, Department, Employee,
     FavoriteAuthors, House, LessonEntry, ModelIterableSubclass, Person,
-    Qualification, Reader, Room, TaggedItem, Teacher, WordEntry,
+    Qualification, Reader, Room, TaggedItem, Teacher, WordEntry, User, Profile,
 )
 
 
@@ -1614,3 +1614,24 @@ class ReadPrefetchedObjectsCacheTests(TestCase):
         with self.assertNumQueries(4):
             # AuthorWithAge -> Author -> FavoriteAuthors, Book
             self.assertSequenceEqual(authors, [self.author1, self.author2])
+
+
+class DeferredPrefetchTests(TestCase):
+    def test_only_related_queryset(self):
+        user = User.objects.create(
+            email="test@example.com",
+            kind="ADMIN",
+        )
+        Profile.objects.create(user=user, full_name="Test Tester")
+        queryset = User.objects.only("email").prefetch_related(
+            Prefetch(
+                "profile",
+                queryset=Profile.objects.prefetch_related(
+                    Prefetch("user", queryset=User.objects.only("kind"))
+                ),
+            )
+        )
+        with self.assertNumQueries(3):
+            user = queryset.first()
+        with self.assertNumQueries(0):
+            self.assertEqual(user.profile.user.kind, "ADMIN")
\ No newline at end of file
