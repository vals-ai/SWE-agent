diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..979b04da30 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -7,7 +7,7 @@ from django.utils.functional import lazy
 from django.utils.translation import override
 
 from .exceptions import NoReverseMatch, Resolver404
-from .resolvers import get_ns_resolver, get_resolver
+from .resolvers import _get_cached_resolver, get_ns_resolver, get_resolver
 from .utils import get_callable
 
 # SCRIPT_NAME prefixes for each thread are stored here. If there's no entry for
@@ -92,7 +92,10 @@ reverse_lazy = lazy(reverse, str)
 
 def clear_url_caches():
     get_callable.cache_clear()
-    get_resolver.cache_clear()
+    # Access the decorated function's cache_clear.
+    # This relies on the implementation detail of get_resolver using
+    # _get_cached_resolver internally.
+    _get_cached_resolver.cache_clear()
     get_ns_resolver.cache_clear()
 
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..83f5cde06b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -64,10 +64,17 @@ class ResolverMatch:
 
 
 @functools.lru_cache(maxsize=None)
+def _get_cached_resolver(urlconf):
+    # This function will be called with the actual urlconf path
+    return URLResolver(RegexPattern(r'^/'), urlconf)
+
+
 def get_resolver(urlconf=None):
     if urlconf is None:
+        # If urlconf is None, use the default ROOT_URLCONF
         urlconf = settings.ROOT_URLCONF
-    return URLResolver(RegexPattern(r'^/'), urlconf)
+    # Call the cached helper function with the determined urlconf
+    return _get_cached_resolver(urlconf)
 
 
 @functools.lru_cache(maxsize=None)
diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index d26923ab9d..d287f80848 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -436,6 +436,58 @@ class ResolverTests(SimpleTestCase):
             with self.subTest(path=path_):
                 with self.assertRaises(Resolver404):
                     resolve(path_)
+    def test_get_resolver_caching(self):
+        """
+        Test that get_resolver caches correctly even when called with None
+        before set_urlconf is called (#34983).
+        """
+        from django.urls import get_resolver, set_urlconf, clear_url_caches
+        from django.urls.resolvers import _get_cached_resolver
+        from django.conf import settings
+
+        # Ensure a clean state
+        clear_url_caches()
+        # Need to use a real, importable urlconf module string
+        test_urlconf = 'urlpatterns_reverse.urls'
+        original_urlconf = getattr(settings, 'ROOT_URLCONF', None)
+        settings.ROOT_URLCONF = test_urlconf
+
+        # Access the internal cached function directly for introspection
+        # This relies on the implementation detail fixed in the patch.
+        cache_func = _get_cached_resolver  # Use the imported function directly
+        cache_clear_method = cache_func.cache_clear
+        cache_info_method = cache_func.cache_info
+
+        try:
+            # Simulate calling get_resolver before the first request (before set_urlconf)
+            cache_clear_method()
+            resolver1 = get_resolver(None)  # Should use settings.ROOT_URLCONF and cache it
+
+            # Call get_resolver again with the explicit urlconf, should hit the cache
+            resolver2 = get_resolver(test_urlconf)
+
+            # Call get_resolver again with None, should also hit the cache
+            resolver3 = get_resolver(None)
+
+            self.assertIs(resolver1, resolver2, "Resolver instances should be the same (None vs explicit)")
+            self.assertIs(resolver1, resolver3, "Resolver instances should be the same (None vs None)")
+
+            # Check cache stats
+            cache_info = cache_info_method()
+            # Expect 1 miss (resolver1), 2 hits (resolver2, resolver3)
+            self.assertEqual(cache_info.hits, 2, f"Cache hits mismatch: {cache_info}")
+            self.assertEqual(cache_info.misses, 1, f"Cache misses mismatch: {cache_info}")
+            self.assertEqual(cache_info.currsize, 1, f"Cache size mismatch: {cache_info}")
+
+        finally:
+            # Restore original settings and clear caches
+            if original_urlconf is not None:
+                settings.ROOT_URLCONF = original_urlconf
+            elif hasattr(settings, 'ROOT_URLCONF'):
+                delattr(settings, 'ROOT_URLCONF')
+            set_urlconf(None)  # Clear the threadlocal urlconf override
+            clear_url_caches()
+            cache_clear_method() # Clear this specific cache again
 
     def test_404_tried_urls_have_names(self):
         """
