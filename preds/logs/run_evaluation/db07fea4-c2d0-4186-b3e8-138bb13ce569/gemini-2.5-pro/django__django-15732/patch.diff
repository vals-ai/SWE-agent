diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..9f7a646ea3
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..61fd95ba87 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -568,16 +568,52 @@ class BaseDatabaseSchemaEditor:
             exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs,
         )
-        if len(constraint_names) != 1:
+        constraint_to_delete = None
+        if len(constraint_names) == 1:
+            constraint_to_delete = constraint_names[0]
+        elif len(constraint_names) > 1:
+            # Multiple constraints match the columns, try to find the
+            # specifically generated one.
+            # Determine suffix based on whether it's a unique or regular index constraint.
+            expected_suffix = "_uniq" if constraint_kwargs.get("unique") else "_idx"
+            try:
+                expected_name = self._create_index_name(
+                    model._meta.db_table, columns, suffix=expected_suffix
+                )
+            except ValueError:  # Name might be too long
+                expected_name = None
+
+            if expected_name and expected_name in constraint_names:
+                constraint_to_delete = expected_name
+            else:
+                # Fallback: Check constraints created with unique=True/index=True
+                # on a single field, which might have a different name pattern
+                # (e.g., table_col_suffix). This is less precise.
+                if len(columns) == 1:
+                    try:
+                        # Construct potential suffix like _id_uniq or _id_idx
+                        col_suffix = f"_{columns[0]}{expected_suffix}"
+                        fallback_name = self._create_index_name(
+                            model._meta.db_table, columns, suffix=col_suffix
+                        )
+                    except ValueError: # Name might be too long
+                        fallback_name = None
+                    if fallback_name and fallback_name in constraint_names:
+                        constraint_to_delete = fallback_name # Corrected indentation here
+
+        # Raise an error if we couldn't find the constraint.
+        if constraint_to_delete is None:
             raise ValueError(
-                "Found wrong number (%s) of constraints for %s(%s)"
+                "Found wrong number (%s) or could not determine the exact "
+                "constraint name for %s(%s). Found: %s"
                 % (
                     len(constraint_names),
                     model._meta.db_table,
                     ", ".join(columns),
+                    ", ".join(constraint_names),
                 )
             )
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+        self.execute(self._delete_constraint_sql(sql, model, constraint_to_delete))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..2d7834cd20
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,21 @@
+
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/myapp/__init__.py
@@ -0,0 +1 @@
+
diff --git a/myapp/apps.py b/myapp/apps.py
new file mode 100644
index 0000000000..42bbcda466
--- /dev/null
+++ b/myapp/apps.py
@@ -0,0 +1,6 @@
+
+from django.apps import AppConfig
+
+
+class MyappConfig(AppConfig):
+    name = 'myapp'
\ No newline at end of file
diff --git a/myapp/migrations/0001_initial.py b/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..acce52fdd0
--- /dev/null
+++ b/myapp/migrations/0001_initial.py
@@ -0,0 +1,23 @@
+
+# Generated by Django A.B on YYYY-MM-DD HH:MM
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Bar',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+            options={
+                'unique_together': {('id',)},
+            },
+        ),
+    ]
\ No newline at end of file
diff --git a/myapp/migrations/0002_alter_bar_unique_together.py b/myapp/migrations/0002_alter_bar_unique_together.py
new file mode 100644
index 0000000000..1fe3bce0e7
--- /dev/null
+++ b/myapp/migrations/0002_alter_bar_unique_together.py
@@ -0,0 +1,17 @@
+# Generated by Django 4.2.dev20220525111328 on 2025-04-29 03:31
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("myapp", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.AlterUniqueTogether(
+            name="bar",
+            unique_together=set(),
+        ),
+    ]
diff --git a/myapp/migrations/__init__.py b/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/myapp/migrations/__init__.py
@@ -0,0 +1 @@
+
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..77b56754ce
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,6 @@
+
+from django.db import models
+
+class Bar(models.Model):
+    class Meta:
+        pass
\ No newline at end of file
diff --git a/myproject/__init__.py b/myproject/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/myproject/__init__.py
@@ -0,0 +1 @@
+
diff --git a/myproject/settings.py b/myproject/settings.py
new file mode 100644
index 0000000000..00d1dc5237
--- /dev/null
+++ b/myproject/settings.py
@@ -0,0 +1,22 @@
+
+
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'fake-key'
+
+INSTALLED_APPS = [
+    'myapp',
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+USE_TZ = True
\ No newline at end of file
diff --git a/myproject/urls.py b/myproject/urls.py
new file mode 100644
index 0000000000..e8d463cb90
--- /dev/null
+++ b/myproject/urls.py
@@ -0,0 +1,4 @@
+
+from django.urls import path
+
+urlpatterns = []
\ No newline at end of file
diff --git a/myproject/wsgi.py b/myproject/wsgi.py
new file mode 100644
index 0000000000..e65e05d271
--- /dev/null
+++ b/myproject/wsgi.py
@@ -0,0 +1,10 @@
+
+"""WSGI config for myproject project."""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = get_wsgi_application()
\ No newline at end of file
