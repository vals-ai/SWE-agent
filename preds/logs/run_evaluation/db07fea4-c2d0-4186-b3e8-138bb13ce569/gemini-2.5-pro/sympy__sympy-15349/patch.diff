diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4235edc8bd
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,12 @@
+
+import sympy
+print('Sympy version: ', sympy.__version__)
+
+from sympy import *
+from sympy.algebras.quaternion import Quaternion
+x = symbols('x')
+q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result = trigsimp(q.to_rotation_matrix())
+print(result)
+# Add a success message for clarity
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py
index b84e7cb95a..7eae8d73d0 100644
--- a/sympy/algebras/quaternion.py
+++ b/sympy/algebras/quaternion.py
@@ -529,7 +529,7 @@ def to_rotation_matrix(self, v=None):
 
         m10 = 2*s*(q.b*q.c + q.d*q.a)
         m11 = 1 - 2*s*(q.b**2 + q.d**2)
-        m12 = 2*s*(q.c*q.d + q.b*q.a)
+        m12 = 2*s*(q.c*q.d - q.b*q.a)
 
         m20 = 2*s*(q.b*q.d - q.c*q.a)
         m21 = 2*s*(q.c*q.d + q.b*q.a)
diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py
index 420e9976d2..d7a8f72bbe 100644
--- a/sympy/algebras/tests/test_quaternion.py
+++ b/sympy/algebras/tests/test_quaternion.py
@@ -96,14 +96,24 @@ def test_quaternion_conversions():
                                    2 * acos(sqrt(30)/30))
 
     assert q1.to_rotation_matrix() == Matrix([[-S(2)/3, S(2)/15, S(11)/15],
-                                     [S(2)/3, -S(1)/3, S(14)/15],
+                                     [S(2)/3, -S(1)/3,  S(2)/3],
                                      [S(1)/3, S(14)/15, S(2)/15]])
 
     assert q1.to_rotation_matrix((1, 1, 1)) == Matrix([[-S(2)/3, S(2)/15, S(11)/15, S(4)/5],
-                                                  [S(2)/3, -S(1)/3, S(14)/15, -S(4)/15],
+                                                  [S(2)/3, -S(1)/3,  S(2)/3, S(0)],
                                                   [S(1)/3, S(14)/15, S(2)/15, -S(2)/5],
                                                   [S(0), S(0), S(0), S(1)]])
 
+def test_to_rotation_matrix_issue_fix():
+    # Test case from issue #14517
+    x = symbols('x')
+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+    expected_matrix = Matrix([
+        [1,      0,       0],
+        [0, cos(x), -sin(x)],
+        [0, sin(x),  cos(x)]])
+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix
+
     theta = symbols("theta", real=True)
     q2 = Quaternion(cos(theta/2), 0, 0, sin(theta/2))
 
