diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..f8233ece22 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1188,8 +1188,8 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
-                            ' the available choices.'),
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'
+                            ' available choices.'),
     }
     iterator = ModelChoiceIterator
 
@@ -1284,7 +1284,7 @@ class ModelChoiceField(ChoiceField):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice', params={'value': value})
         return value
 
     def validate(self, value):
diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py
index 8f41ce9c40..5b151357b3 100644
--- a/tests/model_forms/test_modelchoicefield.py
+++ b/tests/model_forms/test_modelchoicefield.py
@@ -51,7 +51,10 @@ class ModelChoiceFieldTests(TestCase):
         # instantiated. This proves clean() checks the database during clean()
         # rather than caching it at instantiation time.
         Category.objects.get(url='4th').delete()
-        msg = "['Select a valid choice. That choice is not one of the available choices.']"
+        # Use the field's error message definition and format it
+        msg = f.error_messages['invalid_choice'] % {'value': c4.id}
+        # Wrap the message in brackets as assertRaisesMessage expects the full message list representation
+        msg = "['%s']" % msg
         with self.assertRaisesMessage(ValidationError, msg):
             f.clean(c4.id)
 
@@ -59,9 +62,13 @@ class ModelChoiceFieldTests(TestCase):
         f = forms.ModelChoiceField(Category.objects.all())
         self.assertEqual(f.clean(self.c1), self.c1)
         # An instance of incorrect model.
-        msg = "['Select a valid choice. That choice is not one of the available choices.']"
+        book = Book.objects.create()
+        # Use the field's error message definition and format it
+        msg = f.error_messages['invalid_choice'] % {'value': book}
+        # Wrap the message in brackets as assertRaisesMessage expects the full message list representation
+        msg = "['%s']" % msg
         with self.assertRaisesMessage(ValidationError, msg):
-            f.clean(Book.objects.create())
+            f.clean(book)
 
     def test_clean_to_field_name(self):
         f = forms.ModelChoiceField(Category.objects.all(), to_field_name='slug')
@@ -72,8 +79,10 @@ class ModelChoiceFieldTests(TestCase):
         f = forms.ModelChoiceField(Category.objects.filter(pk=self.c1.id), required=False)
         self.assertIsNone(f.clean(''))
         self.assertEqual(f.clean(str(self.c1.id)).name, 'Entertainment')
-        with self.assertRaises(ValidationError):
-            f.clean('100')
+        invalid_value = '100'
+        msg = f.error_messages['invalid_choice'] % {'value': invalid_value}
+        with self.assertRaisesMessage(ValidationError, msg):
+            f.clean(invalid_value)
 
         # len() can be called on choices.
         self.assertEqual(len(f.choices), 2)
@@ -86,8 +95,10 @@ class ModelChoiceFieldTests(TestCase):
             (self.c2.pk, 'A test'),
         ])
         self.assertEqual(f.clean(self.c2.id).name, 'A test')
-        with self.assertRaises(ValidationError):
-            f.clean(self.c3.id)
+        invalid_value = self.c3.id
+        msg = f.error_messages['invalid_choice'] % {'value': invalid_value}
+        with self.assertRaisesMessage(ValidationError, msg):
+            f.clean(invalid_value)
 
         # Choices can be iterated repeatedly.
         gen_one = list(f.choices)
@@ -214,14 +225,22 @@ class ModelChoiceFieldTests(TestCase):
 
         book = Book.objects.create(author=Writer.objects.create(name='Test writer'))
         form = ModelChoiceForm({}, instance=book)
+        # Format the expected error message using the invalid initial value
+        msg = form.fields['author'].error_messages['invalid_choice'] % {'value': book.author.pk}
         self.assertEqual(
             form.errors['author'],
-            ['Select a valid choice. That choice is not one of the available choices.']
+            [msg]
         )
 
     def test_disabled_modelchoicefield_has_changed(self):
         field = forms.ModelChoiceField(Author.objects.all(), disabled=True)
-        self.assertIs(field.has_changed('x', 'y'), False)
+
+    def test_invalid_choice_message(self):
+        field = forms.ModelChoiceField(Category.objects.all())
+        invalid_value = 'invalid_pk'
+        msg = field.error_messages['invalid_choice'] % {'value': invalid_value}
+        with self.assertRaisesMessage(ValidationError, msg):
+            field.clean(invalid_value)
 
     def test_disabled_modelchoicefield_initial_model_instance(self):
         class ModelChoiceForm(forms.Form):
