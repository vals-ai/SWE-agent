diff --git a/app/__init__.py b/app/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/app/__init__.py
@@ -0,0 +1 @@
+
diff --git a/app/migrations/0001_initial.py b/app/migrations/0001_initial.py
new file mode 100644
index 0000000000..584c7bbcaf
--- /dev/null
+++ b/app/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 4.1.dev20220129180115 on 2025-04-28 22:16
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Item',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('value', models.IntegerField()),
+            ],
+        ),
+    ]
diff --git a/app/migrations/__init__.py b/app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/models.py b/app/models.py
new file mode 100644
index 0000000000..99eaf0b029
--- /dev/null
+++ b/app/models.py
@@ -0,0 +1,6 @@
+
+from django.db import models
+
+class Item(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..c28b922e10
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index e3fdea6f3a..a51ac0f155 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -22,6 +22,7 @@ from django.db.models.constants import LOOKUP_SEP
 from django.db.models.expressions import (
     BaseExpression, Col, Exists, F, OuterRef, Ref, ResolvedOuterRef,
 )
+from django.db.models.functions import Coalesce
 from django.db.models.fields import Field
 from django.db.models.fields.related_lookups import MultiColSource
 from django.db.models.lookups import Lookup
@@ -473,7 +474,12 @@ class Query(BaseExpression):
             col_cnt = 0
             for alias, expression in list(inner_query.annotation_select.items()):
                 annotation_select_mask = inner_query.annotation_select_mask
-                if expression.is_summary:
+                is_summary_aggregate = expression.is_summary
+                if not is_summary_aggregate and isinstance(expression, Coalesce):
+                    source_expressions = expression.get_source_expressions()
+                    if source_expressions and source_expressions[0].is_summary:
+                        is_summary_aggregate = True
+                if is_summary_aggregate:
                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
                     del inner_query.annotations[alias]
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..abbab2bdc8
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,16 @@
+
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..a180c3731d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,29 @@
+
+
+import os
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+import django
+django.setup()
+
+from django.db.models import Sum, F
+from app.models import Item
+
+# Add some data
+Item.objects.create(name='Item 1', value=10)
+Item.objects.create(name='Item 2', value=20)
+Item.objects.create(name='Item 3', value=30)
+
+print("Running the query without default...")
+result_without_default = Item.objects.annotate(idx=F("id")).aggregate(Sum("value"))
+print(result_without_default)
+
+print("\nRunning the query with default...")
+try:
+    result_with_default = Item.objects.annotate(idx=F("id")).aggregate(Sum("value", default=0))
+    print(result_with_default)
+except Exception as e:
+    print(f"Error: {e}")
+    import traceback
+    traceback.print_exc()
+
+print("\nScript completed.")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..8366e71385
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,10 @@
+
+
+SECRET_KEY = 'dummy'
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+INSTALLED_APPS = ['app']
\ No newline at end of file
diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py
index 87ae945a7e..1a549f16c3 100644
--- a/tests/aggregation/tests.py
+++ b/tests/aggregation/tests.py
@@ -522,6 +522,18 @@ class AggregateTestCase(TestCase):
         age_sum = distinct_authors.aggregate(Sum('age'))
         self.assertEqual(age_sum['age__sum'], 103)
 
+    def test_aggregate_with_default_after_annotate(self):
+        """Aggregate with default after annotate should work."""
+        # Without default (should work)
+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('price'))
+        self.assertIsNotNone(result['price__sum'])
+        # With default (should also work)
+        result_default = Book.objects.annotate(idx=F('id')).aggregate(Sum('price', default=0))
+        self.assertEqual(result_default['price__sum'], result['price__sum'])
+        # Test with no results
+        result_empty = Book.objects.filter(id=-1).annotate(idx=F('id')).aggregate(Sum('price', default=0))
+        self.assertEqual(result_empty['price__sum'], 0)
+
     def test_filtering(self):
         p = Publisher.objects.create(name='Expensive Publisher', num_awards=0)
         Book.objects.create(
