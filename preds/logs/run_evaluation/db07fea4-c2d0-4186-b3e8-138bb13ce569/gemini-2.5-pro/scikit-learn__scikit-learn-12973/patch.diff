diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..cc4acc39f 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True
 
-    def fit(self, X, y, copy_X=True):
+    def fit(self, X, y, copy_X=None):
         """Fit the model using X, y as training data.
 
         Parameters
@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):
         y : array-like, shape (n_samples,)
             target values. Will be cast to X's dtype if necessary
 
-        copy_X : boolean, optional, default True
+        copy_X : boolean, optional, default None
             If ``True``, X will be copied; else, it may be overwritten.
+            If None, the value specified in the constructor is used.
 
         Returns
         -------
@@ -1499,15 +1500,17 @@ class LassoLarsIC(LassoLars):
             returns an instance of self.
         """
         X, y = check_X_y(X, y, y_numeric=True)
+        # Determine the actual value of copy_X to use
+        fit_copy_X = self.copy_X if copy_X is None else copy_X
 
         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(
-            X, y, self.fit_intercept, self.normalize, self.copy_X)
+            X, y, self.fit_intercept, self.normalize, fit_copy_X)
         max_iter = self.max_iter
 
         Gram = self.precompute
 
         alphas_, active_, coef_path_, self.n_iter_ = lars_path(
-            X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0,
+            X, y, Gram=Gram, copy_X=fit_copy_X, copy_Gram=True, alpha_min=0.0,
             method='lasso', verbose=self.verbose, max_iter=max_iter,
             eps=self.eps, return_n_iter=True, positive=self.positive)
 
diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py
index 21496efa6..225e345ea 100644
--- a/sklearn/linear_model/tests/test_least_angle.py
+++ b/sklearn/linear_model/tests/test_least_angle.py
@@ -685,4 +685,62 @@ def test_lasso_lars_vs_R_implementation():
     skl_betas2 /= normx[:, np.newaxis]
 
     assert_array_almost_equal(r2, skl_betas2, decimal=12)
+
+
+def test_lassolarsic_copy_X_behavior():
+    # Test that the copy_X parameter in fit overrides the one in init
+    # and that the new default (None) uses the init value.
+    rng = np.random.RandomState(42)
+    X = rng.randn(10, 5)
+    y = rng.randn(10)
+    X_orig = X.copy()
+
+    # Case 1: init=False, fit=True (explicit) -> Should copy
+    model = linear_model.LassoLarsIC(copy_X=False, criterion='bic')
+    model.fit(X, y, copy_X=True)
+
+    # Case 2: init=True, fit=False (explicit) -> Should not copy
+    model = linear_model.LassoLarsIC(copy_X=True, criterion='bic')
+    # Fitting with normalize=False to ensure X is modified if copy_X=False
+    # Note: LassoLarsIC forces normalize=True internally if fit_intercept=True
+    # So we set fit_intercept=False to allow normalize=False
+    model.fit_intercept = False
+    model.normalize = True
+    model.fit(X, y, copy_X=False)
+    # Check if X was modified (it should NOT be modified if fit_intercept=False)
+    assert_array_almost_equal(X, X_orig)
+    X = X_orig.copy() # Restore X
+
+    # Case 3: init=False, fit=None (default) -> Should not copy (uses init value)
+    model = linear_model.LassoLarsIC(copy_X=False, criterion='bic')
+    model.fit_intercept = False
+    model.normalize = True
+    model.fit(X, y) # copy_X defaults to None
+    # Check if X was modified (it should NOT be modified if fit_intercept=False)
+    assert_array_almost_equal(X, X_orig)
+    X = X_orig.copy() # Restore X
+
+    # Case 4: init=True, fit=None (default) -> Should copy (uses init value)
+    model = linear_model.LassoLarsIC(copy_X=True, criterion='bic')
+    model.fit_intercept = False
+    model.normalize = False
+    model.fit(X, y) # copy_X defaults to None
+
+
+    # Case 5: init=False, fit=None, fit_intercept=True -> Should modify X
+    model = linear_model.LassoLarsIC(copy_X=False, criterion='bic')
+    model.fit_intercept = True # Explicitly True, but it's the default
+    model.normalize = False # Normalization also modifies X
+    model.fit(X, y) # copy_X defaults to None -> uses False
+    assert not np.allclose(X, X_orig)
+    X = X_orig.copy() # Restore X
+
+    # Case 6: init=True, fit=False, fit_intercept=True -> Should modify X
+    model = linear_model.LassoLarsIC(copy_X=True, criterion='bic')
+    model.fit_intercept = True
+    model.normalize = False
+    model.fit(X, y, copy_X=False)
+    assert not np.allclose(X, X_orig)
+    X = X_orig.copy() # Restore X
+
     ###########################################################################
