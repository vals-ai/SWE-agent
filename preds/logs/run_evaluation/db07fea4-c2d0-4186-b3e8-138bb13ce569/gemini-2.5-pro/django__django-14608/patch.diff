diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/docs/topics/forms/index.txt b/docs/topics/forms/index.txt
index e55b6d7bf2..a9c2935ee5 100644
--- a/docs/topics/forms/index.txt
+++ b/docs/topics/forms/index.txt
@@ -616,6 +616,10 @@ errors. For example, ``{{ form.non_field_errors }}`` would look like:
         <li>Generic validation error</li>
     </ul>
 
+Similarly, non-form errors in formsets (accessible via ``formset.non_form_errors``)
+are rendered in a list with the CSS class ``errorlist nonform``.
+
+
 See :doc:`/ref/forms/api` for more on errors, styling, and working with form
 attributes in templates.
 
diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py
index 889560aa74..de576179a5 100644
--- a/tests/forms_tests/tests/test_formsets.py
+++ b/tests/forms_tests/tests/test_formsets.py
@@ -358,7 +358,24 @@ class FormsFormsetTestCase(SimpleTestCase):
         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)
         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
         self.assertFalse(formset.is_valid())
-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])
+
+    def test_non_form_errors_render_with_nonform_css_class(self):
+        """non_form_errors() renders with a 'nonform' CSS class."""
+        data = {
+            'choices-TOTAL_FORMS': '1',
+            'choices-INITIAL_FORMS': '0',
+            'choices-MIN_NUM_FORMS': '0',
+            'choices-MAX_NUM_FORMS': '0',
+            'choices-0-choice': 'Zero',
+            'choices-0-votes': '0',
+        }
+        # Use validate_min to trigger a non-form error
+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=2, validate_min=True)
+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
+        self.assertFalse(formset.is_valid())
+        # Check that the rendered errors contain the 'nonform' class
+        expected_html = '<ul class="errorlist nonform"><li>Please submit at least 2 forms.</li></ul>'
+        self.assertHTMLEqual(str(formset.non_form_errors()), expected_html)
 
     def test_formset_validate_min_unchanged_forms(self):
         """
