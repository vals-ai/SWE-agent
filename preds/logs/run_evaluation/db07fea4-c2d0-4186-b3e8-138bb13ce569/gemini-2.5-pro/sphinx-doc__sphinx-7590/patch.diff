diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..652db900a 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -35,6 +35,7 @@ from sphinx.util.cfamily import (
     BaseParser, DefinitionError, UnsupportedMultiCharacterCharLiteral,
     identifier_re, anon_identifier_re, integer_literal_re, octal_literal_re,
     hex_literal_re, binary_literal_re, float_literal_re,
+    ud_suffix_re,
     char_literal_re
 )
 from sphinx.util.docfields import Field, GroupedField
@@ -867,18 +868,26 @@ class ASTCharLiteral(ASTLiteral):
         else:
             raise UnsupportedMultiCharacterCharLiteral(decoded)
 
+
+
+class ASTUserDefinedLiteral(ASTLiteral):
+    def __init__(self, base_literal: str, suffix: str) -> None:
+        self.base_literal = base_literal
+        self.suffix = suffix
+
     def _stringify(self, transform: StringifyTransform) -> str:
-        if self.prefix is None:
-            return "'" + self.data + "'"
-        else:
-            return self.prefix + "'" + self.data + "'"
+        return self.base_literal + self.suffix
 
     def get_id(self, version: int) -> str:
-        return self.type + str(self.value)
+        # Mangling for UDLs is complex (operator "" suffix), let's punt for now
+        # and return something descriptive but potentially non-standard.
+        # A proper implementation would involve mangling the operator function.
+        return f"LUd{len(self.suffix)}_{self.suffix}E"
 
     def describe_signature(self, signode: TextElement, mode: str,
                            env: "BuildEnvironment", symbol: "Symbol") -> None:
         txt = str(self)
+        # Maybe add specific highlighting later?
         signode.append(nodes.Text(txt, txt))
 
 
@@ -4658,31 +4667,51 @@ class DefinitionParser(BaseParser):
             return ASTBooleanLiteral(True)
         if self.skip_word('false'):
             return ASTBooleanLiteral(False)
+        number_literal_text = None
         for regex in [float_literal_re, binary_literal_re, hex_literal_re,
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
-                return ASTNumberLiteral(self.definition[pos:self.pos])
+                number_literal_text = self.definition[pos:self.pos]
+        if number_literal_text:
+            pos = self.pos
+            if self.match(ud_suffix_re):
+                return ASTUserDefinedLiteral(number_literal_text, self.matched_text)
+            else:
+                self.pos = pos  # backtrack if no suffix
+                return ASTNumberLiteral(number_literal_text)
 
         string = self._parse_string()
         if string is not None:
-            return ASTStringLiteral(string)
+            pos = self.pos
+            if self.match(ud_suffix_re):
+                return ASTUserDefinedLiteral(string, self.matched_text)
+            else:
+                self.pos = pos  # backtrack if no suffix
+                return ASTStringLiteral(string)
 
         # character-literal
+        pos = self.pos
         if self.match(char_literal_re):
-            prefix = self.last_match.group(1)  # may be None when no prefix
-            data = self.last_match.group(2)
-            try:
-                return ASTCharLiteral(prefix, data)
-            except UnicodeDecodeError as e:
-                self.fail("Can not handle character literal. Internal error was: %s" % e)
-            except UnsupportedMultiCharacterCharLiteral:
-                self.fail("Can not handle character literal"
-                          " resulting in multiple decoded characters.")
-
-        # TODO: user-defined lit
+            char_literal_text = self.matched_text
+            if self.match(ud_suffix_re):
+                return ASTUserDefinedLiteral(char_literal_text, self.matched_text)
+            else:
+                # backtrack and parse as standard char literal
+                self.pos = pos
+                self.match(char_literal_re) # re-match to set last_match
+                prefix = self.last_match.group(1)  # may be None when no prefix
+                data = self.last_match.group(2)
+                try:
+                    return ASTCharLiteral(prefix, data)
+                except UnicodeDecodeError as e:
+                    self.fail("Can not handle character literal. Internal error was: %s" % e)
+                except UnsupportedMultiCharacterCharLiteral:
+                    self.fail("Can not handle character literal"
+                              " resulting in multiple decoded characters.")
+
         return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
diff --git a/sphinx/util/cfamily.py b/sphinx/util/cfamily.py
index 790a492a5..d8c36a99c 100644
--- a/sphinx/util/cfamily.py
+++ b/sphinx/util/cfamily.py
@@ -66,6 +66,7 @@ char_literal_re = re.compile(r'''(?x)
       ))
     )'
 ''')
+ud_suffix_re = re.compile(r'_[a-zA-Z_][a-zA-Z0-9_]*')
 
 
 def verify_description_mode(mode: str) -> None:
