diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..8ecd0081a5 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1224,7 +1224,7 @@ class QuerySet:
             return True
         if self.query.extra_order_by or self.query.order_by:
             return True
-        elif self.query.default_ordering and self.query.get_meta().ordering:
+        elif self.query.default_ordering and self.query.get_meta().ordering and not self.query.group_by:
             return True
         else:
             return False
diff --git a/tests/queries/tests.py b/tests/queries/tests.py
index f9a57b088a..8d2fc49eb6 100644
--- a/tests/queries/tests.py
+++ b/tests/queries/tests.py
@@ -1735,6 +1735,27 @@ class Queries5Tests(TestCase):
             ['<Ranking: 3: a1>', '<Ranking: 2: a2>', '<Ranking: 1: a3>']
         )
 
+    def test_ordered_property_with_group_by(self):
+        # Test that the .ordered property is False when a GROUP BY clause
+        # prevents the default Meta.ordering from being applied.
+        # Uses Author model which has Meta.ordering = ['name']
+        from .models import Author
+        from django.db.models import Count
+
+        qs_plain = Author.objects.all()
+        self.assertTrue(qs_plain.ordered, "Plain queryset should be ordered by default")
+
+        qs_grouped = Author.objects.annotate(pk__count=Count('pk'))
+        # The GROUP BY clause added by annotate prevents the default 'name' ordering.
+        self.assertFalse(qs_grouped.ordered, "Annotated/grouped queryset should not be ordered by default")
+
+        # Explicit ordering should still work and be reported correctly.
+        qs_grouped_explicit_order = qs_grouped.order_by('name')
+        self.assertTrue(qs_grouped_explicit_order.ordered, "Annotated queryset with explicit order_by should be ordered")
+
+        qs_grouped_explicit_order_pk = qs_grouped.order_by('pk__count')
+        self.assertTrue(qs_grouped_explicit_order_pk.ordered, "Annotated queryset ordered by annotation should be ordered")
+
     def test_ticket5261(self):
         # Test different empty excludes.
         self.assertQuerysetEqual(
