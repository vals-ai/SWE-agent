diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..5a967715f3 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1210,16 +1210,24 @@ class Exists(Subquery):
         return clone
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
+        # Avoid computing the subquery if we know it's empty.
+        # QuerySet._known_empty is checked below by query.exists().
         query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
-        if self.negated:
-            sql = 'NOT {}'.format(sql)
+        try:
+            sql, params = super().as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+        except EmptyResultSet:
+            # Subquery is empty, so EXISTS is FALSE.
+            sql = '0=1' if not self.negated else '1=1'
+            params = []
+        else:
+            if self.negated:
+                sql = 'NOT {}'.format(sql)
         return sql, params
 
     def select_format(self, compiler, sql, params):
diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py
index bd39b2dc32..802e86bb8d 100644
--- a/tests/queries/test_q.py
+++ b/tests/queries/test_q.py
@@ -90,6 +90,8 @@ class QTests(SimpleTestCase):
         q2 = Q(price=F('discounted_price'))
         q = q1 & q2
         path, args, kwargs = q.deconstruct()
+        self.assertEqual(Q(*args, **kwargs), q)
+        path, args, kwargs = q.deconstruct()
         self.assertEqual(args, (
             ('price__gt', F('discounted_price')),
             ('price', F('discounted_price')),
diff --git a/tests/queries/tests.py b/tests/queries/tests.py
index f146bc89fd..dca43b48ca 100644
--- a/tests/queries/tests.py
+++ b/tests/queries/tests.py
@@ -7,6 +7,7 @@ from threading import Lock
 
 from django.core.exceptions import EmptyResultSet, FieldError
 from django.db import DEFAULT_DB_ALIAS, connection
+from django.db.models import sql
 from django.db.models import Count, Exists, F, Max, OuterRef, Q
 from django.db.models.expressions import RawSQL
 from django.db.models.sql.constants import LOUTER
@@ -1120,6 +1121,38 @@ class Queries1Tests(TestCase):
         )
         self.assertSequenceEqual(Note.objects.exclude(negate=True), [self.n3])
 
+    def test_exists_none_query_where_removal(self):
+        """
+        Test that filtering with ~Exists(qs.none()) and other conditions
+        doesn't remove the WHERE clause entirely.
+        """
+        # Create some data
+        Tag.objects.create(name='test')
+        Tag.objects.create(name='other')
+
+        qs = Tag.objects.filter(~Exists(Tag.objects.none()), name='test')
+        # The query should not be an EmptyResultSet, it should have a WHERE clause.
+        self.assertNotIsInstance(qs.query, EmptyResultSet)
+        # Check that the query contains a WHERE clause
+        self.assertIn('WHERE', str(qs.query))
+        # Check that the query actually returns the correct result
+        self.assertSequenceEqual(qs, [Tag.objects.get(name='test')])
+
+        # Also test with exclude
+        qs_exclude = Tag.objects.exclude(Exists(Tag.objects.none())).filter(name='test')
+        self.assertNotIsInstance(qs_exclude.query, EmptyResultSet)
+        self.assertIn('WHERE', str(qs_exclude.query))
+        self.assertSequenceEqual(qs_exclude, [Tag.objects.get(name='test')])
+
+        # Test with an empty result for the main query part
+        qs_empty = Tag.objects.filter(~Exists(Tag.objects.none()), name='nonexistent')
+        self.assertNotIsInstance(qs_empty.query, EmptyResultSet)
+        self.assertIn('WHERE', str(qs_empty.query))
+        self.assertSequenceEqual(qs_empty, [])
+
+        # Add a print statement for successful completion
+        print("Script completed successfully, no errors.")
+
 
 class Queries2Tests(TestCase):
     @classmethod
