diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 2b91feb375..c51adc74cc 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -162,6 +162,27 @@ class Command(BaseCommand):
 
         try:
             handler = self.get_handler(*args, **options)
+            # Wrap the handler to strip body for HEAD requests
+            base_handler = handler
+            def head_stripping_handler(environ, start_response):
+                # Use the 'base_handler' captured from the outer scope
+                if environ.get('REQUEST_METHOD') == 'HEAD':
+                    # Call the original handler to ensure start_response is called
+                    # and to potentially execute middleware/logic, but capture the iterator.
+                    response_iter = base_handler(environ, start_response)
+                    # Ensure the original iterator is closed if necessary (WSGI spec)
+                    if hasattr(response_iter, 'close'):
+                        try:
+                            response_iter.close()
+                        except Exception:
+                            pass # Ignore errors during close
+                    # Return an empty iterator, effectively dropping the body
+                    return iter([])
+                else:
+                    # For non-HEAD requests, delegate entirely to the original handler
+                    return base_handler(environ, start_response)
+            # Replace the handler variable with our wrapper
+            handler = head_stripping_handler
             run(
                 self.addr,
                 int(self.port),
diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..5d663d5147 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -144,8 +144,13 @@ class ServerHandler(simple_server.ServerHandler):
             self.request_handler.close_connection = True
 
     def close(self):
-        self.get_stdin().read()
-        super().close()
+        # Ensure remaining request data is read.
+        # See https://www.python.org/dev/peps/pep-3333/#the-close-method
+        try:
+            self.get_stdin().read()
+        finally:
+            simple_server.ServerHandler.close(self)
+
 
 
 class WSGIRequestHandler(simple_server.WSGIRequestHandler):
@@ -224,6 +229,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):
             self.rfile, self.wfile, self.get_stderr(), self.get_environ()
         )
         handler.request_handler = self  # backpointer for logging & connection closing
+
         handler.run(self.server.get_app())
 
 
diff --git a/myproject/manage.py b/myproject/manage.py
new file mode 100755
index 0000000000..893db8eafe
--- /dev/null
+++ b/myproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/myproject/myproject/__init__.py b/myproject/myproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/myproject/asgi.py b/myproject/myproject/asgi.py
new file mode 100644
index 0000000000..ab191894ae
--- /dev/null
+++ b/myproject/myproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_asgi_application()
diff --git a/myproject/myproject/settings.py b/myproject/myproject/settings.py
new file mode 100644
index 0000000000..3bd1e268be
--- /dev/null
+++ b/myproject/myproject/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for myproject project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230126185448.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-_6j5$boqw!i0dox4^6ngvbur7t!jikq4*umuws$^5)sls%1c+7"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "myproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "myproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/myproject/myproject/urls.py b/myproject/myproject/urls.py
new file mode 100644
index 0000000000..523ce70c6f
--- /dev/null
+++ b/myproject/myproject/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for myproject project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/myproject/myproject/wsgi.py b/myproject/myproject/wsgi.py
new file mode 100644
index 0000000000..1de9e2cef2
--- /dev/null
+++ b/myproject/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_wsgi_application()
diff --git a/tests/servers/test_basehttp.py b/tests/servers/test_basehttp.py
index a837505feb..5154414285 100644
--- a/tests/servers/test_basehttp.py
+++ b/tests/servers/test_basehttp.py
@@ -107,6 +107,54 @@ class WSGIRequestHandlerTestCase(SimpleTestCase):
         self.assertEqual(body, b"HTTP_SOME_HEADER:good")
 
 
+    def test_head_request_no_body(self):
+        """WSGIRequestHandler doesn't return a body for HEAD requests."""
+
+        def test_app(environ, start_response):
+            """A WSGI app that returns a simple response."""
+            start_response("200 OK", [("Content-Type", "text/plain"), ("Content-Length", "4")])
+            yield b"BODY"
+
+        rfile = BytesIO()
+        rfile.write(b"HEAD / HTTP/1.0\r\n")
+        rfile.write(b"Host: testserver\r\n")
+        rfile.write(b"\r\n")
+        rfile.seek(0)
+
+        class UnclosableBytesIO(BytesIO):
+            def close(self):
+                pass
+
+        wfile = UnclosableBytesIO()
+
+        def makefile(mode, *a, **kw):
+            if mode == "rb":
+                return rfile
+            elif mode == "wb":
+                return wfile
+
+        request = Stub(makefile=makefile)
+        server = Stub(base_environ={}, get_app=lambda: test_app)
+
+        # Prevent logging from appearing in test output.
+        with self.assertLogs("django.server", "INFO"):
+            # instantiating a handler runs the request as side effect
+            WSGIRequestHandler(request, "192.168.0.2", server)
+
+        wfile.seek(0)
+        response_text = wfile.read().decode()
+
+        # Check that headers are present
+        self.assertIn("HTTP/1.1 200 OK", response_text)
+        self.assertIn("Content-Type: text/plain", response_text)
+        self.assertIn("Content-Length: 4", response_text)
+
+        # Check that the body is NOT present
+        self.assertNotIn("BODY", response_text)
+        # Check that the response ends after the headers
+        self.assertTrue(response_text.endswith("\r\n\r\n"))
+
+
 class WSGIServerTestCase(SimpleTestCase):
     request_factory = RequestFactory()
 
