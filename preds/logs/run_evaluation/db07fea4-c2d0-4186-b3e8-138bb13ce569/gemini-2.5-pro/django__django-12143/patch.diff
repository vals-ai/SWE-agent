diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa0f..10e8237f8a 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):
 
     def _get_edited_object_pks(self, request, prefix):
         """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
     def _get_list_editable_queryset(self, request, prefix):
@@ -1725,9 +1725,10 @@ class ModelAdmin(BaseModelAdmin):
         if request.method == 'POST' and cl.list_editable and '_save' in request.POST:
             if not self.has_change_permission(request):
                 raise PermissionDenied
+            prefix = getattr(self, 'list_editable_formset_prefix', 'form')
             FormSet = self.get_changelist_formset(request)
-            modified_objects = self._get_list_editable_queryset(request, FormSet.get_default_prefix())
-            formset = cl.formset = FormSet(request.POST, request.FILES, queryset=modified_objects)
+            modified_objects = self._get_list_editable_queryset(request, prefix)
+            formset = cl.formset = FormSet(request.POST, request.FILES, queryset=modified_objects, prefix=prefix)
             if formset.is_valid():
                 changecount = 0
                 for form in formset.forms:
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index c9ca64097f..b30ebbdd8b 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -3284,7 +3284,77 @@ class AdminViewListEditable(TestCase):
         self.assertEqual(Category.objects.get(id=1).order, 14)
         self.assertEqual(Category.objects.get(id=2).order, 13)
         self.assertEqual(Category.objects.get(id=3).order, 1)
-        self.assertEqual(Category.objects.get(id=4).order, 0)
+
+
+    def test_list_editable_special_prefix(self):
+        """
+        list_editable works correctly when the formset prefix contains
+        special regex characters (#24151).
+        """
+        # Setup similar to test_list_editable_ordering
+        Collector.objects.create(id=1, name='Collector 1')
+        Category.objects.create(id=1, collector_id=1, order=10)
+        Category.objects.create(id=2, collector_id=1, order=11)
+        Category.objects.create(id=3, collector_id=1, order=12)
+        Category.objects.create(id=4, collector_id=1, order=13)
+
+        # Define and register admin with special prefix
+        from .admin import CategoryAdmin
+        from django.contrib import admin
+
+        class CategoryAdminWithSpecialPrefix(CategoryAdmin):
+            list_editable_formset_prefix = 'prefix[]'
+
+        original_admin = admin.site._registry.get(Category)
+        custom_admin_registered = False  # Track if we register our admin
+
+        try:
+            # Unregister original admin (if exists) and register the custom one
+            if original_admin:
+                admin.site.unregister(Category)
+            admin.site.register(Category, CategoryAdminWithSpecialPrefix)
+            custom_admin_registered = True
+            prefix = 'prefix[]'
+            data = {
+                f'{prefix}-TOTAL_FORMS': '4',
+                f'{prefix}-INITIAL_FORMS': '4',
+                f'{prefix}-MAX_NUM_FORMS': '0',
+
+                f'{prefix}-0-order': '14',
+                f'{prefix}-0-id': '1',
+                f'{prefix}-0-collector': '1',
+
+                f'{prefix}-1-order': '13',
+                f'{prefix}-1-id': '2',
+                f'{prefix}-1-collector': '1',
+
+                f'{prefix}-2-order': '1',
+                f'{prefix}-2-id': '3',
+                f'{prefix}-2-collector': '1',
+
+                f'{prefix}-3-order': '0',
+                f'{prefix}-3-id': '4',
+                f'{prefix}-3-collector': '1',
+
+                '_save': 'Save',
+            }
+            response = self.client.post(reverse('admin:admin_views_category_changelist'), data)
+            # Successful post will redirect
+            self.assertEqual(response.status_code, 302)
+
+            # The order values have been applied to the right objects
+            self.assertEqual(Category.objects.get(id=1).order, 14)
+            self.assertEqual(Category.objects.get(id=2).order, 13)
+            self.assertEqual(Category.objects.get(id=3).order, 1)
+            self.assertEqual(Category.objects.get(id=4).order, 0)
+        finally:
+            # Restore original admin
+            # Unregister the custom admin only if it was successfully registered
+            if custom_admin_registered:
+                admin.site.unregister(Category)
+            # Re-register the original admin only if there was one
+            if original_admin:
+                admin.site.register(Category, original_admin.__class__)
 
     def test_list_editable_pagination(self):
         """
