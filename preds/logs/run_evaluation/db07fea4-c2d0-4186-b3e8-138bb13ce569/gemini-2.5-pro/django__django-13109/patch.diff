diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..c2aea9c730 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):
             return
 
         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
         qs = qs.complex_filter(self.get_limit_choices_to())
diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index cb8d7c3f84..d115103f67 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -2972,3 +2972,56 @@ class ModelToDictTests(TestCase):
         # If data were a QuerySet, it would be reevaluated here and give "red"
         # instead of the original value.
         self.assertEqual(data, [blue])
+
+
+# Models for testing ForeignKey validation with custom managers (#32156)
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(archived=False)
+
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    archived = models.BooleanField(default=False)
+    objects = ArticleManager()
+    # Add base manager explicitly for clarity in tests
+    base_objects = models.Manager()
+
+
+class FavoriteArticle(models.Model):
+    article = models.ForeignKey(Article, on_delete=models.CASCADE)
+
+
+class FavoriteArticleForm(forms.ModelForm):
+    class Meta:
+        model = FavoriteArticle
+        fields = '__all__'
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # Use the base manager instead of the default manager to allow archived articles.
+        self.fields['article'].queryset = Article.base_objects.all()
+
+
+class ForeignKeyValidateUsingBaseManagerTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.archived_article = Article.base_objects.create(title='Archived', archived=True)
+        cls.active_article = Article.objects.create(title='Active', archived=False)
+
+    def test_form_validation_with_custom_manager_fk(self):
+        """
+        ForeignKey validation should use the base manager, allowing forms
+        to validate even if the default manager filters the instance out.
+        """
+        # Form should be valid when selecting an archived article,
+        # even though the default manager excludes it.
+        form_data = {'article': self.archived_article.pk}
+        form = FavoriteArticleForm(form_data)
+        self.assertTrue(form.is_valid(), form.errors)
+
+        # Form should also be valid for an active article.
+        form_data = {'article': self.active_article.pk}
+        form = FavoriteArticleForm(form_data)
+        self.assertTrue(form.is_valid(), form.errors)
\ No newline at end of file
