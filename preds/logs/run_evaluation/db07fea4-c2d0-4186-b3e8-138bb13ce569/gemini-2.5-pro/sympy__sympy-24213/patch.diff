diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..fa0eabbf48
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,19 @@
+
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+v1 = units.Quantity('v1')
+SI.set_quantity_dimension(v1, units.velocity)
+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+a1 = units.Quantity('a1')
+SI.set_quantity_dimension(a1, units.acceleration)
+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)
+
+t1 = units.Quantity('t1')
+SI.set_quantity_dimension(t1, units.time)
+SI.set_quantity_scale_factor(t1, 5 * units.second)
+
+expr1 = a1*t1 + v1
+SI._collect_factor_and_dimension(expr1)
+print("Script completed successfully, no errors.")
\ No newline at end of file
diff --git a/sympy/physics/units/tests/test_unitsystem.py b/sympy/physics/units/tests/test_unitsystem.py
index a04f3aabb6..b173c190a6 100644
--- a/sympy/physics/units/tests/test_unitsystem.py
+++ b/sympy/physics/units/tests/test_unitsystem.py
@@ -84,3 +84,31 @@ def test_derived_units_must_exist_in_unit_system():
             units = preferred_unit.atoms(Quantity)
             for unit in units:
                 assert unit in unit_system._units, f"Unit {unit} is not in unit system {unit_system}"
+
+
+def test_collect_factor_and_dimension_add():
+    from sympy.physics import units
+    from sympy.physics.units.systems.si import SI
+    from sympy.physics.units import velocity, acceleration, time, meter, second
+
+    v1 = units.Quantity('v1')
+    SI.set_quantity_dimension(v1, velocity)
+    SI.set_quantity_scale_factor(v1, 2 * meter / second)
+
+    a1 = units.Quantity('a1')
+    SI.set_quantity_dimension(a1, acceleration)
+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)
+
+    t1 = units.Quantity('t1')
+    SI.set_quantity_dimension(t1, time)
+    SI.set_quantity_scale_factor(t1, 5 * second)
+
+    expr1 = a1*t1 + v1
+    # This should not raise ValueError
+    factor, dim = SI._collect_factor_and_dimension(expr1)
+
+    # Check that the resulting dimension is velocity
+    assert SI.get_dimension_system().equivalent_dims(dim, velocity)
+    # Check the resulting factor
+    # factor = -9.8 * 5 + 2 = -49 + 2 = -47
+    assert factor == -47
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5705c821c2 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):
                     raise ValueError(
                         'Dimension of "{}" is {}, '
                         'but it should be {}'.format(
