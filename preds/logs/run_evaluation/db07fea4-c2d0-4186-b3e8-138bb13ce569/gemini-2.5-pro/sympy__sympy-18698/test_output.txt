+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/polys/polytools.py
	modified:   sympy/polys/tests/test_polytools.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 3dff1b98a78f28c953ae2140b69356b8391e399c
Merge: 70bf1f88ff 0bbbc7738f
Author: S.Y. Lee <sylee957@gmail.com>
Date:   Fri Feb 21 12:04:16 2020 +0900

    Merge pull request #18690 from mohitacecode/issue_18666_2
    
    migrate all the eigen-related test to test_eigen.py

+ git show
+ git -c core.fileMode=false diff 3dff1b98a78f28c953ae2140b69356b8391e399c
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..c5a4cc0394 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5950,7 +5950,25 @@ def _symbolic_factor_list(expr, opt, method):
 
                 factors.append((_factors_product(other), exp))
 
-    return coeff, factors
+    # Merge factors with the same exponent
+    merged_factors_dict = {}
+    for f, k in factors:
+        if k not in merged_factors_dict:
+            merged_factors_dict[k] = []
+        merged_factors_dict[k].append(f)
+
+    merged_factors = []
+    for k, fs in merged_factors_dict.items():
+        # Multiply factors with the same exponent
+        merged_f = Mul(*[poly.as_expr() for poly in fs])
+        # Convert back to Poly if possible, otherwise keep as expression
+        try:
+            merged_poly, _ = _poly_from_expr(merged_f, opt)
+            merged_factors.append((merged_poly, k))
+        except PolificationFailed:
+            merged_factors.append((merged_f, k))
+
+    return coeff, merged_factors
 
 
 def _symbolic_factor(expr, opt, method):
diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py
index 82e5f4d6dd..74536d51db 100644
--- a/sympy/polys/tests/test_polytools.py
+++ b/sympy/polys/tests/test_polytools.py
@@ -2328,7 +2328,25 @@ def test_sqf():
     f = (x**2 + 2*x + 1)**20000000000
 
     assert sqf(f) == (x + 1)**40000000000
-    assert sqf_list(f) == (1, [(x + 1, 40000000000)])
+
+    # Test for issue #16131 (combining factors with same multiplicity)
+    expr1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3
+    expected1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])
+    assert sqf_list(expr1) == expected1
+
+    # Test with Poly input
+    P = Poly(expr1, x)
+    expected1_poly = (Poly(1, x, domain='ZZ'), [
+        (Poly(x**2 + 1, x, domain='ZZ'), 1),
+        (Poly(x - 1, x, domain='ZZ'), 2),
+        (Poly(x**2 - 5*x + 6, x, domain='ZZ'), 3)])
+    assert sqf_list(P) == expected1_poly
+
+    # Test with polys=True
+    assert sqf_list(expr1, polys=True) == expected1_poly
+
+    # Test with polys=False
+    assert sqf_list(P, polys=False) == expected1
 
 
 def test_factor():
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.6.dev0
    Uninstalling sympy-1.6.dev0:
      Successfully uninstalled sympy-1.6.dev0
  DEPRECATION: Legacy editable install of sympy==1.6.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
Successfully installed sympy
+ git checkout 3dff1b98a78f28c953ae2140b69356b8391e399c sympy/polys/tests/test_polytools.py
Updated 1 path from 98178a19ee
+ git apply -v -
Checking patch sympy/polys/tests/test_polytools.py...
Applied patch sympy/polys/tests/test_polytools.py cleanly.
+ : '>>>>> Start Test Output'
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/polys/tests/test_polytools.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        11098182
hash randomization: on (PYTHONHASHSEED=2296730971)

sympy/polys/tests/test_polytools.py[150] 
test_Poly_mixed_operations ok
test_Poly_from_dict ok
test_Poly_from_list ok
test_Poly_from_poly ok
test_Poly_from_expr ok
test_Poly__new__ ok
test_Poly__args ok
test_Poly__gens ok
test_Poly_zero ok
test_Poly_one ok
test_Poly__unify ok
test_Poly_free_symbols ok
test_PurePoly_free_symbols ok
test_Poly__eq__ ok
test_PurePoly__eq__ ok
test_PurePoly_Poly ok
test_Poly_get_domain ok
test_Poly_set_domain ok
test_Poly_get_modulus ok
test_Poly_set_modulus ok
test_Poly_add_ground ok
test_Poly_sub_ground ok
test_Poly_mul_ground ok
test_Poly_quo_ground ok
test_Poly_exquo_ground ok
test_Poly_abs ok
test_Poly_neg ok
test_Poly_add ok
test_Poly_sub ok
test_Poly_mul ok
test_issue_13079 ok
test_Poly_sqr ok
test_Poly_pow ok
test_Poly_divmod ok
test_Poly_eq_ne ok
test_Poly_nonzero ok
test_Poly_properties ok
test_Poly_is_irreducible ok
test_Poly_subs ok
test_Poly_replace ok
test_Poly_reorder ok
test_Poly_ltrim ok
test_Poly_has_only_gens ok
test_Poly_to_ring ok
test_Poly_to_field ok
test_Poly_to_exact ok
test_Poly_retract ok
test_Poly_slice ok
test_Poly_coeffs ok
test_Poly_monoms ok
test_Poly_terms ok
test_Poly_all_coeffs ok
test_Poly_all_monoms ok
test_Poly_all_terms ok
test_Poly_termwise ok
test_Poly_length ok
test_Poly_as_dict ok
test_Poly_as_expr ok
test_Poly_lift E
test_Poly_deflate ok
test_Poly_inject ok
test_Poly_eject ok
test_Poly_exclude ok
test_Poly__gen_to_level ok
test_Poly_degree ok
test_Poly_degree_list ok
test_Poly_total_degree ok
test_Poly_homogenize ok
test_Poly_homogeneous_order ok
test_Poly_LC ok
test_Poly_TC ok
test_Poly_EC ok
test_Poly_coeff ok
test_Poly_nth ok
test_Poly_LM ok
test_Poly_LM_custom_order ok
test_Poly_EM ok
test_Poly_LT ok
test_Poly_ET ok
test_Poly_max_norm ok
test_Poly_l1_norm ok
test_Poly_clear_denoms ok
test_Poly_rat_clear_denoms ok
test_Poly_integrate ok
test_Poly_diff ok
test_issue_9585 ok
test_Poly_eval ok
test_Poly___call__ ok
test_parallel_poly_from_expr ok
test_pdiv ok
test_div ok
test_issue_7864 ok
test_gcdex ok
test_revert ok
test_subresultants ok
test_resultant ok
test_discriminant ok
test_dispersion ok
test_gcd_list ok
test_lcm_list ok
test_gcd ok
test_gcd_numbers_vs_polys ok
test_terms_gcd ok
test_trunc ok
test_monic ok
test_content ok
test_primitive ok
test_compose ok
test_shift ok
test_transform ok
test_sturm ok
test_gff ok
test_norm ok
test_sqf_norm ok
test_sqf ok
test_factor F
test_factor_large F
test_factor_noeval ok
test_intervals ok
test_refine_root ok
test_count_roots ok
test_Poly_root ok
test_real_roots ok
test_all_roots ok
test_nroots E
test_ground_roots ok
test_nth_power_roots_poly ok
test_torational_factor_list F
test_cancel ok
test_reduced ok
test_groebner ok
test_fglm ok
test_is_zero_dimensional ok
test_GroebnerBasis ok
test_poly ok
test_keep_coeff ok
test_poly_matching_consistency ok
test_issue_5786 f
test_noncommutative ok
test_to_rational_coeffs ok
test_factor_terms F
test_as_list ok
test_issue_11198 ok
test_Poly_precision ok
test_issue_12400 ok
test_issue_14364 ok
test_issue_15669 F
test_issue_17988 ok
test_issue_18205 ok
test_issue_8695 ok                                                        [FAIL]


________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_Poly_lift ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/polyutils.py", line 211, in _parallel_dict_from_expr_if_gens
    monom[indices[base]] = exp
KeyError: 1/sqrt(_a1)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1079, in test_Poly_lift
    assert Poly(x**4 - I*x + 17*I, x, gaussian=True).lift() == \
  File "/testbed/sympy/polys/polytools.py", line 158, in __new__
    return cls._from_expr(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 277, in _from_expr
    return cls._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 224, in _from_dict
    rep[monom] = domain.convert(coeff)
  File "/testbed/sympy/polys/domains/domain.py", line 147, in convert
    return self.from_sympy(element)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 77, in from_sympy
    return self(to_number_field(a, self.ext).native_coeffs())
  File "/testbed/sympy/polys/numberfields.py", line 1079, in to_number_field
    coeffs = field_isomorphism(root, theta)
  File "/testbed/sympy/polys/numberfields.py", line 1052, in field_isomorphism
    return field_isomorphism_factor(a, b)
  File "/testbed/sympy/polys/numberfields.py", line 999, in field_isomorphism_factor
    _, factors = factor_list(a.minpoly, extension=b)
  File "/testbed/sympy/polys/polytools.py", line 6272, in factor_list
    return _generic_factor_list(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6002, in _generic_factor_list
    cp, fp = _symbolic_factor_list(numer, opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5966, in _symbolic_factor_list
    merged_poly, _ = _poly_from_expr(merged_f, opt)
  File "/testbed/sympy/polys/polytools.py", line 4285, in _poly_from_expr
    coeffs = list(map(domain.from_sympy, coeffs))
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 77, in from_sympy
    return self(to_number_field(a, self.ext).native_coeffs())
  File "/testbed/sympy/polys/numberfields.py", line 1068, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 854, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 682, in minimal_polynomial
    result = _minpoly_groebner(ex, x, cls)
  File "/testbed/sympy/polys/numberfields.py", line 812, in _minpoly_groebner
    G = groebner(F, list(symbols.values()) + [x], order='lex')
  File "/testbed/sympy/polys/polytools.py", line 6796, in groebner
    return GroebnerBasis(F, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 6826, in __new__
    polys, opt = parallel_poly_from_expr(F, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 4300, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/testbed/sympy/polys/polytools.py", line 4353, in _parallel_poly_from_expr
    reps, opt = _parallel_dict_from_expr(exprs, opt)
  File "/testbed/sympy/polys/polyutils.py", line 332, in _parallel_dict_from_expr
    reps, gens = _parallel_dict_from_expr_if_gens(exprs, opt)
  File "/testbed/sympy/polys/polyutils.py", line 216, in _parallel_dict_from_expr_if_gens
    raise PolynomialError("%s contains an element of "
sympy.polys.polyerrors.PolynomialError: 1/sqrt(_a1) contains an element of the set of generators.
________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_nroots ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/polyutils.py", line 211, in _parallel_dict_from_expr_if_gens
    monom[indices[base]] = exp
KeyError: 1/sqrt(_a1)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2792, in test_nroots
    assert Poly(
  File "/testbed/sympy/polys/polytools.py", line 158, in __new__
    return cls._from_expr(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 277, in _from_expr
    return cls._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 224, in _from_dict
    rep[monom] = domain.convert(coeff)
  File "/testbed/sympy/polys/domains/domain.py", line 147, in convert
    return self.from_sympy(element)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 77, in from_sympy
    return self(to_number_field(a, self.ext).native_coeffs())
  File "/testbed/sympy/polys/numberfields.py", line 1079, in to_number_field
    coeffs = field_isomorphism(root, theta)
  File "/testbed/sympy/polys/numberfields.py", line 1052, in field_isomorphism
    return field_isomorphism_factor(a, b)
  File "/testbed/sympy/polys/numberfields.py", line 999, in field_isomorphism_factor
    _, factors = factor_list(a.minpoly, extension=b)
  File "/testbed/sympy/polys/polytools.py", line 6272, in factor_list
    return _generic_factor_list(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6002, in _generic_factor_list
    cp, fp = _symbolic_factor_list(numer, opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5966, in _symbolic_factor_list
    merged_poly, _ = _poly_from_expr(merged_f, opt)
  File "/testbed/sympy/polys/polytools.py", line 4285, in _poly_from_expr
    coeffs = list(map(domain.from_sympy, coeffs))
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 77, in from_sympy
    return self(to_number_field(a, self.ext).native_coeffs())
  File "/testbed/sympy/polys/numberfields.py", line 1068, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 854, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 682, in minimal_polynomial
    result = _minpoly_groebner(ex, x, cls)
  File "/testbed/sympy/polys/numberfields.py", line 812, in _minpoly_groebner
    G = groebner(F, list(symbols.values()) + [x], order='lex')
  File "/testbed/sympy/polys/polytools.py", line 6796, in groebner
    return GroebnerBasis(F, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 6826, in __new__
    polys, opt = parallel_poly_from_expr(F, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 4300, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/testbed/sympy/polys/polytools.py", line 4353, in _parallel_poly_from_expr
    reps, opt = _parallel_dict_from_expr(exprs, opt)
  File "/testbed/sympy/polys/polyutils.py", line 332, in _parallel_dict_from_expr
    reps, gens = _parallel_dict_from_expr_if_gens(exprs, opt)
  File "/testbed/sympy/polys/polyutils.py", line 216, in _parallel_dict_from_expr_if_gens
    raise PolynomialError("%s contains an element of "
sympy.polys.polyerrors.PolynomialError: 1/sqrt(_a1) contains an element of the set of generators.

________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_factor ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2344, in test_factor
    assert factor_list(f) == (1, [(u, 1), (v, 2), (w, 1)])
AssertionError
________________________________________________________________________________
____________ sympy/polys/tests/test_polytools.py:test_factor_large _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2521, in test_factor_large
    assert factor(f) == \
AssertionError
________________________________________________________________________________
_______ sympy/polys/tests/test_polytools.py:test_torational_factor_list ________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2879, in test_torational_factor_list
    assert _torational_factor_list(p, x) == (-2, [
AssertionError
________________________________________________________________________________
____________ sympy/polys/tests/test_polytools.py:test_factor_terms _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3275, in test_factor_terms
    assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])
AssertionError
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_issue_15669 _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3325, in test_issue_15669
    assert factor(expr, deep=True) == x*(x**2 + 2)
AssertionError

 tests finished: 142 passed, 5 failed, 1 expected to fail, 2 exceptions, 
in 17.44 seconds 
DO *NOT* COMMIT!
+ : '>>>>> End Test Output'
+ git checkout 3dff1b98a78f28c953ae2140b69356b8391e399c sympy/polys/tests/test_polytools.py
Updated 1 path from 98178a19ee
