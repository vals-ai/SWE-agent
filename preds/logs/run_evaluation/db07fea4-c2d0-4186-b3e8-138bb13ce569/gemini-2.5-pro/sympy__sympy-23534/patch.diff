diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py
index f4a555c13f..2aca8bab27 100644
--- a/sympy/core/symbol.py
+++ b/sympy/core/symbol.py
@@ -791,7 +791,7 @@ def literal(s):
         return tuple(result)
     else:
         for name in names:
-            result.append(symbols(name, **args))
+            result.append(symbols(name, cls=cls, **args))
 
         return type(names)(result)
 
diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py
index 19494c2083..1f58a02635 100644
--- a/sympy/core/tests/test_symbol.py
+++ b/sympy/core/tests/test_symbol.py
@@ -1,5 +1,7 @@
 from sympy.core.numbers import (I, Rational, pi)
 from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)
+from sympy.core.function import Function
+from sympy.core.function import FunctionClass
 from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)
 from sympy.core.sympify import sympify  # can't import as S yet
 from sympy.core.symbol import uniquely_named_symbol, _symbol, Str
@@ -326,6 +328,16 @@ def sym(s):
     raises(ValueError, lambda: symbols(':a:'))
     raises(ValueError, lambda: symbols('::a'))
 
+    # Test for issue where symbols with cls=Function and sequence input failed
+    q, u = symbols(('q:2', 'u:2'), cls=Function)
+    assert isinstance(q[0], FunctionClass)
+    assert isinstance(q[1], FunctionClass)
+    assert isinstance(u[0], FunctionClass)
+    assert isinstance(u[1], FunctionClass)
+    assert q[0].name == 'q0'
+    assert q[1].name == 'q1'
+    assert u[0].name == 'u0'
+    assert u[1].name == 'u1'
 
 def test_symbols_become_functions_issue_3539():
     from sympy.abc import alpha, phi, beta, t
