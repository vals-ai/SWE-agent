diff --git a/django/core/management/base.py b/django/core/management/base.py
index 463e4e8665..43e32ae7f5 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -394,7 +394,8 @@ class BaseCommand:
             else:
                 self.check(tags=self.requires_system_checks)
         if self.requires_migrations_checks:
-            self.check_migrations()
+            if not options.get('skip_checks', False):
+                self.check_migrations()
         output = self.handle(*args, **options)
         if output:
             if self.output_transaction:
diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index d9fb088350..974bc46e66 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -25,7 +25,8 @@ class Command(BaseCommand):
     help = "Starts a lightweight Web server for development."
 
     # Validation is called explicitly each time the server is reloaded.
-    requires_system_checks = []
+    requires_migrations_check = True
+    requires_system_checks = '__all__'
     stealth_options = ('shutdown_message',)
 
     default_addr = '127.0.0.1'
@@ -114,11 +115,6 @@ class Command(BaseCommand):
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
 
-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        # Need to check migrations here, so can't use the
-        # requires_migrations_check attribute.
-        self.check_migrations()
         now = datetime.now().strftime('%B %d, %Y - %X')
         self.stdout.write(now)
         self.stdout.write((
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index d9ec07a3e3..6b3d0426f4 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -170,6 +170,27 @@ class AdminScriptTestCase(SimpleTestCase):
 # of the django-admin.
 ##########################################################################
 
+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')
+    @mock.patch('django.core.management.base.checks.run_checks')
+    def test_runserver_skip_checks(self, mock_check, mock_check_migrations):
+        # We need minimal settings, but checks themselves are mocked.
+        self.write_settings('settings.py', sdict={'DEBUG': True, 'INSTALLED_APPS': [], 'ROOT_URLCONF': "'test_project.urls'"})
+
+        # Mock the actual server run to prevent it from hanging, but allow checks to be called.
+        with mock.patch('django.core.management.commands.runserver.run'):
+            # Checks should be called by default
+            self.run_manage(['runserver', '--noreload'])
+            mock_check.assert_called_once()
+            mock_check_migrations.assert_called_once()
+
+            # Reset mocks for the next call
+            mock_check.reset_mock()
+            mock_check_migrations.reset_mock()
+
+            # Checks should NOT be called with --skip-checks
+            self.run_manage(['runserver', '--noreload', '--skip-checks'])
+            mock_check.assert_not_called()
+            mock_check_migrations.assert_not_called()
 
 class DjangoAdminNoSettings(AdminScriptTestCase):
     "A series of tests for django-admin when there is no settings.py file."
