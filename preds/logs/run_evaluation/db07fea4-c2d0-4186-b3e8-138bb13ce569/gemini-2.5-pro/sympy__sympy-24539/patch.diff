diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py
index 12bd2fc920..473d1dfdbe 100644
--- a/sympy/polys/rings.py
+++ b/sympy/polys/rings.py
@@ -616,10 +616,12 @@ def set_ring(self, new_ring):
             return new_ring.from_dict(self, self.ring.domain)
 
     def as_expr(self, *symbols):
-        if symbols and len(symbols) != self.ring.ngens:
-            raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
-        else:
+        if not symbols:
             symbols = self.ring.symbols
+        elif len(symbols) != self.ring.ngens:
+            # Updated error message for clarity
+            raise ValueError("incorrect number of symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
+        # If symbols were provided and the count is correct, 'symbols' already holds them.
 
         return expr_from_dict(self.as_expr_dict(), *symbols)
 
diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py
index b3962136a3..456e797ae6 100644
--- a/sympy/polys/tests/test_rings.py
+++ b/sympy/polys/tests/test_rings.py
@@ -1416,6 +1416,29 @@ def test_PolyElement_factor_list():
     assert f.factor_list() == (1, [(u, 1), (v, 2), (w, 1)])
 
 
+def test_PolyElement_as_expr():
+    R, x, y, z = ring("x,y,z", ZZ)
+    sx, sy, sz = symbols("x,y,z") # Standard SymPy symbols
+    expected_f_default = 3*sx**2*sy - sx*sy*sz + 7*sz**3 + 1
+    f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+    # Test default symbols
+    assert f.as_expr() == expected_f_default
+
+    # Test providing new symbols
+    U, V, W = symbols("u,v,w")
+    assert f.as_expr(U, V, W) == 3*U**2*V - U*V*W + 7*W**3 + 1
+
+    # Test providing wrong number of symbols
+    raises(ValueError, lambda: f.as_expr(U, V))
+    raises(ValueError, lambda: f.as_expr(U, V, W, symbols("extra")))
+
+    # Test with different ring
+    Ruv, u, v = ring("u,v", QQ)
+    g = u**2 + QQ(1,2)*v
+    X, Y = symbols("X,Y")
+    assert g.as_expr(X, Y) == X**2 + QQ(1,2)*Y
+
 def test_issue_21410():
     R, x = ring('x', FF(2))
     p = x**6 + x**5 + x**4 + x**3 + 1
