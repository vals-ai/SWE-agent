diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..7c5952c9f1 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -580,9 +580,16 @@ class ModelAdmin(BaseModelAdmin):
     def __str__(self):
         return "%s.%s" % (self.model._meta.app_label, self.__class__.__name__)
 
+    def get_inlines(self, request, obj=None):
+        """
+        Return a list of inline classes. Allows dynamic determination of
+        inlines based on the request or model instance.
+        """
+        return self.inlines
+
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index 6934bf2b3c..a2e62d443a 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -11,6 +11,8 @@ from django.contrib.admin.widgets import (
     AdminDateWidget, AdminRadioSelect, AutocompleteSelect,
     AutocompleteSelectMultiple,
 )
+from django.contrib.auth.models import Permission
+from django.contrib.contenttypes.models import ContentType
 from django.contrib.auth.models import User
 from django.db import models
 from django.forms.widgets import Select
@@ -854,3 +856,89 @@ class ModelAdminPermissionTests(SimpleTestCase):
             self.assertFalse(ma.has_module_permission(request))
         finally:
             ma.opts.app_label = original_app_label
+
+
+class GetInlinesTests(ModelAdminTests):
+
+    def test_get_inlines_hook(self):
+        """
+        ModelAdmin.get_inline_instances() uses get_inlines() hook.
+        """
+        class ConcertInline(TabularInline):
+            model = Concert
+            fk_name = 'main_band'
+
+        class SongInline(TabularInline):
+            model = Song
+            fk_name = 'band'
+
+        class BandAdminWithDynamicInlines(ModelAdmin):
+            # Define default inlines (can be empty or have some defaults)
+            inlines = [ConcertInline]
+
+            def get_inlines(self, request, obj=None):
+                # Conditionally add SongInline based on the object or request
+                inlines = list(super().get_inlines(request, obj))
+                add_song_inline = False
+                if obj and obj.name == 'The Doors':
+                    add_song_inline = True
+                # Use a different condition for request user
+                if request.user.is_staff: # Example: check if user is staff
+                    add_song_inline = True
+                # Avoid adding duplicates if both conditions are met
+                if add_song_inline and SongInline not in inlines:
+                    inlines.append(SongInline)
+                return inlines
+
+        ma = BandAdminWithDynamicInlines(Band, self.site)
+        request = MockRequest()
+        # Create a non-staff user
+        normal_user = User.objects.create_user(username='normal_user', password='password')
+        request.user = normal_user
+        # Create a staff user
+        staff_user = User.objects.create_user(username='staff_user', password='password', is_staff=True)
+
+        # Need access to self.band ('The Doors') and self.site from ModelAdminTests
+        other_band = Band.objects.create(name='Other Band', bio='', sign_date=date(1970, 1, 1))
+
+        # Test case 1: No object, normal user -> default inlines ([ConcertInline])
+        inline_instances = ma.get_inline_instances(request)
+        self.assertEqual(len(inline_instances), 1)
+        self.assertIsInstance(inline_instances[0], ConcertInline)
+        self.assertNotIsInstance(inline_instances[0], SongInline)
+
+        # Test case 2: Object is 'The Doors', normal user -> [ConcertInline, SongInline]
+        inline_instances = ma.get_inline_instances(request, self.band) # self.band is 'The Doors'
+        self.assertEqual(len(inline_instances), 2)
+        self.assertIsInstance(inline_instances[0], ConcertInline)
+        self.assertIsInstance(inline_instances[1], SongInline)
+
+        # Test case 3: Object is not 'The Doors', normal user -> [ConcertInline]
+        inline_instances = ma.get_inline_instances(request, other_band)
+        self.assertEqual(len(inline_instances), 1)
+        self.assertIsInstance(inline_instances[0], ConcertInline)
+        self.assertNotIsInstance(inline_instances[0], SongInline)
+
+        # Test case 4: No object, staff user -> [ConcertInline, SongInline]
+        request.user = staff_user
+        inline_instances = ma.get_inline_instances(request)
+        self.assertEqual(len(inline_instances), 2)
+        self.assertIsInstance(inline_instances[0], ConcertInline)
+        self.assertIsInstance(inline_instances[1], SongInline)
+
+        # Test case 5: Object is 'The Doors', staff user -> [ConcertInline, SongInline] (no duplicates)
+        inline_instances = ma.get_inline_instances(request, self.band)
+        self.assertEqual(len(inline_instances), 2)
+        self.assertIsInstance(inline_instances[0], ConcertInline)
+        self.assertIsInstance(inline_instances[1], SongInline)
+
+        # Test case 6: Object is not 'The Doors', staff user -> [ConcertInline, SongInline]
+        inline_instances = ma.get_inline_instances(request, other_band)
+        self.assertEqual(len(inline_instances), 2)
+        self.assertIsInstance(inline_instances[0], ConcertInline)
+        self.assertIsInstance(inline_instances[1], SongInline)
+
+        # Cleanup created users and band
+        normal_user.delete()
+        staff_user.delete()
+        other_band.delete()
\ No newline at end of file
