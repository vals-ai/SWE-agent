diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 8915616b..bd8cafe8 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1568,7 +1568,9 @@ class Plotter:
                         part_vars.append(var)
                         break
                 else:
-                    title = self._resolve_label(p, var, data.names[var])
+                    base_title = self._resolve_label(p, var, data.names[var])
+                    var_offset = getattr(scales[var], "_legend_offset", "")
+                    title = f"{base_title} {var_offset}" if var_offset else base_title
                     entry = (title, data.ids[var]), [var], (values, labels)
                     schema.append(entry)
 
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 55874bf2..ed56e153 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -379,6 +379,11 @@ class ContinuousBase(Scale):
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
             labels = axis.major.formatter.format_ticks(locs)
+            # Get offset directly from the formatter method if available
+            if hasattr(axis.major.formatter, "get_offset"):
+                new._legend_offset = axis.major.formatter.get_offset()
+            else:
+                new._legend_offset = ""
             new._legend = list(locs), list(labels)
 
         return new
diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py
index e4ba99e1..a7b3d552 100644
--- a/tests/_core/test_plot.py
+++ b/tests/_core/test_plot.py
@@ -2052,6 +2052,36 @@ class TestLegend:
         assert not p._figure.legends
 
 
+    def test_legend_title_with_offset(self):
+        """Test that legend title includes offset for large numbers."""
+        # Need imports for this test
+        import seaborn as sns
+        import seaborn.objects as so
+        import matplotlib as mpl
+        from packaging.version import Version
+
+        # Load dataset directly as fixture is not available here
+        penguins = sns.load_dataset("penguins")
+        penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+        p = (
+            so.Plot(
+                penguins, x="bill_length_mm", y="bill_depth_mm",
+                pointsize="body_mass_mg",
+            )
+            .add(so.Dot())
+            .plot()  # Generate the plot object
+        )
+        # Check the legend title
+        legend, = p._figure.legends
+        title = legend.get_title().get_text()
+        # The exact offset text might vary slightly depending on matplotlib version
+        # and data range, but it should contain the variable name and scientific notation.
+        # Example: "body_mass_mg (+3e+6)" or "body_mass_mg (1e+6)"
+        assert "body_mass_mg" in title
+        # Check for scientific notation part (e.g., +3e+6)
+        # Matplotlib's offset text format changed, so check for common patterns
+        assert ("e+" in title or "10$^{6}$" in title or "1e6" in title), f"Title '{title}' does not contain expected offset format"
+
 class TestDefaultObject:
 
     def test_default_repr(self):
