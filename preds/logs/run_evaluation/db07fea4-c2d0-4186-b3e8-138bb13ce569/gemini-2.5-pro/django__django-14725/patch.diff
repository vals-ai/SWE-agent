diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..97dd31765b 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -478,7 +478,7 @@ class BaseFormSet(RenderableFormMixin):
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
                     can_delete=False, max_num=None, validate_max=False,
                     min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
+                    can_delete_extra=True, renderer=None, can_create=True):
     """Return a FormSet for the given form class."""
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
@@ -505,6 +505,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'validate_min': validate_min,
         'validate_max': validate_max,
         'renderer': renderer or get_default_renderer(),
+        'can_create': can_create,
     }
     return type(form.__name__ + 'FormSet', (formset,), attrs)
 
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..966932d19c 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -812,6 +812,8 @@ class BaseModelFormSet(BaseFormSet):
         return saved_instances
 
     def save_new_objects(self, commit=True):
+        if not self.can_create:
+            return []
         self.new_objects = []
         for form in self.extra_forms:
             if not form.has_changed():
@@ -875,7 +877,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                         absolute_max=None, can_delete_extra=True, renderer=None,
+                         can_create=True):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
@@ -894,7 +897,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+                              renderer=renderer, can_create=can_create)
     FormSet.model = model
     return FormSet
 
diff --git a/tests/model_formsets/tests.py b/tests/model_formsets/tests.py
index bb1a8a8a5e..6c5a02a179 100644
--- a/tests/model_formsets/tests.py
+++ b/tests/model_formsets/tests.py
@@ -572,6 +572,83 @@ class ModelFormsetTest(TestCase):
         self.assertTrue(formset.is_valid())
         self.assertEqual(formset.save(), [])
 
+    def test_can_create_flag(self):
+        """
+        Test that the `can_create` parameter prevents creation of new objects
+        when set to False, even when existing objects are present.
+        """
+        # Create an initial author
+        initial_author = Author.objects.create(name='Initial Author')
+        initial_count = Author.objects.count() # Should be 1
+
+        # Formset that disallows creation
+        AuthorFormSetCannotCreate = modelformset_factory(
+            Author, fields=('name',), can_create=False, extra=1
+        )
+
+        # Data for updating the initial author and adding one new author
+        data_cannot_create = {
+            'form-TOTAL_FORMS': '2',
+            'form-INITIAL_FORMS': '1',
+            'form-MAX_NUM_FORMS': '',
+            'form-0-id': str(initial_author.id), # Existing author
+            'form-0-name': 'Updated Initial Author',
+            'form-1-name': 'New Author Should Not Be Created', # New author data
+        }
+        formset_cannot_create = AuthorFormSetCannotCreate(
+            data=data_cannot_create, queryset=Author.objects.filter(id=initial_author.id)
+        )
+
+        self.assertTrue(formset_cannot_create.is_valid(), formset_cannot_create.errors)
+        saved_cannot_create = formset_cannot_create.save()
+
+        # Check that no new author was created, only the existing one saved
+        self.assertEqual(Author.objects.count(), initial_count)
+        self.assertEqual(len(saved_cannot_create), 1)
+        self.assertEqual(saved_cannot_create[0].id, initial_author.id)
+        self.assertEqual(saved_cannot_create[0].name, 'Updated Initial Author')
+        # Verify the author was actually updated in the DB
+        initial_author.refresh_from_db()
+        self.assertEqual(initial_author.name, 'Updated Initial Author')
+
+
+        # Now test with can_create=True (default behavior)
+        # Reset initial author name for the next test part
+        initial_author.name = 'Initial Author Reset'
+        initial_author.save()
+        AuthorFormSetCanCreate = modelformset_factory(
+            Author, fields=('name',), can_create=True, extra=1
+        )
+        # Data for updating the initial author and adding one new author
+        data_can_create = {
+            'form-TOTAL_FORMS': '2',
+            'form-INITIAL_FORMS': '1',
+            'form-MAX_NUM_FORMS': '',
+            'form-0-id': str(initial_author.id), # Existing author
+            'form-0-name': 'Updated Initial Author Again',
+            'form-1-name': 'New Author Should Be Created', # New author data
+        }
+        formset_can_create = AuthorFormSetCanCreate(
+            data=data_can_create, queryset=Author.objects.filter(id=initial_author.id)
+        )
+
+        self.assertTrue(formset_can_create.is_valid(), formset_can_create.errors)
+        saved_can_create = formset_can_create.save()
+
+        # Check that one new author was created and the existing one updated
+        self.assertEqual(Author.objects.count(), initial_count + 1)
+        self.assertEqual(len(saved_can_create), 2) # Both updated and new
+        # Check updated author
+        updated_author = next(a for a in saved_can_create if a.id == initial_author.id)
+        self.assertEqual(updated_author.name, 'Updated Initial Author Again')
+        # Check new author
+        new_author = next(a for a in saved_can_create if a.id != initial_author.id)
+        self.assertEqual(new_author.name, 'New Author Should Be Created')
+        # Verify the initial author was updated in the DB
+        initial_author.refresh_from_db()
+        self.assertEqual(initial_author.name, 'Updated Initial Author Again')
+
+
     def test_inline_formsets(self):
         # We can also create a formset that is tied to a parent model. This is
         # how the admin system's edit inline functionality works.
