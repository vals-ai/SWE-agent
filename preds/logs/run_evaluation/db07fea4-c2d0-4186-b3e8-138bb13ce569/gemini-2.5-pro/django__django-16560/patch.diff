diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..4b19cc3107 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -22,7 +22,7 @@ class BaseConstraint:
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
     # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +34,7 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        self.violation_error_code = violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -42,7 +43,7 @@ class BaseConstraint:
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(args, ["name", "violation_error_message"]):
+            for arg, attr in zip(args, ["name", "violation_error_message", "violation_error_code"]):
                 if arg:
                     setattr(self, attr, arg)
 
@@ -74,6 +75,8 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if self.violation_error_code is not None:
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
     def clone(self):
@@ -82,13 +85,13 @@ class BaseConstraint:
 
 
 class CheckConstraint(BaseConstraint):
-    def __init__(self, *, check, name, violation_error_message=None):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
         self.check = check
         if not getattr(check, "conditional", False):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -112,7 +115,7 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
         except FieldError:
             pass
 
@@ -135,6 +138,7 @@ class CheckConstraint(BaseConstraint):
                 self.name == other.name
                 and self.check == other.check
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -164,6 +168,7 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if not name:
             raise ValueError("A unique constraint must be named.")
@@ -213,7 +218,7 @@ class UniqueConstraint(BaseConstraint):
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     @property
     def contains_expressions(self):
@@ -321,6 +326,7 @@ class UniqueConstraint(BaseConstraint):
                 and self.opclasses == other.opclasses
                 and self.expressions == other.expressions
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -385,7 +391,7 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
                 for model, constraints in instance.get_constraints():
@@ -400,6 +406,6 @@ class UniqueConstraint(BaseConstraint):
                 if (self.condition & Exists(queryset.filter(self.condition))).check(
                     against, using=using
                 ):
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
             except FieldError:
                 pass
diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py
index b45dc6499a..cece7ab0d3 100644
--- a/tests/constraints/tests.py
+++ b/tests/constraints/tests.py
@@ -263,7 +263,44 @@ class CheckConstraintTests(TestCase):
         # RawSQL can not be checked and is always considered valid.
         constraint.validate(Product, Product(price=500, discounted_price=5))
         constraint.validate(Product, Product(price=501, discounted_price=5))
-        constraint.validate(Product, Product(price=499, discounted_price=5))
+
+    def test_validate_with_violation_error_code(self):
+        constraint = models.CheckConstraint(
+            check=models.Q(price__gt=0),
+            name="price_gt_0",
+            violation_error_code="price_must_be_positive",
+        )
+        product = Product(price=-5)
+        with self.assertRaises(ValidationError) as cm:
+            constraint.validate(Product, product)
+        self.assertEqual(cm.exception.code, "price_must_be_positive")
+        self.assertEqual(
+            cm.exception.message,
+            constraint.get_violation_error_message(),
+        )
+    def test_deconstruction_with_violation_error_code(self):
+        constraint = models.CheckConstraint(
+            check=models.Q(price__gt=0),
+            name="price_gt_0",
+            violation_error_code="price_positive",
+        )
+        path, args, kwargs = constraint.deconstruct()
+        self.assertEqual(path, "django.db.models.CheckConstraint")
+        self.assertEqual(args, ())
+        self.assertEqual(
+            kwargs,
+            {
+                "check": models.Q(price__gt=0),
+                "name": "price_gt_0",
+                "violation_error_code": "price_positive",
+            },
+        )
+        # Test without code
+        constraint = models.CheckConstraint(
+            check=models.Q(price__gt=0), name="price_gt_0"
+        )
+        path, args, kwargs = constraint.deconstruct()
+        self.assertNotIn("violation_error_code", kwargs)
 
     @skipUnlessDBFeature("supports_comparing_boolean_expr")
     def test_validate_nullable_field_with_none(self):
@@ -736,6 +773,27 @@ class UniqueConstraintTests(TestCase):
             UniqueConstraintProduct(name=self.p1.name.upper()),
             exclude={"name"},
         )
+    def test_deconstruction_with_violation_error_code(self):
+        constraint = models.UniqueConstraint(
+            fields=["name"],
+            name="name_unique",
+            violation_error_code="name_must_be_unique",
+        )
+        path, args, kwargs = constraint.deconstruct()
+        self.assertEqual(path, "django.db.models.UniqueConstraint")
+        self.assertEqual(args, ())
+        self.assertEqual(
+            kwargs,
+            {
+                "fields": ("name",),
+                "name": "name_unique",
+                "violation_error_code": "name_must_be_unique",
+            },
+        )
+        # Test without code
+        constraint = models.UniqueConstraint(fields=["name"], name="name_unique")
+        path, args, kwargs = constraint.deconstruct()
+        self.assertNotIn("violation_error_code", kwargs)
 
     def test_validate_ordered_expression(self):
         constraint = models.UniqueConstraint(
