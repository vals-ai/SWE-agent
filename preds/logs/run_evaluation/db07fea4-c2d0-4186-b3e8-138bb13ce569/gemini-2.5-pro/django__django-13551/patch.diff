diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..ea4a4b0521 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -94,7 +94,9 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        email_field_name = user.get_email_field_name()
+        email = getattr(user, email_field_name, None) or ""
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py
index bba435be84..3bf8f067f7 100644
--- a/tests/auth_tests/test_tokens.py
+++ b/tests/auth_tests/test_tokens.py
@@ -100,6 +100,23 @@ class TokenGeneratorTest(TestCase):
             token = generator.make_token(user)
             self.assertIs(generator.check_token(user, token), True)
 
+    def test_token_invalidated_by_email_change(self):
+        """
+        Changing a user's email invalidates password reset tokens.
+        """
+        user = User.objects.create_user('emailchangetest', 'test@example.com', 'testpw')
+        p0 = PasswordResetTokenGenerator()
+        tk1 = p0.make_token(user)
+        self.assertIs(p0.check_token(user, tk1), True)
+        # Change email
+        user.email = 'new_test@example.com'
+        user.save()
+        # Old token is no longer valid
+        self.assertIs(p0.check_token(user, tk1), False)
+        # New token is valid
+        tk2 = p0.make_token(user)
+        self.assertIs(p0.check_token(user, tk2), True)
+
     def test_legacy_token_validation(self):
         # RemovedInDjango40Warning: pre-Django 3.1 tokens will be invalid.
         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')
