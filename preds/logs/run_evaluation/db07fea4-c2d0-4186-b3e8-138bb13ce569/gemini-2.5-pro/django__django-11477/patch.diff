diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index af0508f94e..15c9d9082b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -345,6 +345,8 @@ class URLPattern:
         match = self.pattern.match(path)
         if match:
             new_path, args, kwargs = match
+            # Filter out None values from kwargs if the group was optional.
+            kwargs = {k: v for k, v in kwargs.items() if v is not None}
             # Pass any extra_kwargs as **kwargs.
             kwargs.update(self.default_args)
             return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))
@@ -617,11 +619,25 @@ class URLResolver:
                         continue
                     candidate_subs = dict(zip(params, args))
                 else:
-                    if set(kwargs).symmetric_difference(params).difference(defaults):
+                    # Check if all required parameters are present
+                    required_params = set(params).difference(defaults)
+                    if not required_params.issubset(kwargs):
                         continue
-                    if any(kwargs.get(k, v) != v for k, v in defaults.items()):
+
+                    # Check if provided kwargs conflict with defaults
+                    if any(k in kwargs and kwargs[k] != v for k, v in defaults.items()):
+                        continue  # 16 spaces
+
+                    # Check that this possibility's `params` match the relevant provided `kwargs`
+                    relevant_kwargs = {k for k in kwargs if k not in defaults or kwargs[k] != defaults[k]}
+                    if not relevant_kwargs.issubset(params):
                         continue
-                    candidate_subs = kwargs
+
+                    # Build candidate_subs: start with defaults, override with relevant kwargs
+                    candidate_subs = defaults.copy()
+                    candidate_subs.update({k: v for k, v in kwargs.items() if k in params})
+
+                    # (Check removed as it incorrectly handled optional parameters)
                 # Convert the candidate subs to text using Converter.to_url().
                 text_candidate_subs = {}
                 for k, v in candidate_subs.items():
diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py
index 8d55a79272..dbc7a7c6ce 100644
--- a/django/utils/regex_helper.py
+++ b/django/utils/regex_helper.py
@@ -292,7 +292,7 @@ def flatten_result(source):
             params = []
         else:
             params = [source[1]]
-        return [source[0]], [params]
+        return ['%%(%s)s' % source[1]], [params]
     result = ['']
     result_args = [[]]
     pos = last = 0
@@ -301,7 +301,7 @@ def flatten_result(source):
             continue
         piece = ''.join(source[last:pos])
         if isinstance(elt, Group):
-            piece += elt[0]
+            piece += '%%(%s)s' % elt[1]
             param = elt[1]
         else:
             param = None
diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py
index 6ed2c4ffeb..863489e90b 100644
--- a/tests/i18n/patterns/tests.py
+++ b/tests/i18n/patterns/tests.py
@@ -161,7 +161,25 @@ class URLTranslationTests(URLTestCaseBase):
 
         with translation.override('nl'):
             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')
-            self.assertEqual(translation.get_language(), 'nl')
+
+    def test_translate_url_optional_arg(self):
+        """
+        translate_url() correctly handles optional named arguments when they
+        are not provided.
+        """
+        with translation.override('en'):
+            # Translate from English to Dutch, omitting the optional arg
+            translated_url = translate_url('/en/optional/', 'nl')
+            # The optional part should be absent in the translated URL
+            self.assertEqual(translated_url, '/nl/optional/')
+        with translation.override('nl'):
+            # Translate from Dutch to English, omitting the optional arg
+            translated_url = translate_url('/nl/optional/', 'en')
+            self.assertEqual(translated_url, '/en/optional/')
+        with translation.override('en'):
+            # Translate with the optional arg present
+            translated_url = translate_url('/en/optional/testval/', 'nl')
+            self.assertEqual(translated_url, '/nl/optional/testval/')
 
 
 class URLNamespaceTests(URLTestCaseBase):
diff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py
index b0c2f2585e..2a1cd38f28 100644
--- a/tests/i18n/patterns/urls/default.py
+++ b/tests/i18n/patterns/urls/default.py
@@ -16,5 +16,6 @@ urlpatterns += i18n_patterns(
     path('prefixed/', view, name='prefixed'),
     path('prefixed.xml', view, name='prefixed_xml'),
     re_path(_(r'^users/$'), view, name='users'),
+        re_path(r'^optional(?:/(?P<optional_arg>\w+))?/$', view, name='optional_test'),
     re_path(_(r'^account/'), include('i18n.patterns.urls.namespace', namespace='account')),
 )
