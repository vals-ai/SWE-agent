diff --git a/django/db/models/base.py b/django/db/models/base.py
index 2428218696..322880549d 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -764,6 +764,19 @@ class Model(metaclass=ModelBase):
                 raw, cls, force_insert or parent_inserted,
                 force_update, using, update_fields,
             )
+            # Ensure FK attnames are synced with cached related objects *after* saving.
+            # This ensures the instance reflects the saved state.
+            for field in meta.local_concrete_fields:
+                if field.is_relation and field.is_cached(self):
+                    cached_value = field.get_cached_value(self)
+                    if cached_value is not None:
+                        related_pk_val = getattr(cached_value, field.target_field.attname, None)
+                        current_fk_val = getattr(self, field.attname)
+                        if current_fk_val != related_pk_val:
+                            setattr(self, field.attname, related_pk_val)
+                            # Optionally clear cache here too if needed, but updating
+                            # the attname might be sufficient.
+                            # field.delete_cached_value(self)
         # Store the database on which the object was saved
         self._state.db = using
         # Once saved, this is no longer a to-be-added instance.
diff --git a/tests/custom_pk/models.py b/tests/custom_pk/models.py
index edfc6712f3..9afd2753fd 100644
--- a/tests/custom_pk/models.py
+++ b/tests/custom_pk/models.py
@@ -36,3 +36,11 @@ class Bar(models.Model):
 
 class Foo(models.Model):
     bar = models.ForeignKey(Bar, models.CASCADE)
+
+
+class Product(models.Model):
+    sku = models.CharField(primary_key=True, max_length=50)
+
+
+class Order(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
\ No newline at end of file
diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py
index abb4ccd90b..ff4b45dfa0 100644
--- a/tests/custom_pk/tests.py
+++ b/tests/custom_pk/tests.py
@@ -1,7 +1,7 @@
 from django.db import IntegrityError, transaction
 from django.test import TestCase, skipIfDBFeature
 
-from .models import Bar, Business, Employee, Foo
+from .models import Bar, Business, Employee, Foo, Product, Order
 
 
 class BasicCustomPKTests(TestCase):
@@ -230,3 +230,35 @@ class CustomPKTests(TestCase):
         with self.assertRaises(IntegrityError):
             with transaction.atomic():
                 Employee.objects.create(first_name="Tom", last_name="Smith")
+
+
+class ForeignKeyToNonAutoPKTests(TestCase):
+    def test_parent_save_after_child_pk_set(self):
+        """
+        Saving the parent after setting the child's non-auto PK should
+        correctly populate the parent's FK field.
+        """
+        with transaction.atomic():
+            order = Order()
+            order.product = Product()
+            order.product.sku = "foo"
+            order.product.save()
+            order.save()
+            # The bug is that product_id is saved as "" instead of "foo"
+            # This assertion currently fails
+            self.assertTrue(Order.objects.filter(product=order.product).exists())
+            # This assertion currently passes, but shouldn't
+            self.assertFalse(Order.objects.filter(product_id="").exists())
+
+    def test_parent_save_with_child_pk_preset(self):
+        """
+        Saving the parent when the child's non-auto PK is already set
+        works correctly.
+        """
+        with transaction.atomic():
+            order = Order()
+            order.product = Product(sku="foo")
+            order.product.save()
+            order.save()
+            self.assertTrue(Order.objects.filter(product=order.product).exists())
+            self.assertFalse(Order.objects.filter(product_id="").exists())
\ No newline at end of file
