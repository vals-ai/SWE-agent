diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..776ee47014 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -479,6 +479,41 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual
     pass
 
 
+class KeyTransformIn(lookups.In):
+    def process_lhs(self, compiler, connection):
+        lhs, lhs_params = super().process_lhs(compiler, connection)
+        return lhs, lhs_params
+
+    def process_rhs(self, compiler, connection):
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+        # Treat None lookup values as null.
+        if connection.vendor == 'mysql':
+            func = ["JSON_EXTRACT(%s, '$')"] * len(rhs_params)
+            rhs = rhs % tuple(func)
+        elif connection.vendor == 'oracle':
+            func = []
+            for value in rhs_params:
+                value = json.loads(value)
+                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'
+                func.append("%s('%s', '$.value')" % (
+                    function,
+                    json.dumps({'value': value}),
+                ))
+            rhs = rhs % tuple(func)
+            rhs_params = []
+        elif connection.vendor == 'sqlite':
+            # LHS uses ->> which extracts text. Convert RHS params to text,
+            # except None which becomes NULL.
+            new_rhs_params = []
+            for value in rhs_params:
+                if value is None:
+                    new_rhs_params.append(None)
+                else:
+                    new_rhs_params.append(str(value))
+            rhs_params = new_rhs_params
+        return rhs, rhs_params
+
+
 KeyTransform.register_lookup(KeyTransformExact)
 KeyTransform.register_lookup(KeyTransformIExact)
 KeyTransform.register_lookup(KeyTransformIsNull)
@@ -494,6 +529,7 @@ KeyTransform.register_lookup(KeyTransformLt)
 KeyTransform.register_lookup(KeyTransformLte)
 KeyTransform.register_lookup(KeyTransformGt)
 KeyTransform.register_lookup(KeyTransformGte)
+KeyTransform.register_lookup(KeyTransformIn)
 
 
 class KeyTransformFactory:
diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py
index a7648711ac..e392350332 100644
--- a/tests/model_fields/test_jsonfield.py
+++ b/tests/model_fields/test_jsonfield.py
@@ -698,6 +698,47 @@ class TestQuerying(TestCase):
                     **{lookup: value},
                 ).exists(), True)
 
+    def test_key_in_lookup(self):
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__foo__in=['bar', 'baz']),
+            [self.objs[0]],
+        )
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__a__in=['b', 'x']),
+            [self.objs[4]],
+        )
+        # Test numeric values.
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__c__in=[1, 2]),
+            [self.objs[1]],
+        )
+        # Test None/null values.
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__j__in=[None, 'x']),
+            [self.objs[4]],
+        )
+        # Test mixed types.
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__foo__in=['bar', 1]),
+            [self.objs[0]],
+        )
+        # Test empty list.
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__foo__in=[]),
+            [],
+        )
+        # Test non-existent key.
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__nonexistent__in=['a', 'b']),
+            [],
+        )
+        # Test key transform on JSONModel (non-nullable).
+        JSONModel.objects.create(value={'a': 1})
+        self.assertSequenceEqual(
+            JSONModel.objects.filter(value__a__in=[1, 2]),
+            JSONModel.objects.filter(value__a=1),
+        )
+
     @skipUnlessDBFeature('supports_json_field_contains')
     def test_contains_contained_by_with_key_transform(self):
         tests = [
