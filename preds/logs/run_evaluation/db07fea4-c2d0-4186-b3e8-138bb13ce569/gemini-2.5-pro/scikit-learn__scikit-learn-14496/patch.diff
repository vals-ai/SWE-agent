diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py
index 4f7eb11ab..286e833fc 100755
--- a/sklearn/cluster/optics_.py
+++ b/sklearn/cluster/optics_.py
@@ -235,6 +235,13 @@ if metric=’precomputed’.
         """
         X = check_array(X, dtype=np.float)
 
+        n_samples = X.shape[0]
+        _validate_size(self.min_samples, n_samples, 'min_samples')
+        if self.min_samples <= 1:
+            min_samples_ = int(round(max(2, self.min_samples * n_samples)))
+        else:
+            min_samples_ = int(self.min_samples)
+
         if self.cluster_method not in ['dbscan', 'xi']:
             raise ValueError("cluster_method should be one of"
                              " 'dbscan' or 'xi' but is %s" %
@@ -242,7 +249,7 @@ if metric=’precomputed’.
 
         (self.ordering_, self.core_distances_, self.reachability_,
          self.predecessor_) = compute_optics_graph(
-             X=X, min_samples=self.min_samples, algorithm=self.algorithm,
+             X=X, min_samples=min_samples_, algorithm=self.algorithm,
              leaf_size=self.leaf_size, metric=self.metric,
              metric_params=self.metric_params, p=self.p, n_jobs=self.n_jobs,
              max_eps=self.max_eps)
@@ -253,7 +260,7 @@ if metric=’precomputed’.
                 self.reachability_,
                 self.predecessor_,
                 self.ordering_,
-                self.min_samples,
+                min_samples_,
                 self.min_cluster_size,
                 self.xi,
                 self.predecessor_correction)
diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py
index d5f4d62ea..ad8a2f3b5 100644
--- a/sklearn/cluster/tests/test_optics.py
+++ b/sklearn/cluster/tests/test_optics.py
@@ -397,6 +397,21 @@ def test_wrong_cluster_method():
         clust.fit(X)
 
 
+def test_optics_min_samples_float():
+    # Check that OPTICS works when min_samples is a float
+    # Non-regression test for #15821
+    rng = np.random.RandomState(0)
+    X = rng.rand(50, 2)
+    # Should not raise TypeError
+    OPTICS(min_samples=0.1).fit(X)
+    # Test with a value that rounds up
+    OPTICS(min_samples=0.11).fit(X) # 0.11 * 50 = 5.5 -> 6
+    # Test with a value that rounds down
+    OPTICS(min_samples=0.09).fit(X) # 0.09 * 50 = 4.5 -> 5
+    # Test with a value that results in less than 2 samples (should default to 2)
+    OPTICS(min_samples=0.01).fit(X) # 0.01 * 50 = 0.5 -> 2
+
+
 def test_extract_dbscan():
     # testing an easy dbscan case. Not including clusters with different
     # densities.
