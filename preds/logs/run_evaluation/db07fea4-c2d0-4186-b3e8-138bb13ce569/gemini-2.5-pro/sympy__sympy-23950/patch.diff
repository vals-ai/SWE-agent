diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..10965e1c1f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,21 @@
+from sympy import Contains, Reals, Symbol, Piecewise, pprint
+
+x = Symbol('x')
+
+# First snippet
+contains_expr = Contains(x, Reals)
+result = contains_expr.as_set()
+print("Result of Contains(x, Reals).as_set():")
+pprint(result)
+print(f"Is the result a Contains object? {isinstance(result, Contains)}")
+
+# Second snippet (causes traceback)
+try:
+    print("\nTrying Piecewise example:")
+    expr = Piecewise((6, Contains(x, Reals)), (7, True))
+    pprint(expr)
+except AttributeError as e:
+    print(f"\nCaught expected AttributeError: {e}")
+
+print("\nScript completed.")
+
diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..997a4d8e16 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -45,4 +45,4 @@ def binary_symbols(self):
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        return self.args[1]
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c..b8756db813 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -41,10 +41,8 @@ def test_binary_symbols():
 def test_as_set():
     x = Symbol('x')
     y = Symbol('y')
-    # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)
+    assert Contains(x, S.Reals).as_set() == S.Reals
 
 def test_type_error():
     # Pass in a parameter not of type "set"
