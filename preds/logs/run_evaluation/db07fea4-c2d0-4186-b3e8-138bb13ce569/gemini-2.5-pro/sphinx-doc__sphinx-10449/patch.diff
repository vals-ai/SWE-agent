diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 06768168e..c4ba1d6d7 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -59,14 +59,14 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
 
         for field_list in field_lists:
             if app.config.autodoc_typehints_description_target == "all":
-                modify_field_list(field_list, annotations[fullname])
+                modify_field_list(field_list, annotations[fullname], objtype)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list, annotations[fullname], force_rtype=True, objtype=objtype
                 )
             else:
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=False
+                    field_list, annotations[fullname], force_rtype=False, objtype=objtype
                 )
 
 
@@ -83,7 +83,7 @@ def insert_field_list(node: Element) -> nodes.field_list:
     return field_list
 
 
-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:
+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], objtype: str) -> None:
     arguments: Dict[str, Dict[str, bool]] = {}
     fields = cast(Iterable[nodes.field], node)
     for field in fields:
@@ -123,17 +123,22 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             field += nodes.field_body('', nodes.paragraph('', ''))
             node += field
 
+    # Add rtype field if annotation exists and it's not already described
     if 'return' in annotations and 'return' not in arguments:
-        field = nodes.field()
-        field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
-        node += field
+        # Check objtype and annotation value to prevent adding "-> None" for classes
+        if objtype != 'class' or annotations['return'] != 'None':
+            field = nodes.field()
+            field += nodes.field_name('', 'rtype')
+            # Use the correct annotation value!
+            field += nodes.field_body('', nodes.paragraph('', annotations['return']))
+            node += field
 
 
 def augment_descriptions_with_types(
     node: nodes.field_list,
     annotations: Dict[str, str],
-    force_rtype: bool
+    force_rtype: bool,
+    objtype: str  # Added objtype
 ) -> None:
     fields = cast(Iterable[nodes.field], node)
     has_description = set()  # type: Set[str]
@@ -171,8 +176,9 @@ def augment_descriptions_with_types(
     # Add 'rtype' if 'return' is present and 'rtype' isn't.
     if 'return' in annotations:
         rtype = annotations['return']
-        if 'return' not in has_type and ('return' in has_description or
-                                         (force_rtype and rtype != "None")):
+        if 'return' not in has_type and \
+           ('return' in has_description or (force_rtype and rtype != "None")) and \
+           (objtype != 'class' or rtype != 'None'):  # Don't add None rtype to class
             field = nodes.field()
             field += nodes.field_name('', 'rtype')
             field += nodes.field_body('', nodes.paragraph('', rtype))
