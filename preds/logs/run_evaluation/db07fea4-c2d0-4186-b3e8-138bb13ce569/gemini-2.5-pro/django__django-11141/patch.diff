diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/admin.py b/testapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/testapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..9806af7f75
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class TestappConfig(AppConfig):
+    name = 'testapp'
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..71a8362390
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/testapp/tests.py b/testapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/testapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/testapp/views.py b/testapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py
index 0f0a590e7c..d1f4cebcc4 100644
--- a/tests/migrations/test_loader.py
+++ b/tests/migrations/test_loader.py
@@ -1,4 +1,8 @@
 import compileall
+import sys
+import tempfile
+import shutil
+from pathlib import Path
 import os
 
 from django.db import connection, connections
@@ -523,7 +527,6 @@ class PycLoaderTests(MigrationTestBase):
                     os.remove(os.path.join(migration_dir, name))
             loader = MigrationLoader(connection)
             self.assertIn(('migrations', '0001_initial'), loader.disk_migrations)
-
     def test_invalid(self):
         """
         MigrationLoader reraises ImportErrors caused by "bad magic number" pyc
@@ -540,4 +543,50 @@ class PycLoaderTests(MigrationTestBase):
                 "to be a stale .pyc file."
             )
             with self.assertRaisesRegex(ImportError, msg):
+                pass
+    def test_namespace_package(self):
+        """
+        MigrationLoader loads migrations from namespace packages (PEP 420).
+        """
+        app_label = 'namespace_app_testcase' # Use unique name
+        migration_name = '0001_initial'
+        module_name = f'migrations_{app_label}' # Simpler module name
+
+        # Create temporary directory structure
+        with tempfile.TemporaryDirectory() as tmpdir:
+            tmp_path = Path(tmpdir)
+            migrations_dir = tmp_path / module_name
+            migrations_dir.mkdir()
+
+            # Create dummy migration file
+            migration_file = migrations_dir / f'{migration_name}.py'
+            migration_file.write_text(
+                "from django.db import migrations\n\n"
+                "class Migration(migrations.Migration):\n"
+                "    operations = []\n"
+            )
+
+            # Ensure no __init__.py exists (it shouldn't by default)
+            init_path = migrations_dir / '__init__.py'
+            self.assertFalse(init_path.exists())
+
+            # Add tmpdir to sys.path and override settings
+            sys.path.insert(0, str(tmp_path))
+            try:
+                with override_settings(MIGRATION_MODULES={app_label: module_name}):
+                    # Check if the loader finds the migration
+                    # We expect this to FAIL with original loader.py code
+                    loader = MigrationLoader(None)
+                    self.assertIn((app_label, migration_name), loader.disk_migrations)
+            finally:
+                # Clean up sys.path
+                if str(tmp_path) in sys.path:
+                    sys.path.remove(str(tmp_path))
+                # Clean up any loaded modules (important!)
+                if module_name in sys.modules:
+                    del sys.modules[module_name]
+                if f'{module_name}.{migration_name}' in sys.modules:
+                    del sys.modules[f'{module_name}.{migration_name}'] # Corrected indentation (20 spaces)
+
+class NamespacePackageLoaderTests(TestCase):
                 MigrationLoader(connection)
diff --git a/tests/staticfiles_tests/settings.py b/tests/staticfiles_tests/settings.py
index 1320da7a0d..1d33b943f1 100644
--- a/tests/staticfiles_tests/settings.py
+++ b/tests/staticfiles_tests/settings.py
@@ -16,13 +16,17 @@ TEST_SETTINGS = {
         'django.contrib.staticfiles.finders.AppDirectoriesFinder',
         'django.contrib.staticfiles.finders.DefaultStorageFinder',
     ],
-    'INSTALLED_APPS': [
-        'django.contrib.staticfiles',
-        'staticfiles_tests',
-        'staticfiles_tests.apps.test',
-        'staticfiles_tests.apps.no_label',
-    ],
     # In particular, AuthenticationMiddleware can't be used because
     # contrib.auth isn't in INSTALLED_APPS.
     'MIDDLEWARE': [],
 }
+
+SECRET_KEY = 'dummy'
+
+INSTALLED_APPS = [
+    'django.contrib.staticfiles',
+    'staticfiles_tests',
+    'staticfiles_tests.apps.test',
+    'testapp',
+    'staticfiles_tests.apps.no_label',
+]
\ No newline at end of file
