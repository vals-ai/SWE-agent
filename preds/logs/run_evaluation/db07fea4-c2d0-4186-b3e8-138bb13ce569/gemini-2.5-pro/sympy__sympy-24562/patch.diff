diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 52f7ea45ad..a47a42e930 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1625,19 +1625,35 @@ def __new__(cls, p, q=None, gcd=None):
             q = 1
             gcd = 1
 
-        if not isinstance(p, SYMPY_INTS):
-            p = Rational(p)
-            q *= p.q
-            p = p.p
+        # Convert p to numerator/denominator integers
+        if isinstance(p, SYMPY_INTS):
+            p_num, p_den = int(p), 1
         else:
-            p = int(p)
-
-        if not isinstance(q, SYMPY_INTS):
-            q = Rational(q)
-            p *= q.q
-            q = q.p
+            # Use the one-argument constructor logic to parse p
+            p_rat = Rational(p) # This call is safe
+            if isinstance(p_rat, Integer):
+                p_num, p_den = p_rat.p, 1 # Corrected: 8 spaces
+            elif not isinstance(p_rat, Rational):
+                raise TypeError(f"Unexpected type from Rational({p}): {type(p_rat)}") # Corrected: 8 spaces
+            else: # p_rat is Rational
+                p_num, p_den = p_rat.p, p_rat.q # Corrected: 8 spaces
+
+        # Convert q to numerator/denominator integers
+        if isinstance(q, SYMPY_INTS):
+            q_num, q_den = int(q), 1
         else:
-            q = int(q)
+            # Use the one-argument constructor logic to parse q
+            q_rat = Rational(q) # This call is safe
+            if isinstance(q_rat, Integer):
+                q_num, q_den = q_rat.p, 1 # Corrected: 8 spaces
+            elif not isinstance(q_rat, Rational):
+                raise TypeError(f"Unexpected type from Rational({q}): {type(q_rat)}") # Corrected: 8 spaces
+            else: # q_rat is Rational
+                q_num, q_den = q_rat.p, q_rat.q # Corrected: 8 spaces
+
+        # Calculate final numerator and denominator for p/q = (p_num/p_den) / (q_num/q_den)
+        p = p_num * q_den
+        q = p_den * q_num
 
         # p and q are now ints
         if q == 0:
