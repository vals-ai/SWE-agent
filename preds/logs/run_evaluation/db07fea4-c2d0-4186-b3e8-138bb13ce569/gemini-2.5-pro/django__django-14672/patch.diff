diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..65950590e2 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):
     def identity(self):
         return super().identity + (
             self.through,
-            self.through_fields,
+            make_hashable(self.through_fields),
             self.db_constraint,
         )
 
diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py
index 50d2c57dd4..75f5bf5135 100644
--- a/tests/proxy_models/tests.py
+++ b/tests/proxy_models/tests.py
@@ -1,9 +1,12 @@
 from django.contrib import admin
 from django.contrib.auth.models import User as AuthUser
 from django.contrib.contenttypes.models import ContentType
-from django.core import checks, management
+from django.apps import apps
+from django.core import checks
+from django.core import management
 from django.db import DEFAULT_DB_ALIAS, models
 from django.db.models import signals
+from django.test import SimpleTestCase
 from django.test import TestCase, override_settings
 from django.test.utils import isolate_apps
 from django.urls import reverse
@@ -362,6 +365,48 @@ class ProxyModelTests(TestCase):
     def test_eq(self):
         self.assertEqual(MyPerson(id=100), Person(id=100))
 
+@isolate_apps('proxy_models', attr_name='apps')
+class ManyToManyRelCheckTests(SimpleTestCase):
+    def test_m2m_through_fields_hashable(self):
+        """
+        Check that ManyToManyRel.through_fields is hashable even if it's a
+        list. Regression test for #32715.
+        """
+        class Parent(models.Model):
+            name = models.CharField(max_length=256)
+
+            class Meta:
+                app_label = 'proxy_models'
+
+        class ProxyParent(Parent):
+            class Meta:
+                proxy = True
+                app_label = 'proxy_models'
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+            many_to_many_field = models.ManyToManyField(
+                to=Parent,
+                through='ManyToManyModel',
+                through_fields=['child', 'parent'],
+                related_name='something',
+            )
+
+            class Meta:
+                app_label = 'proxy_models'
+
+        class ManyToManyModel(models.Model):
+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+            class Meta:
+                app_label = 'proxy_models'
+
+        # Before the fix, this check raised TypeError: unhashable type: 'list'
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        self.assertEqual(errors, [])
+
 
 @override_settings(ROOT_URLCONF='proxy_models.urls')
 class ProxyModelAdminTests(TestCase):
