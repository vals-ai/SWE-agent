+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8...+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
 done
Generation complete.
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/backends/sqlite3/base.py
	modified:   django/db/backends/sqlite3/operations.py
	modified:   django/db/models/expressions.py
	modified:   django/db/models/fields/__init__.py
	modified:   tests/expressions/tests.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 2d67222472f80f251607ae1b720527afceba06ad
Author: tapan gujjar <tapan@stablehacks.com>
Date:   Tue May 5 15:40:46 2020 -0400

    Fixed #31522 -- Made admin's SelectBox preserve scroll position.

diff --git a/django/contrib/admin/static/admin/js/SelectBox.js b/django/contrib/admin/static/admin/js/SelectBox.js
index e166cf02fc..ace6d9dfb8 100644
--- a/django/contrib/admin/static/admin/js/SelectBox.js
+++ b/django/contrib/admin/static/admin/js/SelectBox.js
@@ -13,6 +13,7 @@
         redisplay: function(id) {
             // Repopulate HTML select box from cache
             const box = document.getElementById(id);
+            const scroll_value_from_top = box.scrollTop;
             box.innerHTML = '';
             for (const node of SelectBox.cache[id]) {
                 if (node.displayed) {
@@ -22,6 +23,7 @@
                     box.appendChild(new_option);
                 }
             }
+            box.scrollTop = scroll_value_from_top;
         },
         filter: function(id, text) {
             // Redisplay the HTML select box, displaying only the choices containing ALL
diff --git a/js_tests/admin/SelectBox.test.js b/js_tests/admin/SelectBox.test.js
index 3de7623691..7d127b5d59 100644
--- a/js_tests/admin/SelectBox.test.js
+++ b/js_tests/admin/SelectBox.test.js
@@ -21,3 +21,27 @@ QUnit.test('filter', function(assert) {
     assert.equal($('#id option').length, 1);
     assert.equal($('#id option').text(), "A");
 });
+
+QUnit.test('preserve scroll position', function(assert) {
+    const $ = django.jQuery;
+    const optionsCount = 100;
+    $('<select id="from_id" multiple></select>').appendTo('#qunit-fixture');
+    $('<select id="to_id" multiple></select>').appendTo('#qunit-fixture');
+    const fromSelectBox = document.getElementById('from_id');
+    const toSelectBox = document.getElementById('to_id');
+    for (let i = 0; i < optionsCount; i++) {
+        fromSelectBox.appendChild(new Option());
+    }
+    SelectBox.init('from_id');
+    SelectBox.init('to_id');
+    const selectedOptions = [97, 98, 99];
+    for (const index of selectedOptions) {
+        fromSelectBox.options[index].selected = true;
+        fromSelectBox.options[index].scrollIntoView();
+    }
+    assert.equal(fromSelectBox.options.length, optionsCount);
+    SelectBox.move('from_id', 'to_id');
+    assert.equal(fromSelectBox.options.length, optionsCount - selectedOptions.length);
+    assert.equal(toSelectBox.options.length, selectedOptions.length);
+    assert.notEqual(fromSelectBox.scrollTop, 0);
+});
+ git show
+ git -c core.fileMode=false diff 2d67222472f80f251607ae1b720527afceba06ad
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 31e8a55a43..9b392d1893 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -3,6 +3,7 @@ SQLite backend for the sqlite3 module in the standard library.
 """
 import datetime
 import decimal
+import sqlite3
 import functools
 import hashlib
 import json
@@ -77,6 +78,7 @@ Database.register_converter("timestamp", decoder(parse_datetime))
 Database.register_converter("TIMESTAMP", decoder(parse_datetime))
 
 Database.register_adapter(decimal.Decimal, str)
+Database.register_adapter(datetime.timedelta, lambda td: duration_microseconds(td))
 
 
 class DatabaseWrapper(BaseDatabaseWrapper):
@@ -559,9 +561,8 @@ def _sqlite_format_dtdelta(conn, lhs, rhs):
             out = real_lhs - real_rhs
     except (ValueError, TypeError):
         return None
-    # typecast_timestamp returns a date or a datetime without timezone.
-    # It will be formatted as "%Y-%m-%d" or "%Y-%m-%d %H:%M:%S[.%f]"
-    return str(out)
+    # Convert the resulting timedelta back to microseconds for SQLite.
+    return duration_microseconds(out)
 
 
 @none_guard
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 1f77b3109f..2d50b0efbc 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -3,6 +3,7 @@ import decimal
 import uuid
 from functools import lru_cache
 from itertools import chain
+from django.utils.duration import duration_microseconds
 
 from django.conf import settings
 from django.core.exceptions import FieldError
@@ -271,6 +272,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             converters.append(self.convert_uuidfield_value)
         elif internal_type in ('NullBooleanField', 'BooleanField'):
             converters.append(self.convert_booleanfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_datetimefield_value(self, value, expression, connection):
@@ -317,6 +320,29 @@ class DatabaseOperations(BaseDatabaseOperations):
     def convert_booleanfield_value(self, value, expression, connection):
         return bool(value) if value in (1, 0) else value
 
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is not None:
+            if isinstance(value, datetime.timedelta):
+                # Value is already a timedelta, return it directly.
+                return value
+            # Otherwise, value is microseconds from SQLite subtraction or
+            # a string from django_format_dtdelta. Try converting to int.
+            try:
+                value = int(value)
+            except (ValueError, TypeError):
+                # Should not happen if the custom functions return correctly.
+                return None
+            return datetime.timedelta(microseconds=value)
+        return value
+
+    def adapt_durationfield_value(self, value):
+        # SQLite doesn't support timedelta objects directly. For parameter
+        # binding, return the value unchanged if it's not a timedelta.
+        # Otherwise, convert timedelta to integer microseconds.
+        if not isinstance(value, datetime.timedelta):
+            return value
+        return duration_microseconds(value)
+
     def bulk_insert_sql(self, fields, placeholder_rows):
         return " UNION ALL ".join(
             "SELECT %s" % ", ".join(row)
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..0e9ad63ca0 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -309,6 +309,23 @@ class BaseExpression:
                             source.__class__.__name__,
                         )
                     )
+            # Check for subtraction of two identical date/time types.
+            try:
+                lhs_field = self.lhs.output_field
+                rhs_field = self.rhs.output_field
+            except FieldError:
+                # If either side fails to resolve, we can't determine the output.
+                pass
+            else:
+                if (
+                    self.connector == self.SUB and
+                    isinstance(lhs_field, (fields.DateField, fields.TimeField)) and
+                    lhs_field.__class__ == rhs_field.__class__
+                ):
+                    return fields.DurationField()
+
+            # Fall back to the default behavior if the special case doesn't apply
+            # or if field resolution failed.
             return output_field
 
     @staticmethod
@@ -478,6 +495,10 @@ class CombinedExpression(SQLiteNumericMixin, Expression):
         c.is_summary = summarize
         c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
         c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
+        # Call _resolve_output_field to set the output_field attribute.
+        # This is important for CombinedExpressions created by F() objects where
+        # the output_field is not explicitly set.
+        c._resolve_output_field()
         return c
 
 
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..0f9bc140c8 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1561,11 +1561,12 @@ class DurationField(Field):
         )
 
     def get_db_prep_value(self, value, connection, prepared=False):
-        if connection.features.has_native_duration_field:
-            return value
+        value = super().get_db_prep_value(value, connection, prepared)
         if value is None:
             return None
-        return duration_microseconds(value)
+        if not prepared:
+            value = self.to_python(value)
+        return connection.ops.adapt_durationfield_value(value)
 
     def get_db_converters(self, connection):
         converters = []
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 72f95f0194..4b52eb5e1a 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -1670,6 +1670,36 @@ class FTimeDeltaTests(TestCase):
         e0 = Experiment.objects.get(name='e0')
         self.assertEqual(e0.start, expected_start)
 
+class TemporalSubtractionTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.e1 = Experiment.objects.create(
+            name='e1',
+            start=datetime.datetime(2023, 10, 26, 12, 0, 0),
+            end=datetime.datetime(2023, 10, 26, 13, 30, 0),
+            assigned=datetime.date(2023, 10, 26),
+            completed=datetime.date(2023, 10, 27),
+            estimated_time=datetime.timedelta(hours=1),
+        )
+
+    @skipUnlessDBFeature('supports_temporal_subtraction')
+    def test_datetime_subtraction_without_wrapper(self):
+        # This test reproduces the issue described in the ticket.
+        # Subtraction of two DateTimeFields should result in a DurationField
+        # without needing an explicit ExpressionWrapper.
+        queryset = Experiment.objects.annotate(
+            delta=F('end') - F('start')
+        )
+        self.assertEqual(queryset.first().delta, datetime.timedelta(hours=1, minutes=30))
+
+    @skipUnlessDBFeature('supports_temporal_subtraction')
+    def test_datetime_subtraction_with_timedelta_without_wrapper(self):
+        # Verify that adding/subtracting a timedelta also works correctly.
+        queryset = Experiment.objects.annotate(
+            delta=F('end') - F('start') + Value(datetime.timedelta(minutes=15))
+        )
+        self.assertEqual(queryset.first().delta, datetime.timedelta(hours=1, minutes=45))
+
 
 class ValueTests(TestCase):
     def test_update_TimeField_using_Value(self):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git checkout 2d67222472f80f251607ae1b720527afceba06ad tests/expressions/tests.py
Updated 1 path from 907832c80c
+ git apply -v -
Checking patch tests/expressions/tests.py...
Applied patch tests/expressions/tests.py cleanly.
+ : '>>>>> Start Test Output'
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 expressions.tests
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotate_values_count (expressions.tests.BasicExpressionsTests) ... ok
test_annotate_values_filter (expressions.tests.BasicExpressionsTests) ... ok
test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests) ... ok
test_annotation_with_outerref (expressions.tests.BasicExpressionsTests) ... ERROR
test_annotations_within_subquery (expressions.tests.BasicExpressionsTests) ... ERROR
test_arithmetic (expressions.tests.BasicExpressionsTests) ... ok
test_boolean_expression_combined (expressions.tests.BasicExpressionsTests) ... ok
test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests) ... ok
test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests) ... ok
test_exists_in_filter (expressions.tests.BasicExpressionsTests) ... ok
test_explicit_output_field (expressions.tests.BasicExpressionsTests) ... ERROR
test_filter_inter_attribute (expressions.tests.BasicExpressionsTests) ... ok
test_filter_with_join (expressions.tests.BasicExpressionsTests) ... ok
test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests) ... ok
test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests) ... ok
test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests) ... ok
test_in_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests) ... ok
test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests) ... ok
test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests) ... ok
test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests) ... ok
test_new_object_create (expressions.tests.BasicExpressionsTests) ... ok
test_new_object_save (expressions.tests.BasicExpressionsTests) ... ok
test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests) ... ok
test_object_update (expressions.tests.BasicExpressionsTests) ... ok
test_object_update_fk (expressions.tests.BasicExpressionsTests) ... ok
test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests) ... ok
test_order_by_exists (expressions.tests.BasicExpressionsTests) ... ok
test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests) ... ok
test_order_of_operations (expressions.tests.BasicExpressionsTests) ... ok
test_outerref (expressions.tests.BasicExpressionsTests) ... ok
test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests) ... ok
test_outerref_with_operator (expressions.tests.BasicExpressionsTests) ... ERROR
test_parenthesis_priority (expressions.tests.BasicExpressionsTests) ... ok
test_pickle_expression (expressions.tests.BasicExpressionsTests) ... ok
test_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_eq (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_in_filter (expressions.tests.BasicExpressionsTests) ... ok
test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests) ... ok
test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests) ... ok
test_update (expressions.tests.BasicExpressionsTests) ... ok
test_update_inherited_field_value (expressions.tests.BasicExpressionsTests) ... ok
test_update_with_fk (expressions.tests.BasicExpressionsTests) ... ok
test_update_with_none (expressions.tests.BasicExpressionsTests) ... ok
test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests) ... ok
test_lefthand_addition (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_bitwise_xor_not_supported (expressions.tests.ExpressionOperatorTests) ... skipped "Oracle doesn't support bitwise XOR."
test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_division (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_modulo (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_power (expressions.tests.ExpressionOperatorTests) ... ok
test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_addition (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_division (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_modulo (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests) ... ok
test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests) ... ok
test_righthand_power (expressions.tests.ExpressionOperatorTests) ... ok
test_complex_expressions (expressions.tests.ExpressionsNumericTests) ... ERROR
test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests) ... ok
test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests) ... ok
test_increment_value (expressions.tests.ExpressionsNumericTests) ... ok
test_F_reuse (expressions.tests.ExpressionsTests) ... ok
test_insensitive_patterns_escape (expressions.tests.ExpressionsTests) ... ok
test_patterns_escape (expressions.tests.ExpressionsTests) ... ok
test_date_case_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_date_comparison (expressions.tests.FTimeDeltaTests) ... ERROR
test_date_minus_duration (expressions.tests.FTimeDeltaTests) ... ERROR
test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_date_subtraction (expressions.tests.FTimeDeltaTests) ... ERROR
test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_datetime_subtraction (expressions.tests.FTimeDeltaTests) ... ERROR
test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests) ... ERROR
test_delta_add (expressions.tests.FTimeDeltaTests) ... ERROR
test_delta_subtract (expressions.tests.FTimeDeltaTests) ... ERROR
test_delta_update (expressions.tests.FTimeDeltaTests) ... ERROR
test_duration_expressions (expressions.tests.FTimeDeltaTests) ... ok
test_duration_with_datetime (expressions.tests.FTimeDeltaTests) ... ERROR
test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests) ... ERROR
test_durationfield_add (expressions.tests.FTimeDeltaTests) ... ERROR
test_exclude (expressions.tests.FTimeDeltaTests) ... ERROR
test_invalid_operator (expressions.tests.FTimeDeltaTests) ... ERROR
test_mixed_comparisons1 (expressions.tests.FTimeDeltaTests) ... skipped "Database doesn't support feature(s): supports_mixed_date_datetime_comparisons"
test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests) ... ERROR
test_multiple_query_compilation (expressions.tests.FTimeDeltaTests) ... ERROR
test_negative_timedelta_update (expressions.tests.FTimeDeltaTests) ... ERROR
test_query_clone (expressions.tests.FTimeDeltaTests) ... ERROR
test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests) ... ok
test_time_subtraction (expressions.tests.FTimeDeltaTests) ... ERROR
test_month_aggregation (expressions.tests.FieldTransformTests) ... ok
test_multiple_transforms_in_values (expressions.tests.FieldTransformTests) ... ok
test_transform_in_values (expressions.tests.FieldTransformTests) ... ok
test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests) ... ok
test_deconstruct (expressions.tests.ValueTests) ... ok
test_deconstruct_output_field (expressions.tests.ValueTests) ... ok
test_equal (expressions.tests.ValueTests) ... ok
test_equal_output_field (expressions.tests.ValueTests) ... ok
test_hash (expressions.tests.ValueTests) ... ok
test_raise_empty_expressionlist (expressions.tests.ValueTests) ... ok
test_update_TimeField_using_Value (expressions.tests.ValueTests) ... ok
test_update_UUIDField_using_Value (expressions.tests.ValueTests) ... ok
test_and (expressions.tests.CombinableTests) ... ok
test_negation (expressions.tests.CombinableTests) ... ok
test_or (expressions.tests.CombinableTests) ... ok
test_reversed_and (expressions.tests.CombinableTests) ... ok
test_reversed_or (expressions.tests.CombinableTests) ... ok
test_empty_group_by (expressions.tests.ExpressionWrapperTests) ... ok
test_non_empty_group_by (expressions.tests.ExpressionWrapperTests) ... ok
test_deconstruct (expressions.tests.FTests) ... ok
test_deepcopy (expressions.tests.FTests) ... ok
test_equal (expressions.tests.FTests) ... ok
test_hash (expressions.tests.FTests) ... ok
test_not_equal_Value (expressions.tests.FTests) ... ok
test_aggregates (expressions.tests.ReprTests) ... ok
test_distinct_aggregates (expressions.tests.ReprTests) ... ok
test_expressions (expressions.tests.ReprTests) ... ok
test_filtered_aggregates (expressions.tests.ReprTests) ... ok
test_functions (expressions.tests.ReprTests) ... ok
test_equal (expressions.tests.SimpleExpressionTests) ... ok
test_hash (expressions.tests.SimpleExpressionTests) ... ok

======================================================================
ERROR: test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 655, in test_aggregate_subquery_annotation
    ceo_salary_gt_20=Count('pk', filter=Q(ceo_salary__gt=20)),
  File "/testbed/django/db/models/query.py", line 398, in aggregate
    return query.get_aggregation(self.db, kwargs)
  File "/testbed/django/db/models/sql/query.py", line 501, in get_aggregation
    result = compiler.execute_sql(SINGLE)
  File "/testbed/django/db/models/sql/compiler.py", line 1148, in execute_sql
    sql, params = self.as_sql()
  File "/testbed/django/db/models/sql/compiler.py", line 1587, in as_sql
    ann_sql, ann_params = self.compile(annotation)
  File "/testbed/django/db/models/sql/compiler.py", line 428, in compile
    sql, params = vendor_impl(self, self.connection)
  File "/testbed/django/db/models/expressions.py", line 22, in as_sqlite
    sql, params = self.as_sql(compiler, connection, **extra_context)
  File "/testbed/django/db/models/aggregates.py", line 74, in as_sql
    filter_sql, filter_params = self.filter.as_sql(compiler, connection)
  File "/testbed/django/db/models/sql/where.py", line 81, in as_sql
    sql, params = compiler.compile(child)
  File "/testbed/django/db/models/sql/compiler.py", line 430, in compile
    sql, params = node.as_sql(self, self.connection)
  File "/testbed/django/db/models/lookups.py", line 178, in as_sql
    lhs_sql, params = self.process_lhs(compiler, connection)
  File "/testbed/django/db/models/lookups.py", line 170, in process_lhs
    field_internal_type = self.lhs.output_field.get_internal_type()
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/db/models/expressions.py", line 269, in output_field
    output_field = self._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 314, in _resolve_output_field
    lhs_field = self.lhs.output_field
AttributeError: 'Ref' object has no attribute 'lhs'

======================================================================
ERROR: test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 59, in test_annotate_values_aggregate
    output_field=IntegerField()
  File "/testbed/django/db/models/query.py", line 395, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 662, in resolve_expression
    c.source_expressions[pos] = arg.resolve_expression(query, allow_joins, reuse, summarize, for_save)
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 301, in _resolve_output_field
    sources_iter = (source for source in self.get_source_fields() if source is not None)
  File "/testbed/django/db/models/expressions.py", line 379, in get_source_fields
    return [e._output_field_or_none for e in self.get_source_expressions()]
  File "/testbed/django/db/models/expressions.py", line 379, in <listcomp>
    return [e._output_field_or_none for e in self.get_source_expressions()]
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/db/models/expressions.py", line 282, in _output_field_or_none
    return self.output_field
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/db/models/expressions.py", line 269, in output_field
    output_field = self._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 314, in _resolve_output_field
    lhs_field = self.lhs.output_field
AttributeError: 'Ref' object has no attribute 'lhs'

======================================================================
ERROR: test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 706, in test_annotation_with_outerref
    salary_raise=OuterRef('num_employees') + F('num_employees'),
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1117, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 301, in _resolve_output_field
    sources_iter = (source for source in self.get_source_fields() if source is not None)
  File "/testbed/django/db/models/expressions.py", line 379, in get_source_fields
    return [e._output_field_or_none for e in self.get_source_expressions()]
  File "/testbed/django/db/models/expressions.py", line 379, in <listcomp>
    return [e._output_field_or_none for e in self.get_source_expressions()]
AttributeError: 'ResolvedOuterRef' object has no attribute '_output_field_or_none'

======================================================================
ERROR: test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 607, in test_annotations_within_subquery
    [{'salary': 10, 'total_employees': 2300}, {'salary': 20, 'total_employees': 35}],
  File "/opt/miniconda3/envs/testbed/lib/python3.6/unittest/case.py", line 940, in assertSequenceEqual
    len1 = len(seq1)
  File "/testbed/django/db/models/query.py", line 269, in __len__
    self._fetch_all()
  File "/testbed/django/db/models/query.py", line 1305, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File "/testbed/django/db/models/query.py", line 111, in __iter__
    for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):
  File "/testbed/django/db/models/sql/compiler.py", line 1113, in results_iter
    results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
  File "/testbed/django/db/models/sql/compiler.py", line 1148, in execute_sql
    sql, params = self.as_sql()
  File "/testbed/django/db/models/sql/compiler.py", line 498, in as_sql
    extra_select, order_by, group_by = self.pre_sql_setup()
  File "/testbed/django/db/models/sql/compiler.py", line 55, in pre_sql_setup
    self.setup_query()
  File "/testbed/django/db/models/sql/compiler.py", line 46, in setup_query
    self.select, self.klass_info, self.annotation_col_map = self.get_select()
  File "/testbed/django/db/models/sql/compiler.py", line 262, in get_select
    sql, params = self.compile(col)
  File "/testbed/django/db/models/sql/compiler.py", line 430, in compile
    sql, params = node.as_sql(self, self.connection)
  File "/testbed/django/db/models/expressions.py", line 1087, in as_sql
    subquery_sql, sql_params = self.query.as_sql(compiler, connection)
  File "/testbed/django/db/models/sql/query.py", line 1057, in as_sql
    sql, params = self.get_compiler(connection=connection).as_sql()
  File "/testbed/django/db/models/sql/compiler.py", line 498, in as_sql
    extra_select, order_by, group_by = self.pre_sql_setup()
  File "/testbed/django/db/models/sql/compiler.py", line 55, in pre_sql_setup
    self.setup_query()
  File "/testbed/django/db/models/sql/compiler.py", line 46, in setup_query
    self.select, self.klass_info, self.annotation_col_map = self.get_select()
  File "/testbed/django/db/models/sql/compiler.py", line 262, in get_select
    sql, params = self.compile(col)
  File "/testbed/django/db/models/sql/compiler.py", line 428, in compile
    sql, params = vendor_impl(self, self.connection)
  File "/testbed/django/db/models/expressions.py", line 24, in as_sqlite
    if self.output_field.get_internal_type() == 'DecimalField':
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/db/models/expressions.py", line 269, in output_field
    output_field = self._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 314, in _resolve_output_field
    lhs_field = self.lhs.output_field
AttributeError: 'Sum' object has no attribute 'lhs'

======================================================================
ERROR: test_explicit_output_field (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 674, in test_explicit_output_field
    self.assertEqual(expr.output_field, FuncA.output_field)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/db/models/expressions.py", line 269, in output_field
    output_field = self._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 314, in _resolve_output_field
    lhs_field = self.lhs.output_field
AttributeError: 'FuncB' object has no attribute 'lhs'

======================================================================
ERROR: test_outerref_with_operator (expressions.tests.BasicExpressionsTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 682, in test_outerref_with_operator
    inner = Company.objects.filter(num_employees=OuterRef('ceo__salary') + 2)
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 301, in _resolve_output_field
    sources_iter = (source for source in self.get_source_fields() if source is not None)
  File "/testbed/django/db/models/expressions.py", line 379, in get_source_fields
    return [e._output_field_or_none for e in self.get_source_expressions()]
  File "/testbed/django/db/models/expressions.py", line 379, in <listcomp>
    return [e._output_field_or_none for e in self.get_source_expressions()]
AttributeError: 'ResolvedOuterRef' object has no attribute '_output_field_or_none'

======================================================================
ERROR: test_complex_expressions (expressions.tests.ExpressionsNumericTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1150, in test_complex_expressions
    float=F('integer') + F('float') * 2), 1)
  File "/testbed/django/db/models/query.py", line 780, in update
    query.add_update_values(kwargs)
  File "/testbed/django/db/models/sql/subqueries.py", line 97, in add_update_values
    return self.add_update_fields(values_seq)
  File "/testbed/django/db/models/sql/subqueries.py", line 108, in add_update_fields
    val = val.resolve_expression(self, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: BigIntegerField, FloatField. You must set output_field.

======================================================================
ERROR: test_date_comparison (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1422, in test_date_comparison
    test_set = [e.name for e in Experiment.objects.filter(completed__lt=F('assigned') + days)]
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateField, DurationField. You must set output_field.

======================================================================
ERROR: test_date_minus_duration (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1632, in test_date_minus_duration
    assigned__lt=F('completed') - Value(datetime.timedelta(days=4), output_field=DurationField())
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateField, DurationField. You must set output_field.

======================================================================
ERROR: test_date_subtraction (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1274, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/expressions/tests.py", line 1515, in test_date_subtraction
    output_field=DateField(),
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1117, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 254, in resolve_expression
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 254, in <listcomp>
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateField, DurationField. You must set output_field.

======================================================================
ERROR: test_datetime_subtraction (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1274, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/expressions/tests.py", line 1592, in test_datetime_subtraction
    output_field=DateTimeField(),
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1117, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 254, in resolve_expression
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 254, in <listcomp>
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1274, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/expressions/tests.py", line 1607, in test_datetime_subtraction_microseconds
    Experiment.objects.update(end=F('start') + delta)
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 780, in update
    query.add_update_values(kwargs)
  File "/testbed/django/db/models/sql/subqueries.py", line 97, in add_update_values
    return self.add_update_fields(values_seq)
  File "/testbed/django/db/models/sql/subqueries.py", line 108, in add_update_fields
    val = val.resolve_expression(self, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_delta_add (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1395, in test_delta_add
    test_set = [e.name for e in Experiment.objects.filter(end__lt=F('start') + delta)]
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_delta_subtract (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1406, in test_delta_subtract
    test_set = [e.name for e in Experiment.objects.filter(start__gt=F('end') - delta)]
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_delta_update (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1455, in test_delta_update
    Experiment.objects.update(start=F('start') + delta, end=F('end') + delta)
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 780, in update
    query.add_update_values(kwargs)
  File "/testbed/django/db/models/sql/subqueries.py", line 97, in add_update_values
    return self.add_update_fields(values_seq)
  File "/testbed/django/db/models/sql/subqueries.py", line 108, in add_update_fields
    val = val.resolve_expression(self, allow_joins=False, for_save=True)
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_duration_with_datetime (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/testbed/django/db/backends/sqlite3/base.py", line 417, in execute
    return Database.Cursor.execute(self, query, params)
sqlite3.OperationalError: user-defined function raised exception

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1619, in test_duration_with_datetime
    self.assertQuerysetEqual(over_estimate, ['e3', 'e4', 'e5'], lambda e: e.name)
  File "/testbed/django/test/testcases.py", line 1045, in assertQuerysetEqual
    items = map(transform, qs)
  File "/testbed/django/db/models/query.py", line 287, in __iter__
    self._fetch_all()
  File "/testbed/django/db/models/query.py", line 1305, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File "/testbed/django/db/models/query.py", line 53, in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
  File "/testbed/django/db/models/sql/compiler.py", line 1161, in execute_sql
    cursor.execute(sql, params)
  File "/testbed/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "/testbed/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/testbed/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/testbed/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/testbed/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/testbed/django/db/backends/sqlite3/base.py", line 417, in execute
    return Database.Cursor.execute(self, query, params)
django.db.utils.OperationalError: user-defined function raised exception

======================================================================
ERROR: test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1625, in test_duration_with_datetime_microseconds
    output_field=DateTimeField(),
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1117, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 254, in resolve_expression
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 254, in <listcomp>
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_durationfield_add (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1469, in test_durationfield_add
    zeros = [e.name for e in Experiment.objects.filter(start=F('start') + F('estimated_time'))]
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_exclude (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1414, in test_exclude
    test_set = [e.name for e in Experiment.objects.exclude(end__lt=F('start') + delta)]
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 950, in exclude
    return self._filter_or_exclude(True, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 967, in _filter_or_exclude_inplace
    self._query.add_q(~Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_invalid_operator (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1466, in test_invalid_operator
    list(Experiment.objects.filter(start=F('start') * datetime.timedelta(0)))
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1440, in test_mixed_comparisons2
    test_set = [e.name for e in Experiment.objects.filter(start__lt=F('assigned') + delay)]
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateField, DurationField. You must set output_field.

======================================================================
ERROR: test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1380, in test_multiple_query_compilation
    queryset = Experiment.objects.filter(end__lt=F('start') + datetime.timedelta(hours=1))
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1639, in test_negative_timedelta_update
    start_sub_seconds=F('start') + datetime.timedelta(seconds=-30),
  File "/testbed/django/db/models/query.py", line 1117, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_query_clone (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/expressions/tests.py", line 1387, in test_query_clone
    qs = Experiment.objects.filter(end__lt=F('start') + datetime.timedelta(hours=1))
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "/testbed/django/db/models/query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1359, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1381, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1268, in build_filter
    value = self.resolve_lookup_value(value, can_reuse, allow_joins)
  File "/testbed/django/db/models/sql/query.py", line 1065, in resolve_lookup_value
    self, reuse=can_reuse, allow_joins=allow_joins,
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.

======================================================================
ERROR: test_time_subtraction (expressions.tests.FTimeDeltaTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1274, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/expressions/tests.py", line 1560, in test_time_subtraction
    output_field=TimeField(),
  File "/testbed/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1117, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1020, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 254, in resolve_expression
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 254, in <listcomp>
    for expr in c.get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 501, in resolve_expression
    c._resolve_output_field()
  File "/testbed/django/db/models/expressions.py", line 309, in _resolve_output_field
    source.__class__.__name__,
django.core.exceptions.FieldError: Expression contains mixed types: TimeField, DurationField. You must set output_field.

----------------------------------------------------------------------
Ran 143 tests in 0.359s

FAILED (errors=25, skipped=2)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application expressions
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, expressions, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table expressions_manager
    Creating table expressions_employee
    Creating table expressions_remoteemployee
    Creating table expressions_company
    Creating table expressions_number
    Creating table expressions_ExPeRiMeNt
    Creating table expressions_result
    Creating table expressions_time
    Creating table expressions_simulationrun
    Creating table expressions_uuidpk
    Creating table expressions_uuid
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
+ : '>>>>> End Test Output'
+ git checkout 2d67222472f80f251607ae1b720527afceba06ad tests/expressions/tests.py
Updated 1 path from 907832c80c
