diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..86573fa30b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,44 @@
+
+from sympy import polylog, Rational, log, pi, nsimplify, expand_func, I, exp_polar, diff
+from sympy.abc import z
+
+# Issue 1: Evaluation of polylog(2, 1/2)
+print("--- Issue 1 ---")
+expr1 = polylog(2, Rational(1,2))
+expanded_expr1 = expr1.expand(func=True)
+expected_value1 = -log(2)**2/2 + pi**2/12
+
+print(f"Original expression 1: {expr1}")
+print(f"Expanded expression 1: {expanded_expr1}")
+print(f"Expected value 1: {expected_value1}")
+# Check if expansion gives the expected value numerically
+# Use evalf first then nsimplify as per the issue description
+numerical_check1 = nsimplify(expr1.evalf(), [pi**2, log(2)**2])
+print(f"Numerical check 1 (nsimplify(evalf)): {numerical_check1}")
+print(f"Does expanded match expected? {expanded_expr1 == expected_value1}")
+
+print("\n" + "-" * 20 + "\n")
+
+# Issue 2: Expansion of polylog(1, z)
+print("--- Issue 2 ---")
+expr2 = polylog(1, z)
+expanded_expr2 = expand_func(expr2)
+expected_value2 = -log(1 - z)
+
+print(f"Original expression 2: {expr2}")
+print(f"Expanded expression 2: {expanded_expr2}")
+print(f"Expected value 2: {expected_value2}")
+print(f"Does expanded match expected? {expanded_expr2 == expected_value2}")
+
+# Check derivatives as mentioned in the issue
+deriv_diff = diff(expr2 - expanded_expr2, z).expand()
+# Let's try simplifying the derivative difference
+from sympy import simplify
+fully_expanded_deriv_diff = expand_func(deriv_diff)
+simplified_deriv_diff = simplify(fully_expanded_deriv_diff)
+print(f"Derivative difference (expanded): {deriv_diff}")
+print(f"Derivative difference (simplified): {simplified_deriv_diff}")
+
+
+print("\n" + "-" * 20)
+print("Script completed.")
\ No newline at end of file
diff --git a/sympy/functions/special/tests/test_zeta_functions.py b/sympy/functions/special/tests/test_zeta_functions.py
index 3911dadd10..9cc45277e3 100644
--- a/sympy/functions/special/tests/test_zeta_functions.py
+++ b/sympy/functions/special/tests/test_zeta_functions.py
@@ -123,14 +123,15 @@ def myexpand(func, target):
 
 
 def test_polylog_expansion():
-    from sympy import log
+    from sympy import log, pi, S
     assert polylog(s, 0) == 0
     assert polylog(s, 1) == zeta(s)
     assert polylog(s, -1) == -dirichlet_eta(s)
 
-    assert myexpand(polylog(1, z), -log(1 + exp_polar(-I*pi)*z))
+    assert myexpand(polylog(1, z), -log(1 - z))
     assert myexpand(polylog(0, z), z/(1 - z))
     assert myexpand(polylog(-1, z), z**2/(1 - z)**2 + z/(1 - z))
+    assert myexpand(polylog(2, S.Half), pi**2/12 - log(2)**2/2)
     assert myexpand(polylog(-5, z), None)
 
 
diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py
index b8e2b66195..e6dd8cc5f0 100644
--- a/sympy/functions/special/zeta_functions.py
+++ b/sympy/functions/special/zeta_functions.py
@@ -288,16 +288,19 @@ def _eval_rewrite_as_lerchphi(self, s, z):
         return z*lerchphi(z, s, 1)
 
     def _eval_expand_func(self, **hints):
-        from sympy import log, expand_mul, Dummy, exp_polar, I
+        from sympy import log, expand_mul, Dummy, exp_polar, I, S
         s, z = self.args
         if s == 1:
-            return -log(1 + exp_polar(-I*pi)*z)
+            return -log(1 - z)
         if s.is_Integer and s <= 0:
             u = Dummy('u')
             start = u/(1 - u)
             for _ in range(-s):
                 start = u*start.diff(u)
             return expand_mul(start).subs(u, z)
+        if s == 2 and z == S.Half:
+            from sympy import pi, log
+            return pi**2/12 - log(2)**2/2
         return polylog(s, z)
 
 ###############################################################################
