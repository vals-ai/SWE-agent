diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..33b2623b1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+
+import numpy as np
+from sklearn.datasets import make_regression
+from sklearn.linear_model import HuberRegressor
+
+# Random data
+X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)
+X_bool = X > 0
+X_bool_as_float = np.asarray(X_bool, dtype=float)
+
+print("Fitting with float X (should work)")
+huber = HuberRegressor().fit(X, y)
+print("Fit successful.")
+
+print("\nFitting with boolean X (expected to fail)")
+try:
+    huber = HuberRegressor().fit(X_bool, y)
+    print("Fit successful (unexpected).")
+except TypeError as e:
+    print(f"Caught expected TypeError: {e}")
+
+print("\nFitting with boolean X converted to float (should work)")
+huber = HuberRegressor().fit(X_bool_as_float, y)
+print("Fit successful.")
+
+print("\nScript completed.")
\ No newline at end of file
diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py
index 65c686400..d3606a09e 100644
--- a/sklearn/linear_model/huber.py
+++ b/sklearn/linear_model/huber.py
@@ -251,7 +251,7 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):
         self : object
         """
         X, y = check_X_y(
-            X, y, copy=False, accept_sparse=['csr'], y_numeric=True)
+            X, y, copy=False, accept_sparse=['csr'], y_numeric=True, dtype=np.float64)
         if sample_weight is not None:
             sample_weight = np.array(sample_weight)
             check_consistent_length(y, sample_weight)
diff --git a/sklearn/linear_model/tests/test_huber.py b/sklearn/linear_model/tests/test_huber.py
index 6a8b26133..18bdf9670 100644
--- a/sklearn/linear_model/tests/test_huber.py
+++ b/sklearn/linear_model/tests/test_huber.py
@@ -179,6 +179,28 @@ def test_huber_warm_start():
     assert huber_warm.n_iter_ == 0
 
 
+
+def test_huber_boolean_input():
+    # Test that HuberRegressor works with boolean inputs.
+    X, y = make_regression_with_outliers()
+    X_bool = X > 0
+
+    huber = HuberRegressor()
+    # This should not raise a TypeError
+    try:
+        huber.fit(X_bool, y)
+    except TypeError:
+        pytest.fail("HuberRegressor failed to fit with boolean X")
+
+    # Check that the result is the same as float input
+    huber_float = HuberRegressor()
+    huber_float.fit(X_bool.astype(float), y)
+
+    assert_array_almost_equal(huber.coef_, huber_float.coef_)
+    assert_almost_equal(huber.intercept_, huber_float.intercept_)
+    assert_array_equal(huber.outliers_, huber_float.outliers_)
+    assert_almost_equal(huber.scale_, huber_float.scale_)
+
 def test_huber_better_r2_score():
     # Test that huber returns a better r2 score than non-outliers"""
     X, y = make_regression_with_outliers()
