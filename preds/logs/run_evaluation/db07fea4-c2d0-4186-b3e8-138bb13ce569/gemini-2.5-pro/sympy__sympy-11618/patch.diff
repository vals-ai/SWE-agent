diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..12537279db 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -23,6 +23,7 @@
 from sympy.core.add import Add
 
 from .entity import GeometryEntity
+from itertools import zip_longest
 
 
 class Point(GeometryEntity):
@@ -266,8 +267,9 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        other_args = p.args if isinstance(p, Point) else p
+        return sqrt(sum([(a - b)**2 for a, b in zip_longest(
+            self.args, other_args, fillvalue=0)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
@@ -300,7 +302,7 @@ def taxicab_distance(self, p):
 
         """
         p = Point(p)
-        return sum(abs(a - b) for a, b in zip(self.args, p.args))
+        return sum(abs(a - b) for a, b in zip_longest(self.args, p.args, fillvalue=0))
 
     def midpoint(self, p):
         """The midpoint between self and point p.
@@ -329,7 +331,7 @@ def midpoint(self, p):
         Point2D(7, 3)
 
         """
-        return Point([simplify((a + b)*S.Half) for a, b in zip(self.args, p.args)])
+        return Point([simplify((a + b)*S.Half) for a, b in zip_longest(self.args, p.args, fillvalue=0)])
 
     def evalf(self, prec=None, **options):
         """Evaluate the coordinates of the point.
@@ -406,7 +408,7 @@ def intersection(self, o):
     def dot(self, p2):
         """Return dot product of self with another Point."""
         p2 = Point(p2)
-        return Add(*[a*b for a,b in zip(self, p2)])
+        return Add(*[a*b for a,b in zip_longest(self, p2, fillvalue=0)])
 
     def equals(self, other):
         """Returns whether the coordinates of self and other agree."""
