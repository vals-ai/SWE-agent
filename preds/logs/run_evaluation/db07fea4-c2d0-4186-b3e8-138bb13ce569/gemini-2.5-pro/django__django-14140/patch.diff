diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..5fcb06915e 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -85,13 +85,9 @@ class Q(tree.Node):
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
         args, kwargs = (), {}
-        if len(self.children) == 1 and not isinstance(self.children[0], Q):
-            child = self.children[0]
-            kwargs = {child[0]: child[1]}
-        else:
-            args = tuple(self.children)
-            if self.connector != self.default:
-                kwargs = {'_connector': self.connector}
+        args = tuple(self.children)
+        if self.connector != self.default:
+            kwargs = {'_connector': self.connector}
         if self.negated:
             kwargs['_negated'] = True
         return path, args, kwargs
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..05dc6be92b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+
+from django.db.models import Q, Exists
+# We need a dummy model for this to run without a full Django setup
+# This won't perfectly replicate the environment, but allows testing the deconstruct logic
+class DummyModel:
+    objects = None # Mock objects manager if needed later
+
+# Mock get_user_model to avoid needing auth app setup
+def get_user_model():
+    return DummyModel
+
+print("Deconstructing Q(x=1):")
+print(Q(x=1).deconstruct())
+
+print("\nDeconstructing Q(x=1, y=2):")
+print(Q(x=1, y=2).deconstruct())
+
+print("\nDeconstructing Q(Exists(...)):")
+try:
+    # Mock the filter call as it requires a database connection
+    exists_query = Exists(get_user_model().objects) # Simplified
+    print(Q(exists_query).deconstruct())
+except Exception as e:
+    print(f"Caught expected exception: {type(e).__name__}: {e}")
+
+print("\nScript completed.")
\ No newline at end of file
diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py
index 6dcf36ce02..349f284828 100644
--- a/tests/queries/test_q.py
+++ b/tests/queries/test_q.py
@@ -1,4 +1,4 @@
-from django.db.models import F, Q
+from django.db.models import Exists, F, Q
 from django.test import SimpleTestCase
 
 
@@ -86,6 +86,15 @@ class QTests(SimpleTestCase):
         q = Q(Q(price__gt=F('discounted_price')))
         path, args, kwargs = q.deconstruct()
         self.assertEqual(args, (Q(price__gt=F('discounted_price')),))
+
+    def test_deconstruct_expression(self):
+        # Test deconstruction with a non-subscriptable child (e.g., Exists)
+        from django.contrib.auth.models import User  # Needs a concrete model
+        exists = Exists(User.objects.filter(pk=1))
+        q = Q(exists)
+        path, args, kwargs = q.deconstruct()
+        self.assertEqual(path, 'django.db.models.Q')
+        self.assertEqual(args, (exists,))
         self.assertEqual(kwargs, {})
 
     def test_reconstruct(self):
