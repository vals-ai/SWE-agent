diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py
index 851e4943b..cc25c0897 100644
--- a/src/_pytest/unittest.py
+++ b/src/_pytest/unittest.py
@@ -204,6 +204,21 @@ class TestCaseFunction(Function):
             self._request._fillfixtures()
 
     def teardown(self) -> None:
+        # Do not run teardown logic for skipped items (#10013)
+        # Check both pytest marker and unittest attribute
+        is_skipped_by_marker = self.get_closest_marker("skip")
+        is_skipped_by_unittest = False
+        # Check unittest skip attribute only if the instance exists
+        if hasattr(self, "_testcase") and self._testcase and getattr(self._testcase, "__unittest_skip__", False):
+            is_skipped_by_unittest = True
+
+        if is_skipped_by_marker or is_skipped_by_unittest:
+            self._explicit_tearDown = None
+            self._testcase = None
+            self._obj = None
+            return
+
+        # Original teardown logic for non-skipped items
         if self._explicit_tearDown is not None:
             self._explicit_tearDown()
             self._explicit_tearDown = None
@@ -316,7 +331,7 @@ class TestCaseFunction(Function):
             # Arguably we could always postpone tearDown(), but this changes the moment where the
             # TestCase instance interacts with the results object, so better to only do it
             # when absolutely needed.
-            if self.config.getoption("usepdb") and not _is_skipped(self.obj):
+            if self.config.getoption("usepdb") and not self.get_closest_marker("skip"):
                 self._explicit_tearDown = self._testcase.tearDown
                 setattr(self._testcase, "tearDown", lambda *args: None)
 
diff --git a/testing/test_unittest.py b/testing/test_unittest.py
index fb3128145..1123a71cc 100644
--- a/testing/test_unittest.py
+++ b/testing/test_unittest.py
@@ -1271,6 +1271,38 @@ def test_pdb_teardown_skipped(
     )
     result = pytester.runpytest_inprocess("--pdb")
     result.stdout.fnmatch_lines("* 1 skipped in *")
+
+
+@pytest.mark.parametrize("mark", ["@unittest.skip", "@pytest.mark.skip"])
+def test_pdb_teardown_skipped_class(
+    pytester: Pytester, monkeypatch: MonkeyPatch, mark: str
+) -> None:
+    """With --pdb, setUp and tearDown should not be called for skipped classes (#10013)."""
+    tracked = []
+    monkeypatch.setattr(pytest, "test_pdb_teardown_skipped_class", tracked, raising=False)
+    pytester.makepyfile(
+        """
+        import unittest
+        import pytest
+
+        {mark}("skipped for reasons")
+        class MyTestCase(unittest.TestCase):
+
+            def setUp(self):
+                pytest.test_pdb_teardown_skipped_class.append("setUp:" + self.id())
+
+            def tearDown(self):
+                pytest.test_pdb_teardown_skipped_class.append("tearDown:" + self.id())
+
+            def test_1(self):
+                pass
+
+    """.format(
+            mark=mark
+        )
+    )
+    result = pytester.runpytest_inprocess("--pdb")
+    result.stdout.fnmatch_lines("* 1 skipped in *")
     assert tracked == []
 
 
