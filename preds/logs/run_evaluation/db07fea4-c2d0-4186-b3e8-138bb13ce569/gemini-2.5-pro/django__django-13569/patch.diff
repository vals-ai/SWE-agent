diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..6fc65667db
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.2 on 2025-04-29 02:34
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Thing',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Related',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('thing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related', to='__main__.thing')),
+            ],
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..c9e5cca6b4
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,54 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Count
+from django.db import connection
+from django.apps import apps
+from django.core.management import call_command
+
+# Minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        '__main__', # Use the current script as an app
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField', # Suppress warning
+)
+
+# Define models directly in the script
+class Thing(models.Model):
+    pass
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE, related_name='related')
+
+# Create data
+t = Thing.objects.create()
+rs = [Related.objects.create(thing=t) for _ in range(2)]
+
+# Run the queries from the issue
+print("Query 1 (Expected: [{'id': 1, 'rc': 2}])")
+query1 = Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')
+print(query1)
+
+print("\nQuery 2 (Expected: [{'id': 1, 'rc': 1}, {'id': 1, 'rc': 1}])")
+query2 = Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')
+print(query2)
+
+print("\nQuery 3 (Buggy - Expected: [{'id': 1, 'rc': 2}], Actual: [{'id': 1, 'rc': 1}, {'id': 1, 'rc': 1}])")
+query3 = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')
+print(query3)
+
+print("\nQuery 3 SQL:")
+print(query3.query)
+
+
+print("\nScript completed successfully, no errors.")
+
+
