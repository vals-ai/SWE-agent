diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 4d8ddf3ee5..3bf65f5da8 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -797,8 +797,6 @@ class ConciseDateFormatter(ticker.Formatter):
         # 3: hours, 4: minutes, 5: seconds, 6: microseconds
         for level in range(5, -1, -1):
             if len(np.unique(tickdate[:, level])) > 1:
-                if level < 2:
-                    show_offset = False
                 break
             elif level == 0:
                 # all tickdate are the same, so only micros might be different
@@ -824,6 +822,19 @@ class ConciseDateFormatter(ticker.Formatter):
                     fmt = fmts[level]
             labels[nn] = tickdatetime[nn].strftime(fmt)
 
+        # Check if year was already included in any of the labels
+        # due to zerofmts. If so, we don't need the offset.
+        year_in_label = False
+        if level < 3:  # Only relevant for levels year, month, day
+            # Check if any label used a zero format that includes the year
+            for nn_check in range(len(tickdate)):
+                if tickdate[nn_check][level] == zerovals[level]:
+                    if "%Y" in zerofmts[level] or "%y" in zerofmts[level]:
+                        year_in_label = True
+                        break # Found one, no need to check further
+        if year_in_label:
+            show_offset = False
+
         # special handling of seconds and microseconds:
         # strip extra zeros and decimal if possible.
         # this is complicated by two factors.  1) we have some level-4 strings
diff --git a/lib/matplotlib/tests/test_dates.py b/lib/matplotlib/tests/test_dates.py
index a78c39c560..939a840d4a 100644
--- a/lib/matplotlib/tests/test_dates.py
+++ b/lib/matplotlib/tests/test_dates.py
@@ -807,6 +807,24 @@ def test_concise_formatter_tz():
         assert offset == expected_offset
 
 
+def test_concise_formatter_offset_year():
+    """Test ConciseDateFormatter shows year offset for <1 year ranges."""
+    fig, ax = plt.subplots()
+    # Range from Feb to Aug 2021 (less than a year, doesn't include Jan)
+    d1 = datetime.datetime(2021, 2, 1)
+    d2 = datetime.datetime(2021, 8, 1)
+    ax.set_xlim(d1, d2)
+
+    locator = mdates.AutoDateLocator()
+    formatter = mdates.ConciseDateFormatter(locator)
+    ax.xaxis.set_major_locator(locator)
+    ax.xaxis.set_major_formatter(formatter)
+
+    fig.canvas.draw()
+    offset_text = ax.xaxis.get_offset_text().get_text()
+    assert "2021" in offset_text
+
+
 def test_auto_date_locator_intmult_tz():
     def _create_auto_date_locator(date1, date2, tz):
         locator = mdates.AutoDateLocator(interval_multiples=True, tz=tz)
